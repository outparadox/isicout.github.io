<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-09-08T10:06:39.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Analyze</title>
    <link href="http://yoursite.com/2017/09/08/Analyze/"/>
    <id>http://yoursite.com/2017/09/08/Analyze/</id>
    <published>2017-09-08T10:06:39.000Z</published>
    <updated>2017-09-08T10:06:39.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android 拷贝资源文件到sd card</title>
    <link href="http://yoursite.com/2017/05/12/Android-%E6%8B%B7%E8%B4%9D%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E5%88%B0sd-card/"/>
    <id>http://yoursite.com/2017/05/12/Android-拷贝资源文件到sd-card/</id>
    <published>2017-05-12T03:50:10.000Z</published>
    <updated>2017-05-12T04:10:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>在开发中, 我们有时候需要把某些资源文件打包到apk中, 在程序需要的时候, 读取它们或者把它们放入sd card<br>in my project, i need to copy my source file to sd card ,  i have <code>pricetag_svm.xml</code> file under  my project fiolder<code>app/src/assets</code> and here is my code :<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">copyAssets</span><span class="params">(String file)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    AssetManager assetManager = getAssets();</div><div class="line">    InputStream in = assetManager.open(file);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</div><div class="line"></div><div class="line">        OutputStream out = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        File outFile = <span class="keyword">new</span> File(getExternalFilesDir(<span class="keyword">null</span>), file);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!outFile.exists()) &#123;</div><div class="line"></div><div class="line">            Log.d(<span class="string">"TAG"</span>, <span class="string">"outFile path"</span> + outFile.getAbsolutePath());</div><div class="line">            out = <span class="keyword">new</span> FileOutputStream(outFile);</div><div class="line"></div><div class="line">            copyFile(in, out);</div><div class="line">            <span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    in.close();</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    <span class="comment">// NOOP</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (out != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    out.close();</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    <span class="comment">// NOOP</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">copyFile</span><span class="params">(InputStream in, OutputStream out)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">    <span class="keyword">int</span> read;</div><div class="line">    <span class="keyword">while</span> ((read = in.read(buffer)) != -<span class="number">1</span>) &#123;</div><div class="line">        out.write(buffer, <span class="number">0</span>, read);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>so , at the right time of your needs , just </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">copyAssets(<span class="string">"pricetag_svm.xml"</span>);</div></pre></td></tr></table></figure><p>after this ,you will read this source file in your decice’s sd card </p><p><code>Storage/Android/data/(your application package name)/files</code> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发中, 我们有时候需要把某些资源文件打包到apk中, 在程序需要的时候, 读取它们或者把它们放入sd card&lt;br&gt;in my project, i need to copy my source file to sd card ,  i have &lt;code&gt;pricetag_svm.xml&lt;/code&gt; file under  my project fiolder&lt;code&gt;app/src/assets&lt;/code&gt; and here is my code :&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>ArrayList LinkedList源码分析</title>
    <link href="http://yoursite.com/2017/05/09/ArrayList-LinkedList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2017/05/09/ArrayList-LinkedList源码分析/</id>
    <published>2017-05-09T04:10:59.000Z</published>
    <updated>2017-05-09T04:14:10.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Data structure" scheme="http://yoursite.com/tags/Data-structure/"/>
    
  </entry>
  
  <entry>
    <title>detection the largest retangle , OpenCv 检测最大矩形</title>
    <link href="http://yoursite.com/2017/05/08/detection-the-largest-retangle/"/>
    <id>http://yoursite.com/2017/05/08/detection-the-largest-retangle/</id>
    <published>2017-05-08T10:42:01.000Z</published>
    <updated>2017-07-05T02:46:36.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  LOG_TAG    <span class="meta-string">"JNI_PART"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGI(...)  __android_log_print(ANDROID_LOG_INFO,LOG_TAG, __VA_ARGS__)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGD(...)  __android_log_print(ANDROID_LOG_DEBUG,LOG_TAG, __VA_ARGS__)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGW(...)  __android_log_print(ANDROID_LOG_WARN,LOG_TAG, __VA_ARGS__)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG_TAG, __VA_ARGS__)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGF(...)  __android_log_print(ANDROID_LOG_FATAL,LOG_TAG, __VA_ARGS__)</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * auth:huanjulu</div><div class="line"> */</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  LOG_TAG    <span class="meta-string">"JNI_PART"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGI(...)  __android_log_print(ANDROID_LOG_INFO,LOG_TAG, __VA_ARGS__)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGD(...)  __android_log_print(ANDROID_LOG_DEBUG,LOG_TAG, __VA_ARGS__)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGW(...)  __android_log_print(ANDROID_LOG_WARN,LOG_TAG, __VA_ARGS__)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG_TAG, __VA_ARGS__)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGF(...)  __android_log_print(ANDROID_LOG_FATAL,LOG_TAG, __VA_ARGS__)</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</div><div class="line"></div><div class="line"><span class="function">jstring <span class="title">Java_com_martin_huanjulu_testopencv_MainActivity_stringFromJNI</span><span class="params">(</span></span></div><div class="line">        JNIEnv *env,</div><div class="line">        jobject <span class="comment">/* this */</span>) &#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> hello = <span class="string">"Hello from C++"</span>;</div><div class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(hello.c_str());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> thresh = <span class="number">120</span>;</div><div class="line"><span class="keyword">double</span> max_size_ratio = <span class="number">0.6</span>;</div><div class="line"><span class="keyword">double</span> min_size_ratio = <span class="number">0.1</span>;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">angle</span><span class="params">(Point pt1, Point pt2, Point pt0)</span> </span>&#123;</div><div class="line">    <span class="keyword">double</span> dx1 = pt1.x - pt0.x;</div><div class="line">    <span class="keyword">double</span> dy1 = pt1.y - pt0.y;</div><div class="line">    <span class="keyword">double</span> dx2 = pt2.x - pt0.x;</div><div class="line">    <span class="keyword">double</span> dy2 = pt2.y - pt0.y;</div><div class="line">    <span class="keyword">return</span> (dx1 * dx2 + dy1 * dy2) /</div><div class="line">           <span class="built_in">sqrt</span>((dx1 * dx1 + dy1 * dy1) * (dx2 * dx2 + dy2 * dy2) + <span class="number">1e-10</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">selectFeatureBounds</span><span class="params">(Mat &amp;frame, CvPoint topLeftPoint, CvPoint oppssiteTotopLeft,</span></div><div class="line">                    MatSize imageSize) &#123;</div><div class="line">    cv::Mat overlay;</div><div class="line">    <span class="keyword">double</span> alpha = <span class="number">0.3</span>;</div><div class="line">    frame.copyTo(overlay);</div><div class="line">    cv::rectangle(overlay, topLeftPoint, oppssiteTotopLeft, cvScalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), CV_FILLED, <span class="number">4</span>);</div><div class="line"><span class="comment">//    cv::rectangle(frame, topLeftPoint, oppssiteTotopLeft, cvScalar(0, 0, 255 * 0.7), CV_FILLED, 4);</span></div><div class="line">    cv::addWeighted(overlay, alpha, frame, <span class="number">1</span> - alpha, <span class="number">0</span>, frame);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">findSquares</span><span class="params">(<span class="keyword">const</span> Mat &amp;image, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Point&gt; &gt; &amp;squares, <span class="keyword">double</span> resize_scale)</span> </span>&#123;</div><div class="line">    squares.clear();</div><div class="line">    Mat pyr, timg, gray0(image.size(), CV_8U), gray;</div><div class="line">    image.copyTo(timg);</div><div class="line">    <span class="keyword">int</span> max_size = image.cols * image.rows;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Point&gt; &gt; contours;</div><div class="line">    <span class="keyword">int</span> N = <span class="number">4</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; <span class="number">3</span>; c++) &#123;</div><div class="line">        <span class="keyword">int</span> ch[] = &#123;c, <span class="number">0</span>&#125;;</div><div class="line">        mixChannels(&amp;timg, <span class="number">1</span>, &amp;gray0, <span class="number">1</span>, ch, <span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; N; l++) &#123;</div><div class="line">            <span class="keyword">if</span> (l == <span class="number">0</span>) &#123;</div><div class="line">                Canny(gray0, gray, <span class="number">0</span>, thresh, <span class="number">3</span>);</div><div class="line">                dilate(gray, gray, Mat(), Point(<span class="number">-1</span>, <span class="number">-1</span>));</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                gray = (gray0 &gt;= (l + <span class="number">1</span>) * <span class="number">255</span> / N);</div><div class="line">            &#125;</div><div class="line">            findContours(gray, contours, RETR_LIST, CHAIN_APPROX_SIMPLE);</div><div class="line">            <span class="built_in">vector</span>&lt;Point&gt; approx;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; contours.size(); i++) &#123;</div><div class="line">                <span class="keyword">double</span> area0 = contourArea(contours[i]);</div><div class="line">                <span class="keyword">if</span> ((area0 &gt; max_size_ratio * max_size) || (area0 &lt; min_size_ratio * max_size))</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                approxPolyDP(Mat(contours[i]), approx, arcLength(Mat(contours[i]), <span class="literal">true</span>) * <span class="number">0.015</span>,</div><div class="line">                             <span class="literal">true</span>);</div><div class="line">                <span class="keyword">if</span> (approx.size() == <span class="number">4</span> &amp;&amp; isContourConvex(Mat(approx))) &#123;</div><div class="line">                    <span class="keyword">double</span> maxCosine = <span class="number">0</span>;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt; <span class="number">5</span>; j++) &#123;</div><div class="line">                        <span class="keyword">double</span> cosine = <span class="built_in">fabs</span>(angle(approx[j % <span class="number">4</span>], approx[j - <span class="number">2</span>], approx[j - <span class="number">1</span>]));</div><div class="line">                        maxCosine = MAX(maxCosine, cosine);</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">//if( maxCosine &lt; 0.5 ) //angle must be larger than 60</span></div><div class="line">                    <span class="keyword">if</span> (maxCosine &lt; <span class="number">0.25</span>) <span class="comment">//angle must be larger than 75</span></div><div class="line">                        squares.push_back(approx);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//pick the center one</span></div><div class="line">    <span class="keyword">if</span> (squares.size()) &#123;</div><div class="line">        <span class="keyword">double</span> min_dis = <span class="number">100000</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;Point&gt; pts;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; squares.size(); i++) &#123;</div><div class="line">            <span class="keyword">double</span> new_dis =</div><div class="line">                    <span class="built_in">fabs</span>(squares[i][<span class="number">0</span>].x + squares[i][<span class="number">1</span>].x + squares[i][<span class="number">2</span>].x + squares[i][<span class="number">3</span>].x) /</div><div class="line">                    <span class="number">4.0</span> +</div><div class="line">                    (squares[i][<span class="number">0</span>].y + squares[i][<span class="number">1</span>].y + squares[i][<span class="number">2</span>].y + squares[i][<span class="number">3</span>].y) / <span class="number">4.0</span> -</div><div class="line">                    image.cols / <span class="number">2.0</span> - image.rows / <span class="number">2.0</span>;</div><div class="line">            <span class="keyword">if</span> (new_dis &lt; min_dis) &#123;</div><div class="line">                min_dis = new_dis;</div><div class="line">                pts = squares[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        squares.clear();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; pts.size(); i++) &#123;</div><div class="line">            pts[i].x = <span class="keyword">int</span>(pts[i].x * (<span class="number">1.0</span> / resize_scale));</div><div class="line">            pts[i].y = <span class="keyword">int</span>(pts[i].y * (<span class="number">1.0</span> / resize_scale));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">double</span> max_x = <span class="number">-1</span>, min_x = <span class="number">10000</span>, max_y = <span class="number">-1</span>, min_y = <span class="number">100000</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; pts.size(); i++) &#123;</div><div class="line">            max_x = max_x &gt; pts[i].x ? max_x : pts[i].x;</div><div class="line">            min_x = min_x &lt; pts[i].x ? min_x : pts[i].x;</div><div class="line">            max_y = max_y &gt; pts[i].y ? max_y : pts[i].y;</div><div class="line">            min_y = min_y &lt; pts[i].y ? min_y : pts[i].y;</div><div class="line">        &#125;</div><div class="line">        pts.clear();</div><div class="line">        pts.push_back(Point(min_x, min_y));</div><div class="line">        pts.push_back(Point(max_x, min_y));</div><div class="line">        pts.push_back(Point(max_x, max_y));</div><div class="line">        pts.push_back(Point(min_x, max_y));</div><div class="line">        squares.push_back(pts);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span></span></div><div class="line"><span class="title">drawSquares</span><span class="params">(Mat &amp;image, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Point&gt; &gt; &amp;squares</span></div><div class="line">) &#123;</div><div class="line">    Size boxSize = image.size();</div><div class="line">    <span class="keyword">int</span> height = boxSize.height;</div><div class="line">    <span class="keyword">int</span> width = boxSize.width;</div><div class="line">    <span class="keyword">int</span> horizontallineLength = boxSize.width / <span class="number">4</span>;</div><div class="line">    <span class="keyword">int</span> verticallineLength = height / <span class="number">5</span>;</div><div class="line">    <span class="keyword">int</span> lineLength = <span class="number">30</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; squares.size(); i++) &#123;</div><div class="line">        <span class="keyword">const</span> Point *p = &amp;squares[i][<span class="number">0</span>];</div><div class="line">        <span class="keyword">int</span> n = (<span class="keyword">int</span>) squares[i].size();</div><div class="line"></div><div class="line"></div><div class="line">        cv::line(image,</div><div class="line">                 cvPoint(squares[i][<span class="number">0</span>].x, squares[i][<span class="number">0</span>].y),</div><div class="line">                 cvPoint(squares[i][<span class="number">0</span>].x + lineLength,</div><div class="line">                         squares[i][<span class="number">0</span>].y), cvScalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>),</div><div class="line">                 <span class="number">8</span>, <span class="number">4</span>);</div><div class="line">        cv::line(image,</div><div class="line">                 cvPoint(squares[i][<span class="number">0</span>].x, squares[i][<span class="number">0</span>].y),</div><div class="line">                 cvPoint(squares[i][<span class="number">0</span>].x,</div><div class="line">                         squares[i][<span class="number">0</span>].y + lineLength),</div><div class="line">                 cvScalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">8</span>, <span class="number">4</span>);</div><div class="line">        <span class="comment">/**</span></div><div class="line">       *    right bottom</div><div class="line">       */</div><div class="line">        cv::line(image, cvPoint(squares[i][<span class="number">1</span>].x,</div><div class="line">                                squares[i][<span class="number">1</span>].y),</div><div class="line">                 cvPoint(squares[i][<span class="number">1</span>].x - lineLength,</div><div class="line">                         squares[i][<span class="number">1</span>].y), cvScalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>),</div><div class="line">                 <span class="number">8</span>, <span class="number">4</span>);</div><div class="line">        cv::line(image, cvPoint(squares[i][<span class="number">1</span>].x,</div><div class="line">                                squares[i][<span class="number">1</span>].y),</div><div class="line">                 cvPoint(squares[i][<span class="number">1</span>].x,</div><div class="line">                         squares[i][<span class="number">1</span>].y + lineLength),</div><div class="line">                 cvScalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">8</span>, <span class="number">4</span>);</div><div class="line">        <span class="comment">/**</span></div><div class="line">       *    left bottom</div><div class="line">       */</div><div class="line">        cv::line(image, cvPoint(squares[i][<span class="number">2</span>].x,</div><div class="line">                                squares[i][<span class="number">2</span>].y),</div><div class="line">                 cvPoint(squares[i][<span class="number">2</span>].x,</div><div class="line">                         squares[i][<span class="number">2</span>].y - lineLength),</div><div class="line">                 cvScalar(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">8</span>, <span class="number">4</span>);</div><div class="line">        cv::line(image, cvPoint(squares[i][<span class="number">2</span>].x,</div><div class="line">                                squares[i][<span class="number">2</span>].y),</div><div class="line">                 cvPoint(squares[i][<span class="number">2</span>].x - lineLength,</div><div class="line">                         squares[i][<span class="number">2</span>].y),</div><div class="line">                 cvScalar(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">8</span>, <span class="number">4</span>);</div><div class="line">        <span class="comment">/**</span></div><div class="line">     *    left top</div><div class="line">     */</div><div class="line">        cv::line(image, cvPoint(squares[i][<span class="number">3</span>].x,</div><div class="line">                                squares[i][<span class="number">3</span>].y),</div><div class="line">                 cvPoint(squares[i][<span class="number">3</span>].x + lineLength,</div><div class="line">                         squares[i][<span class="number">3</span>].y),</div><div class="line">                 cvScalar(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">8</span>, <span class="number">4</span>);</div><div class="line">        cv::line(image, cvPoint(squares[i][<span class="number">3</span>].x,</div><div class="line">                                squares[i][<span class="number">3</span>].y),</div><div class="line">                 cvPoint(squares[i][<span class="number">3</span>].x,</div><div class="line">                         squares[i][<span class="number">3</span>].y - lineLength),</div><div class="line">                 cvScalar(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">8</span>, <span class="number">4</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//        selectFeatureBounds(image, cvPoint(squares[i][3].x,</span></div><div class="line"><span class="comment">//                                           squares[i][3].y),</span></div><div class="line"><span class="comment">//                            cvPoint(squares[i][1].x,</span></div><div class="line"><span class="comment">//                                    squares[i][1].y), image.size);</span></div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">main</span><span class="params">(JNIEnv *, jobject, jlong addrGray, jlong addrRgba)</span> &#123;</div><div class="line"></div><div class="line">    Mat &amp;image = *(Mat *) addrRgba;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Point&gt; &gt; squares;</div><div class="line">    Mat newImage = image.clone();</div><div class="line"></div><div class="line">    <span class="keyword">float</span> scale = <span class="number">0.25</span>;</div><div class="line">    resize(image, newImage, Size(), scale, scale);</div><div class="line">    findSquares(newImage, squares, scale);</div><div class="line">    drawSquares(image, squares);</div><div class="line">    newImage.release();</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;jni.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;opencv2/opencv.hpp&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;android/log.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt;  LOG_TAG    &lt;span class=&quot;meta-string&quot;&gt;&quot;JNI_PART&quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; LOGI(...)  __android_log_print(ANDROID_LOG_INFO,LOG_TAG, __VA_ARGS__)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; LOGD(...)  __android_log_print(ANDROID_LOG_DEBUG,LOG_TAG, __VA_ARGS__)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; LOGW(...)  __android_log_print(ANDROID_LOG_WARN,LOG_TAG, __VA_ARGS__)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG_TAG, __VA_ARGS__)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; LOGF(...)  __android_log_print(ANDROID_LOG_FATAL,LOG_TAG, __VA_ARGS__)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; cv;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Opencv" scheme="http://yoursite.com/tags/Opencv/"/>
    
      <category term="NDK" scheme="http://yoursite.com/tags/NDK/"/>
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Opencv In Android</title>
    <link href="http://yoursite.com/2017/05/06/Opencv-In-Android/"/>
    <id>http://yoursite.com/2017/05/06/Opencv-In-Android/</id>
    <published>2017-05-06T07:17:39.000Z</published>
    <updated>2017-05-08T10:37:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>this article is ready for a people  who has some knowledge on android develop and a newer about how use opencv SDK in android .</p><p>一: what is opencv </p><p>简单的来说,  opencv 是跨平台的计算机视觉开源库, 它包含了很多图像识别算法</p><p>In simple terms , opencv is a open source library about Cross-platform computer vision </p><p><a href="https://developer.android.com/ndk/downloads/index.html?hl=zh-cn" target="_blank" rel="external">here is opencv </a><br><a href="https://github.com/opencv/opencv" target="_blank" rel="external">here is opencv source code</a></p><a id="more"></a><p>二: Setting up OpenCv Library inside Android </p><p>1, first our develop environment</p><p>Android Studio<br>Opencv SDK 3.2</p><p>2, you need download and import Opencv library SDK into android studio peoject </p><p><a href="http://opencv.org/opencv-3-2.html" target="_blank" rel="external">SDK</a></p><p>然后你需要使用sdk的java 部分的代码作为你项目的moudle</p><p> <code>From File -&gt; New -&gt; Import Module</code>, choose folder <code>OpenCV-android-sdk -&gt; sdk -&gt; java</code> </p><p>then add module dependency to your project</p><p>in android studio, <code>Application -&gt; Module Settings</code> , select the Dependencies tab , click  <code>+</code> icon at bottom ,choose <code>Module Dependency</code> and select the have imported Opencv moudle </p><p>it will looks like that :</p><p><img src="http://opd7g7we7.bkt.clouddn.com/WX20170508-162944.png" alt="Opencv moudle"></p><p>copy libs folder under <code>sdk/native</code> to Android Studio under  <code>app/src/main</code> , and rename  <code>libs</code> to <code>jniLibs</code> , </p><p><img src="http://opd7g7we7.bkt.clouddn.com/opecv2.png" alt="Opencv libs"></p><p>3, use opencv library </p><p>to use opencv, first you need to modify your Activity xml file . example  <code>activity_main.xml</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    xmlns:tools="http://schemas.android.com/tools"</div><div class="line">    xmlns:opencv="http://schemas.android.com/apk/res-auto"</div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:layout_height="match_parent" &gt;</div><div class="line"></div><div class="line">    &lt;org.opencv.android.JavaCameraView</div><div class="line">        android:layout_width="fill_parent"</div><div class="line">        android:layout_height="fill_parent"</div><div class="line">        android:visibility="gone"</div><div class="line">        android:id="@+id/tutorial1_activity_java_surface_view"</div><div class="line">        opencv:show_fps="true"</div><div class="line">        opencv:camera_id="any" /&gt;</div><div class="line"></div><div class="line">&lt;/FrameLayout&gt;</div></pre></td></tr></table></figure><p>then modify your activity , load the <code>libopencv_java3.so</code> , in here , Note: for OpenCV version 3 at this step you should instead load the library <code>opencv_java3</code>.  OpenCV version 2, you should load the <code>opencv_java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.huanjulu.opencvinandroidexample;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.opencv.android.BaseLoaderCallback;</div><div class="line"><span class="keyword">import</span> org.opencv.android.CameraBridgeViewBase.CvCameraViewFrame;</div><div class="line"><span class="keyword">import</span> org.opencv.android.LoaderCallbackInterface;</div><div class="line"><span class="keyword">import</span> org.opencv.android.OpenCVLoader;</div><div class="line"><span class="keyword">import</span> org.opencv.core.Mat;</div><div class="line"><span class="keyword">import</span> org.opencv.android.CameraBridgeViewBase;</div><div class="line"><span class="keyword">import</span> org.opencv.android.CameraBridgeViewBase.CvCameraViewListener2;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.app.Activity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"><span class="keyword">import</span> android.view.MenuItem;</div><div class="line"><span class="keyword">import</span> android.view.SurfaceView;</div><div class="line"><span class="keyword">import</span> android.view.WindowManager;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">CvCameraViewListener2</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"OCVSample::Activity"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> CameraBridgeViewBase mOpenCvCameraView;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mIsJavaCamera = <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">private</span> MenuItem mItemSwitchCamera = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> BaseLoaderCallback mLoaderCallback = <span class="keyword">new</span> BaseLoaderCallback(<span class="keyword">this</span>) &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onManagerConnected</span><span class="params">(<span class="keyword">int</span> status)</span> </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (status) &#123;</div><div class="line">                <span class="keyword">case</span> LoaderCallbackInterface.SUCCESS: &#123;</div><div class="line">                    Log.i(TAG, <span class="string">"OpenCV loaded successfully"</span>);</div><div class="line">                    mOpenCvCameraView.enableView();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">default</span>: &#123;</div><div class="line">                    <span class="keyword">super</span>.onManagerConnected(status);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        System.loadLibrary(<span class="string">"opencv_java3"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Called when the activity is first created.</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        Log.i(TAG, <span class="string">"called onCreate"</span>);</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);</div><div class="line"></div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        mOpenCvCameraView = (CameraBridgeViewBase) findViewById(R.id.tutorial1_activity_java_surface_view);</div><div class="line"></div><div class="line">        mOpenCvCameraView.setVisibility(SurfaceView.VISIBLE);</div><div class="line"></div><div class="line">        mOpenCvCameraView.setCvCameraViewListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onPause();</div><div class="line">        <span class="keyword">if</span> (mOpenCvCameraView != <span class="keyword">null</span>)</div><div class="line">            mOpenCvCameraView.disableView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line">        <span class="keyword">if</span> (!OpenCVLoader.initDebug()) &#123;</div><div class="line">            Log.d(TAG, <span class="string">"Internal OpenCV library not found. Using OpenCV Manager for initialization"</span>);</div><div class="line">            OpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION_3_0_0, <span class="keyword">this</span>, mLoaderCallback);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            Log.d(TAG, <span class="string">"OpenCV library found inside package. Using it!"</span>);</div><div class="line">            mLoaderCallback.onManagerConnected(LoaderCallbackInterface.SUCCESS);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        <span class="keyword">if</span> (mOpenCvCameraView != <span class="keyword">null</span>)</div><div class="line">            mOpenCvCameraView.disableView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCameraViewStarted</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCameraViewStopped</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Mat <span class="title">onCameraFrame</span><span class="params">(CvCameraViewFrame inputFrame)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> inputFrame.rgba();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>You can create the Main Activity copying the above code. </p><p>First you would like notice is that <code>MainActivity</code> implements  <code>CvCameraViewListener2</code> interface , this interface woulf enfore us to implement few methods which are related to  the camera </p><p>then </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Mat <span class="title">onCameraFrame</span><span class="params">(CvCameraViewFrame inputFrame)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> inputFrame.rgba();</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>这个是你使用opencv Java code 很重要的一个方法, 它接受相机的每帧原始数据, 并且你可以在这个方法内做所有的图片片处理工作, 它返回 <code>Mat</code>  作为相机要接受的帧数据.</p><p>it is the best importment method for you use opencv , this will receiver the vedio as frames and you can do all the image processing inside this method and return a Mat thie this image  :)</p><p>dont forget the permission of camera in your <code>AndroidMainfest.xml</code> </p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    package="com.example.huanjulu.opencvinandroidexample"&gt;</div><div class="line">    &lt;supports-screens android:resizeable="true"</div><div class="line">        android:smallScreens="true"</div><div class="line">        android:normalScreens="true"</div><div class="line">        android:largeScreens="true"</div><div class="line">        android:anyDensity="true" /&gt;</div><div class="line"></div><div class="line">    &lt;uses-sdk android:minSdkVersion="8" /&gt;</div><div class="line"></div><div class="line">    &lt;uses-permission android:name="android.permission.CAMERA"/&gt;</div><div class="line"></div><div class="line">    &lt;uses-feature android:name="android.hardware.camera" android:required="false"/&gt;</div><div class="line">    &lt;uses-feature android:name="android.hardware.camera.autofocus" android:required="false"/&gt;</div><div class="line">    &lt;uses-feature android:name="android.hardware.camera.front" android:required="false"/&gt;</div><div class="line">    &lt;uses-feature android:name="android.hardware.camera.front.autofocus" android:required="false"/&gt;</div><div class="line">    &lt;application</div><div class="line">        android:allowBackup="true"</div><div class="line">        android:icon="@mipmap/ic_launcher"</div><div class="line">        android:label="@string/app_name"</div><div class="line">        android:roundIcon="@mipmap/ic_launcher_round"</div><div class="line">        android:supportsRtl="true"</div><div class="line">        android:theme="@style/AppTheme"&gt;</div><div class="line">        &lt;activity android:name=".MainActivity"&gt;</div><div class="line">            &lt;intent-filter&gt;</div><div class="line">                &lt;action android:name="android.intent.action.MAIN" /&gt;</div><div class="line"></div><div class="line">                &lt;category android:name="android.intent.category.LAUNCHER" /&gt;</div><div class="line">            &lt;/intent-filter&gt;</div><div class="line">        &lt;/activity&gt;</div><div class="line">    &lt;/application&gt;</div><div class="line"></div><div class="line">&lt;/manifest&gt;</div></pre></td></tr></table></figure><p>when open this application , if you get the follow prompt :</p><p>It seems that you device does not support camera (or it is locked ). Application will be closed.</p><p>at this moment , you need manually turn on the camera Permission in device settting </p><p>okay ,then yon can enjoy it </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;this article is ready for a people  who has some knowledge on android develop and a newer about how use opencv SDK in android .&lt;/p&gt;
&lt;p&gt;一: what is opencv &lt;/p&gt;
&lt;p&gt;简单的来说,  opencv 是跨平台的计算机视觉开源库, 它包含了很多图像识别算法&lt;/p&gt;
&lt;p&gt;In simple terms , opencv is a open source library about Cross-platform computer vision &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/ndk/downloads/index.html?hl=zh-cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;here is opencv &lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/opencv/opencv&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;here is opencv source code&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Opencv" scheme="http://yoursite.com/tags/Opencv/"/>
    
      <category term="NDK" scheme="http://yoursite.com/tags/NDK/"/>
    
      <category term="JNI" scheme="http://yoursite.com/tags/JNI/"/>
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins CI</title>
    <link href="http://yoursite.com/2017/05/04/Jenkins/"/>
    <id>http://yoursite.com/2017/05/04/Jenkins/</id>
    <published>2017-05-04T03:57:13.000Z</published>
    <updated>2017-05-12T03:35:09.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Jenkins" scheme="http://yoursite.com/tags/Jenkins/"/>
    
      <category term="Ci" scheme="http://yoursite.com/tags/Ci/"/>
    
  </entry>
  
  <entry>
    <title>NDK in Android</title>
    <link href="http://yoursite.com/2017/05/02/Ndk/"/>
    <id>http://yoursite.com/2017/05/02/Ndk/</id>
    <published>2017-05-02T08:36:41.000Z</published>
    <updated>2017-05-03T10:41:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android NDK  简单来说就是可以让你的应用使用natice-code语言, （比如C ,C++)的工具集</p><p>一：what is the ndk </p><p> Ndk 是允许你在你的工程中可以使用native-code (比如C or c++)的工具, 你可以利用ndk来构建你的natice-app<br> 正如我们知道的那样, Java 是构建android app 的默认语言, 然而, java 代码很容易被反编译, 但是这对C++ code 来说这并不简单, 并且c++ 代码更加高效</p><a id="more"></a><p>二：why is ndk</p><p>C++ 代码反编译困难 </p><p>对于计算复杂量大的代码, C or C++ code can increase the performance of your app</p><p>三：buliding native app</p><p>如果你使用android studio 开发, 你需要下载安装ndk包, More info: <a href="https://developer.android.com/ndk/downloads/index.html?hl=zh-cn" target="_blank" rel="external">NDK</a></p><p>1, 首先在代码中声明要在C++ code中要实现的native方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * auth:huanjulu</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line">        ((TextView) findViewById(R.id.text)).setText(nativeMethod());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line">        getMenuInflater().inflate(R.menu.menu_main, menu);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="comment">// Handle action bar item clicks here. The action bar will</span></div><div class="line">        <span class="comment">// automatically handle clicks on the Home/Up button, so long</span></div><div class="line">        <span class="comment">// as you specify a parent activity in AndroidManifest.xml.</span></div><div class="line">        <span class="keyword">int</span> id = item.getItemId();</div><div class="line"></div><div class="line">        <span class="comment">//noinspection SimplifiableIfStatement</span></div><div class="line">        <span class="keyword">if</span> (id == R.id.action_settings) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * native code</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">nativeMethod</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>2, 对包含<code>native</code> 关键字方法的类, 生成<code>.h</code> 头文件</p><p>进入到本地Java文件夹下 ,在Terminal input the follow commond</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javah -d ../jni jniproject.ndkproject.MainActivity</div></pre></td></tr></table></figure><p>first , <code>jniproject.ndkproject</code> is your package name  and <code>MainActivity</code> is the class name that contains native code</p><p>and after that , you can see the <code>.h</code> file of  <code>MainActivity</code> class , it looks like :</p><p><img src="http://opd7g7we7.bkt.clouddn.com/WX20170503-174729.png" alt="Qualified types"></p><p>and we can looks what contents it contains</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/* DO NOT EDIT THIS FILE - it is machine generated */</div><div class="line"><span class="comment">#include &lt;jni.h&gt;</span></div><div class="line">/* Header <span class="keyword">for</span> class jniproject_ndkproject_MainActivity */</div><div class="line"></div><div class="line"><span class="comment">#ifndef _Included_jniproject_ndkproject_MainActivity</span></div><div class="line"><span class="comment">#define _Included_jniproject_ndkproject_MainActivity</span></div><div class="line"><span class="comment">#ifdef __cplusplus</span></div><div class="line">extern <span class="string">"C"</span> &#123;</div><div class="line"><span class="comment">#endif</span></div><div class="line">/*</div><div class="line"> * Class:     jniproject_ndkproject_MainActivity</div><div class="line"> * Method:    nativeMethod</div><div class="line"> * Signature: ()Ljava/lang/String;</div><div class="line"> */</div><div class="line">JNIEXPORT jstring JNICALL Java_jniproject_ndkproject_MainActivity_nativeMethod</div><div class="line">  (JNIEnv *, jobject);</div><div class="line"></div><div class="line"><span class="comment">#ifdef __cplusplus</span></div><div class="line">&#125;</div><div class="line"><span class="comment">#endif</span></div><div class="line"><span class="comment">#endif</span></div></pre></td></tr></table></figure><p>3, <code>android.mk``application.mk</code> file</p><p>在你的jni directory, 新建<code>android.mk</code>, </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">LOCAL_PATH := $(call my-dir)</div><div class="line">include $(CLEAR_VARS)</div><div class="line"></div><div class="line">LOCAL_MODULE := hellojni</div><div class="line">LOCAL_SRC_FILES := hellojni.cpp</div><div class="line">include $(BUILD_SHARED_LIBRARY)</div></pre></td></tr></table></figure><p><code>application.mk</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">APP_MODULES := hellojni  //生成的.so name</div><div class="line"></div><div class="line">APP_ABI := all  //生成的.so 目标cpu平台</div></pre></td></tr></table></figure><p>if you want to know more information of syntax about them, here is the dox<br><a href="http://android.mk/#intro" target="_blank" rel="external">http://android.mk/#intro</a></p><p>4, 编写你的natie-code 实现文件, (ig  .cpp or .c)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"jniproject_ndkproject_MainActivity.h"</span></span></div><div class="line"></div><div class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_jniproject_ndkproject_MainActivity_nativeMethod</span></span></div><div class="line">       <span class="params">(JNIEnv *env, jclass type)</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(<span class="string">"this code from jni cpp"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>as wo can see that in above c++ code </p><p>first , you need to include you <code>.h</code>file</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#include "jniproject_ndkproject_MainActivity.h"</div></pre></td></tr></table></figure><p>接下来你需要按照c++ 代码的规范编写实现方法, 请注意方法实现的命名规范 (JNIEXPORT  返回值类型 JNICALL 包名<em>类名</em>方法名)</p><p>5, ndk-build </p><p>under the <code>jni</code> dictionary, generate <code>.so</code> file </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">luhuanju:jni huanjulu$ ndk-build</div></pre></td></tr></table></figure><p>接下来你需要把生成的<code>app/src/main/libs</code> 下的平台的.so 文件复制到 <code>app/libs</code> 下</p><p><img src="http://opd7g7we7.bkt.clouddn.com/WX20170503-181618@2x.png" alt="Qualified types"></p><p>6, <code>app/build.gradle</code> config seeting </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">'com.android.application'</span></div><div class="line"></div><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">25</span></div><div class="line">    buildToolsVersion <span class="string">"25.0.2"</span></div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId <span class="string">"jniproject.ndkproject"</span></div><div class="line">        minSdkVersion <span class="number">15</span></div><div class="line">        targetSdkVersion <span class="number">25</span></div><div class="line">        versionCode <span class="number">1</span></div><div class="line">        versionName <span class="string">"1.0"</span></div><div class="line">        testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span></div><div class="line"></div><div class="line"></div><div class="line">        ndk &#123;<span class="comment">//指定生成的lib，比如此时生成native.so</span></div><div class="line">            moduleName   <span class="string">"hellojni"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            <span class="function">minifyEnabled <span class="keyword">false</span></span></div><div class="line">            proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">'proguard-android.txt'</span>)</span>, 'proguard-rules.pro'</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    <span class="function">compile <span class="title">fileTree</span><span class="params">(dir: <span class="string">'libs'</span>, include: [<span class="string">'*.jar'</span>])</span></span></div><div class="line">    <span class="title">androidTestCompile</span><span class="params">(<span class="string">'com.android.support.test.espresso:espresso-core:2.2.2'</span>, &#123;</span></div><div class="line">        exclude group: <span class="string">'com.android.support'</span>, <span class="keyword">module</span>: <span class="string">'support-annotations'</span></div><div class="line">    &#125;)</div><div class="line">    compile 'com.android.support:appcompat-v7:25.2.0'</div><div class="line">    compile 'com.android.support.constraint:constraint-layout:1.0.0-beta4'</div><div class="line">    compile 'com.android.support:design:25.2.0'</div><div class="line">    testCompile 'junit:junit:4.12'</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>the the last step is that you just need call you natice-code library </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> jniproject.ndkproject;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.Toolbar;</div><div class="line"><span class="keyword">import</span> android.widget.TextView;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * auth:huanjulu</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        System.loadLibrary(<span class="string">"hellojni"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line">        ((TextView) findViewById(R.id.text)).setText(nativeMethod());</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * native code</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">nativeMethod</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>here is source code </p><p><a href="https://github.com/isicout/JNIProgjectExample" target="_blank" rel="external">https://github.com/isicout/JNIProgjectExample</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android NDK  简单来说就是可以让你的应用使用natice-code语言, （比如C ,C++)的工具集&lt;/p&gt;
&lt;p&gt;一：what is the ndk &lt;/p&gt;
&lt;p&gt; Ndk 是允许你在你的工程中可以使用native-code (比如C or c++)的工具, 你可以利用ndk来构建你的natice-app&lt;br&gt; 正如我们知道的那样, Java 是构建android app 的默认语言, 然而, java 代码很容易被反编译, 但是这对C++ code 来说这并不简单, 并且c++ 代码更加高效&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="NDK" scheme="http://yoursite.com/tags/NDK/"/>
    
      <category term="JNI" scheme="http://yoursite.com/tags/JNI/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/05/02/hello-world/"/>
    <id>http://yoursite.com/2017/05/02/hello-world/</id>
    <published>2017-05-02T07:12:29.000Z</published>
    <updated>2017-05-02T08:22:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Do you know Dagger2?</title>
    <link href="http://yoursite.com/2017/05/02/Dagger2/"/>
    <id>http://yoursite.com/2017/05/02/Dagger2/</id>
    <published>2017-05-02T06:13:26.000Z</published>
    <updated>2017-05-02T08:22:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>很多Android Apps通常依赖于其他依赖库的实例化对象, 举例来说,  一个Twitter客户端可能使用类似<a href="https://github.com/square/retrofit" target="_blank" rel="external">Retrofit</a>的网络依赖库来进行构建, 要使用这个库, 你需要添加解析的库，比如说<a href="https://github.com/google/gson" target="_blank" rel="external">Gson</a>.  此外,  那些实现认证或者缓存的类可能需要访问shared preferences和其他公共的存储单元，需要首先实例化他们并且创建固有的依赖链.     </p><a id="more"></a><p>Dagger2 为你分析这些依赖库, 并且生成代码以帮助把他们连接在一起, 虽然还有其他的Java 依赖注入库, 但是他们的大多数在依赖XML的时候有很多限制, 在运行期间需要验证依赖关系的问题, 或者在启动期间导致性能上的损耗,  Dagger 2纯粹依赖于使用Java注释处理器和编译时检查来分析和验证依赖性. 它被认为是迄今为止效率最高的依赖注入框架之一. </p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>这里有使用Dagger2 的一些优点</p><ul><li><strong>简化对共享实例的访问.</strong> 举例来说, 正如<a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">ButterKnife</a>声明对View, 事件处理, 资源的引用更为简单那种, Dagger2为获取共享实例的饮用提供了一种简单的方式. 比如,一旦我们在Dagger中声明类似<code>MyTwitterApiClient</code>或者<code>SharedPreferences</code>的单例的引用, 我们可以简单的使用 <code>@Inject</code>注解来声明字段</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">   <span class="meta">@Inject</span> MyTwitterApiClient mTwitterApiClient;</div><div class="line">   <span class="meta">@Inject</span> SharedPreferences sharedPreferences;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstance)</span> </span>&#123;</div><div class="line">       <span class="comment">// assign singleton instances to fields</span></div><div class="line">       InjectorClass.inject(<span class="keyword">this</span>);</div><div class="line">   &#125;</div></pre></td></tr></table></figure><ul><li><p><strong>更容易配制复杂的依赖.</strong>  那些你经常创建的对象有一个隐式的过程. Dagger2 遍历依赖图表并且生成以便于理解且追踪代码, 同时把你从编写大量的模版代码的工作中解救出来, 你正常的需要手工编写代码以获取引用并将他们作为依赖传递给其他对象. 它也有助于简化重构, 因为以可以专注于构建哪些模块而不是关注于他们被创建的顺序. </p></li><li><p><strong>单元和集成变得更为轻松.</strong> 因为依赖图表是由我们自己创建的, 我们能够简单的切换模块，作出网络响应并且模拟这种行为 </p></li><li><p><strong>实例作用域.</strong> 你不仅更为简单的管理整个应用程序的生命周期, 你还可以利用Dagger2 声明更为简短的生命周期的实例(比如, 绑定用户的seesion, Activity 的生命周期, etc.). </p></li></ul><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>Android studio通常情况下不会允许你连接到生成Dagger2的代码作为合法的类,  因为他们通常情况下不会添加到资源路径, 但是通过添加<code>android-apt</code> 插件能够添加这些文件到IDE路径，并且使你对这些文件有更多的可见性</p><p>由于Android Gradle plugin 2.2注释处理是内置的, android-apt并不被受待见. <code>android-apt</code>不支持新的 <code>jack</code> </p><p>在你的<code>app/build.gradle</code> 文件中添加以下3行的申请说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    <span class="comment">// apt command comes from the android-apt plugin</span></div><div class="line">    apt <span class="string">'com.google.dagger:dagger-compiler:2.8'</span></div><div class="line">    compile <span class="string">'com.google.dagger:dagger:2.8'</span></div><div class="line">    provided <span class="string">'javax.annotation:jsr250-api:1.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果你正在使用android gradle 2.3 插件, 你可以使用<code>annotationProcessor</code> 来代替apt-plugin:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    <span class="comment">// apt command comes from the android-apt plugin</span></div><div class="line">    compile <span class="string">"com.google.dagger:dagger:2.9"</span></div><div class="line">    annotationProcessor <span class="string">"com.google.dagger:dagger-compiler:2.9"</span></div><div class="line">    provided <span class="string">'javax.annotation:jsr250-api:1.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>要注意的是<code>provided</code>关键字仅仅在编译期间被用来作为依赖关系, Dagger生成用于创建源代码中定义的类的依赖图的代码. 这些类在编译期间被添加到IDE类路径中. <code>annotationProcessor</code>关键字被Android gradle插件所识别并且不会把这些类他们添加到类路径中, 它们仅仅被用来注释处理, 以防止别人意外的引用他们. </p><h2 id="创建单例"><a href="#创建单例" class="headerlink" title="创建单例"></a>创建单例</h2><p><img src="https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_general.png" alt="Creatint singletons"></p><p>很简单的例子表明如何使用Dagger2 集中你所有创建的单例.<br>类似于下面这样, 假设在你的Twitter客户端中你从没有使用过任何类型的的依赖注入框架写代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line"></div><div class="line"><span class="comment">// Enable caching for OkHttp</span></div><div class="line"><span class="keyword">int</span> cacheSize = <span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span>; <span class="comment">// 10 MiB</span></div><div class="line">Cache cache = <span class="keyword">new</span> Cache(getApplication().getCacheDir(), cacheSize);</div><div class="line">client.setCache(cache);</div><div class="line"></div><div class="line"><span class="comment">// Used for caching authentication tokens</span></div><div class="line">SharedPreferences sharedPrefeences = PreferenceManager.getDefaultSharedPreferences(<span class="keyword">this</span>);</div><div class="line"></div><div class="line"><span class="comment">// Instantiate Gson</span></div><div class="line">Gson gson = <span class="keyword">new</span> GsonBuilder().create();</div><div class="line">GsonConverterFactory converterFactory = GsonConverterFactory.create(gson);</div><div class="line"></div><div class="line"><span class="comment">// Build Retrofit</span></div><div class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">                                .baseUrl(<span class="string">"https://api.github.com"</span>)</div><div class="line">                                .addConverterFactory(converterFactory)</div><div class="line">                                .client(client)  <span class="comment">// custom client</span></div><div class="line">                                .build();</div></pre></td></tr></table></figure><h2 id="声明你的单例"><a href="#声明你的单例" class="headerlink" title="声明你的单例"></a>声明你的单例</h2><p>你需要通过创建一个Dagger2 moudle来明确哪些对象应该被包含作为依赖链的一部分. 举例来说, 如果我们希望使一个单独的<code>Retrofit</code>单例绑定到整个应用程序的生命周期,  并且对我们所有的activity和fragment都是可用的, 我们首先要让Dagger 知道可以提供一个<code>Retrofit</code>单例</p><p>因为我们希望设置caching, 我们需要一份Application Context上下文环境. 我们的第一个Dagger模块<code>AppModule.java</code>将被用来提供此引用, 我们还需要声明带有<code>@Provides</code>注解的方法来告诉Dagger这个方法是返回类型为<code>Application</code>的构造器: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;</div><div class="line"></div><div class="line">    Application mApplication;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AppModule</span><span class="params">(Application application)</span> </span>&#123;</div><div class="line">        mApplication = application;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="function">Application <span class="title">providesApplication</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mApplication;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我们创建一个名为<code>NetModule.java</code>并且使用<code>@Module</code>标注的类来告诉Dagger在可用方法的范围内寻找来作为实例的提供者</p><p><code>@Singleton</code>注解同样告诉Dagger编译器这个实例在整个应用生命周期中应该仅仅被创建一次, 在以下的例子中, 我们指定<code>SharedPreferences</code> <code>Gson</code> <code>Cache</code> <code>OkHttpClient</code> <code>Retrofit</code> 作为可以用作依赖列表一部分的返回类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NetModule</span> </span>&#123;</div><div class="line"></div><div class="line">    String mBaseUrl;</div><div class="line"></div><div class="line">    <span class="comment">// Constructor needs one parameter to instantiate.  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NetModule</span><span class="params">(String baseUrl)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mBaseUrl = baseUrl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Dagger will only look for methods annotated with @Provides</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="comment">// Application reference must come from AppModule.class</span></div><div class="line">    <span class="function">SharedPreferences <span class="title">providesSharedPreferences</span><span class="params">(Application application)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> PreferenceManager.getDefaultSharedPreferences(application);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="function">Cache <span class="title">provideOkHttpCache</span><span class="params">(Application application)</span> </span>&#123; </div><div class="line">        <span class="keyword">int</span> cacheSize = <span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span>; <span class="comment">// 10 MiB</span></div><div class="line">        Cache cache = <span class="keyword">new</span> Cache(application.getCacheDir(), cacheSize);</div><div class="line">        <span class="keyword">return</span> cache;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Provides</span> </div><div class="line">   <span class="meta">@Singleton</span></div><div class="line">   <span class="function">Gson <span class="title">provideGson</span><span class="params">()</span> </span>&#123;  </div><div class="line">       GsonBuilder gsonBuilder = <span class="keyword">new</span> GsonBuilder();</div><div class="line">       gsonBuilder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES);</div><div class="line">       <span class="keyword">return</span> gsonBuilder.create();</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Provides</span></div><div class="line">   <span class="meta">@Singleton</span></div><div class="line">   <span class="function">OkHttpClient <span class="title">provideOkHttpClient</span><span class="params">(Cache cache)</span> </span>&#123;</div><div class="line">      OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line">      client.setCache(cache);</div><div class="line">      <span class="keyword">return</span> client;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Provides</span></div><div class="line">   <span class="meta">@Singleton</span></div><div class="line">   <span class="function">Retrofit <span class="title">provideRetrofit</span><span class="params">(Gson gson, OkHttpClient okHttpClient)</span> </span>&#123;</div><div class="line">      Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">                .addConverterFactory(GsonConverterFactory.create(gson))</div><div class="line">                .baseUrl(mBaseUrl)</div><div class="line">                .client(okHttpClient)</div><div class="line">                .build();</div><div class="line">        <span class="keyword">return</span> retrofit;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>注意这个方法名 (i.e. provideGson(), provideRetrofit(), etc)可以起任何名. 使用<code>@Provides</code>注解的返回值类型被用来将此实例与其他任何相同类型的moudle相关联, <code>@Singleton</code>注解被用来像Dagger描述在整个应用程序生命周期期间仅仅初始化一次</p><p><code>Retrofit</code>的实例的同时依赖于<code>Gson</code>和<code>OkHttpClient</code>实例, 所以我们可以在同一个类中声明另外一个方法以获取这两个类型. 在这个方法中<code>@Provides</code>注解和这两个参数将会使得Dagger 意识到这里有<code>Gson</code>和<code>OkHttpClient</code>的依赖以创建<code>Retrofit</code>的实例</p><h2 id="声明注入目标"><a href="#声明注入目标" class="headerlink" title="声明注入目标"></a>声明注入目标</h2><p>Dagger为你的activitys, services, 或fragments提供了一种简单的通过使用<code>@Inject</code>注解注入字段并且调用<code>inject()</code>方法来分配引用, 调用<code>inject()</code>方法将会使Dagger2 在依赖图谱中尝试寻找一个相匹配的返回类型来定位单例. 如果找到, 它将分配各自对应字段的引用. 比如, 在下面的例子中, 它会尝试寻找返回类型为<code>MyTwitterApiClient</code>和<code>SharedPreferences</code>的提供器(provider)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">   <span class="meta">@Inject</span> MyTwitterApiClient mTwitterApiClient;</div><div class="line">   <span class="meta">@Inject</span> SharedPreferences sharedPreferences;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstance)</span> </span>&#123;</div><div class="line">       <span class="comment">// assign singleton instances to fields</span></div><div class="line">       InjectorClass.inject(<span class="keyword">this</span>);</div><div class="line">   &#125;</div></pre></td></tr></table></figure><p>Dagger2 中使用的注入器类被称为 component组件, 它为我们的activitys, services, 或则fragments分配引用以连接我们之前声明的单例, 我们同样需要一个<code>@Component</code>注解声明的类, 可以添加的activitys, services, 或则fragments应该在这个类中单独的使用<code>inject()</code>方法声明:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Singleton</span></div><div class="line"><span class="meta">@Component</span>(modules=&#123;AppModule.class, NetModule.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NetComponent</span> </span>&#123;</div><div class="line">   <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span></span>;</div><div class="line">   <span class="comment">// void inject(MyFragment fragment);</span></div><div class="line">   <span class="comment">// void inject(MyService service);</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>注意这些类并不足以作为注入的目标, Dagger2 依赖相匹配的类, 你必须明确指明那个类应该被声明在内, (这里有一些<a href="https://blog.gouline.net/dagger-2-even-sharper-less-square-b52101863542#.vgmua0fkm" target="_blank" rel="external">建议</a>来解决这个问题, 但是这样做代码可能追踪更加困难相比简单的定义它们 )</p><h2 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h2><p>一件重要Dagger2的方面是, 这个库为标注了<code>@Component</code>的接口类生成代码, 你可以使用前缀为<code>@Dagger</code>(i.e. DaggerTwitterApiComponent.java)的类, 它将负责实例化我们的依赖图谱中的一个实例, 并且用它执行<code>@Inject</code>注解字段的注入工作. 请看(setup guide)[<a href="https://github.com/codepath/android_guides/wiki/Dependency-Injection-with-Dagger-2#setup" target="_blank" rel="external">https://github.com/codepath/android_guides/wiki/Dependency-Injection-with-Dagger-2#setup</a>].</p><h2 id="实例化组件"><a href="#实例化组件" class="headerlink" title="实例化组件"></a>实例化组件</h2><p>我们应该在<code>Application</code>的类中做所有工作, 因为这些实例在整个应用程序的生命周期中仅仅被声明一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> NetComponent mNetComponent;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line"></div><div class="line">        <span class="comment">// Dagger%COMPONENT_NAME%</span></div><div class="line">        mNetComponent = DaggerNetComponent.builder()</div><div class="line">                <span class="comment">// list of modules that are part of this component need to be created here too</span></div><div class="line">                .appModule(<span class="keyword">new</span> AppModule(<span class="keyword">this</span>)) <span class="comment">// This also corresponds to the name of your module: %component_name%Module</span></div><div class="line">                .netModule(<span class="keyword">new</span> NetModule(<span class="string">"https://api.github.com"</span>))</div><div class="line">                .build();</div><div class="line"></div><div class="line">        <span class="comment">// If a Dagger 2 component does not have any constructor arguments for any of its modules,</span></div><div class="line">        <span class="comment">// then we can use .create() as a shortcut instead:</span></div><div class="line">        <span class="comment">//  mNetComponent = com.codepath.dagger.components.DaggerNetComponent.create();</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> NetComponent <span class="title">getNetComponent</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> mNetComponent;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果不能没有Dagger component组件的引用, 你要确保重构项目(在AndroidStudio中, select Build &gt; Rebuild Project)</p><p>因为我们覆写了默认的<code>Application</code>类, 我们同样修改应用程序<code>name</code>为<code>MyApp</code>, 这样, 你的应用程序将使用这个Applicaiton 类来处理最初的实例. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;application</div><div class="line">      android:allowBackup=<span class="string">"true"</span></div><div class="line">      android:name=<span class="string">".MyApp"</span>&gt;</div></pre></td></tr></table></figure><p>在我们Activity的内部, 我们只需要调用<code>inject()</code>方法就可以简单的访问这些组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">  <span class="meta">@Inject</span> OkHttpClient mOkHttpClient;</div><div class="line">  <span class="meta">@Inject</span> SharedPreferences sharedPreferences;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstance)</span> </span>&#123;</div><div class="line">        <span class="comment">// assign singleton instances to fields</span></div><div class="line">        <span class="comment">// We need to cast to `MyApp` in order to get the right method</span></div><div class="line">        ((MyApp) getApplication()).getNetComponent().inject(<span class="keyword">this</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h2 id="限制类型"><a href="#限制类型" class="headerlink" title="限制类型"></a>限制类型</h2><p><img src="https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_qualifiers.png" alt="Qualified types"></p><p>如果我们需要同一返回类型的两个不同对象, 我们可以使用<code>@Named</code>限定注解, 你需要在你提供单例的地方(<code>@Provides</code> annotation)和注入它们的地方(<code>@Inject</code> annotations)同时声明它们:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Provides</span> <span class="meta">@Named</span>(<span class="string">"cached"</span>)</div><div class="line"><span class="meta">@Singleton</span></div><div class="line"><span class="function">OkHttpClient <span class="title">provideOkHttpClient</span><span class="params">(Cache cache)</span> </span>&#123;</div><div class="line">    OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line">    client.setCache(cache);</div><div class="line">    <span class="keyword">return</span> client;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Provides</span> <span class="meta">@Named</span>(<span class="string">"non_cached"</span>) <span class="meta">@Singleton</span></div><div class="line"><span class="function">OkHttpClient <span class="title">provideOkHttpClient</span><span class="params">()</span> </span>&#123;</div><div class="line">    OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line">    <span class="keyword">return</span> client;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当你注入这些单例的时候, 你同样需要<code>@Named</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Inject</span> <span class="meta">@Named</span>(<span class="string">"cached"</span>) OkHttpClient client;</div><div class="line"><span class="meta">@Inject</span> <span class="meta">@Named</span>(<span class="string">"non_cached"</span>) OkHttpClient client2;</div></pre></td></tr></table></figure><p><code>@Named</code>是Dagger预先定义的限定注解, 你可以很好的创建你自己的限定注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Qualifier</span></div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DefaultPreferences &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p><img src="https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_scopes.png" alt="Scopes"></p><p>在Dagger2, 你可以声明Component组件通过声明自定义的范围如何封装. 举例来说, 你可以创建一个仅仅在activity或者fragment生命周期运行期间的作用域. 你可以创建只映射到用户身份验证会话的作用域. </p><p>利用作用域允许我们要么创建依赖组件要么创建子组件, 上面的例子表明我们所使用的<code>@Singleton</code>注解是伴随应用程序的整个生命周期, 我们同样依赖于一个主要的Dagger component组件.</p><p>如果我们希望拥有一个并不需要常驻内存中的多个Component组件(i.e. 依赖于activity或者fragment生命周期, 甚至依赖于用户的登录状态的Component组件), 我们可以创建相关的组件活着子组件, 在任何一种情况下, 都会为你封装代码提供一种方式. 我们将在下文中看到如何同时使用它们. </p><p>这里有使用这些方法的几点考虑:</p><ul><li><strong>相关的组件要求父组件明确列出哪些依赖可以注入, 而子组件没有</strong> 对于父组件来说, 你需要通过指明类型和方法, 以想子组件暴露它们</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// parent component</span></div><div class="line"><span class="meta">@Singleton</span></div><div class="line"><span class="meta">@Component</span>(modules=&#123;AppModule.class, NetModule.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NetComponent</span> </span>&#123;</div><div class="line">    <span class="comment">// remove injection methods if downstream modules will perform injection</span></div><div class="line"></div><div class="line">    <span class="comment">// downstream components need these exposed</span></div><div class="line">    <span class="comment">// the method name does not matter, only the return type</span></div><div class="line">    <span class="function">Retrofit <span class="title">retrofit</span><span class="params">()</span></span>; </div><div class="line">    <span class="function">OkHttpClient <span class="title">okHttpClient</span><span class="params">()</span></span>;</div><div class="line">    <span class="function">SharedPreferences <span class="title">sharedPreferences</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果你忘记添加这行代码, 你将要看到一个关于注入目标丢失的错误. 类似于private/public变量如何去管理那样, 使用父component组件允许更明确的控制以及更好的封装, 但是使用子component组件使得依赖注入在花费的代价上更为简单</p><ul><li><strong>两个相互依赖的组件不能共享同一范围.</strong> 举例来说, 两个组件不能同时使用 <code>@Singleton</code>注解 标注作用域, 这个限制是有<a href="https://github.com/google/dagger/issues/107#issuecomment-71073298" target="_blank" rel="external">这里</a>描述的原因导致的, 相关的组件需要定义它们自己的范围.</li></ul><h2 id="依赖组件"><a href="#依赖组件" class="headerlink" title="依赖组件"></a>依赖组件</h2><p><img src="https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_dependency.png" alt="Dependent Components"></p><p>举例来说, 如果我们想要使用 用户会话的整个生命周期<br>我们可以声明我们自己的 <code>@UserScope</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</div><div class="line"><span class="keyword">import</span> javax.inject.Scope;</div><div class="line"></div><div class="line"><span class="meta">@Scope</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> UserScope &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后, 我们声明它的父组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Singleton</span></div><div class="line"><span class="meta">@Component</span>(modules=&#123;AppModule.class, NetModule.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NetComponent</span> </span>&#123;</div><div class="line">    <span class="comment">// downstream components need these exposed with the return type</span></div><div class="line">    <span class="comment">// method name does not really matter</span></div><div class="line">    <span class="function">Retrofit <span class="title">retrofit</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我们可以接着声明它的子组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@UserScope</span> <span class="comment">// using the previously defined scope, note that @Singleton will not work</span></div><div class="line"><span class="meta">@Component</span>(dependencies = NetComponent.class, modules = GitHubModule.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GitHubComponent</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我们假设下面的Github模块简单的返回一个Github Api的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GitHubModule</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GitHubApiInterface</span> </span>&#123;</div><div class="line">      <span class="meta">@GET</span>(<span class="string">"/org/&#123;orgName&#125;/repos"</span>)</div><div class="line">      Call&lt;ArrayList&lt;Repository&gt;&gt; getRepository(<span class="meta">@Path</span>(<span class="string">"orgName"</span>) String orgName);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@UserScope</span> <span class="comment">// needs to be consistent with the component scope</span></div><div class="line">    <span class="function"><span class="keyword">public</span> GitHubApiInterface <span class="title">providesGitHubInterface</span><span class="params">(Retrofit retrofit)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> retrofit.create(GitHubApiInterface.class);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>为了<code>GitHubModule.java</code>获得<code>Retrofit</code>实例的引用, 我们需要在调用它之前的组件中明确定义它们, 如果说在它之后执行注入, 它们应该在之后的组件中移除它们:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Singleton</span></div><div class="line"><span class="meta">@Component</span>(modules=&#123;AppModule.class, NetModule.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NetComponent</span> </span>&#123;</div><div class="line">    <span class="comment">// remove injection methods if downstream modules will perform injection</span></div><div class="line"></div><div class="line">    <span class="comment">// downstream components need these exposed</span></div><div class="line">    <span class="function">Retrofit <span class="title">retrofit</span><span class="params">()</span></span>;</div><div class="line">    <span class="function">OkHttpClient <span class="title">okHttpClient</span><span class="params">()</span></span>;</div><div class="line">    <span class="function">SharedPreferences <span class="title">sharedPreferences</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>最后一步是使用<code>GitHubComponent</code> 执行实例化, 这个时候, 我们首先需要构建<code>NetComponent</code>, 并且在<code>DaggerGitHubComponent</code> builder的构造函数中传递它: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">NetComponent mNetComponent = DaggerNetComponent.builder()</div><div class="line">                .appModule(<span class="keyword">new</span> AppModule(<span class="keyword">this</span>))</div><div class="line">                .netModule(<span class="keyword">new</span> NetModule(<span class="string">"https://api.github.com"</span>))</div><div class="line">                .build();</div><div class="line"></div><div class="line">GitHubComponent gitHubComponent = DaggerGitHubComponent.builder()</div><div class="line">                .netComponent(mNetComponent)</div><div class="line">                .gitHubModule(<span class="keyword">new</span> GitHubModule())</div><div class="line">                .build();</div></pre></td></tr></table></figure><p><a href="https://github.com/codepath/dagger2-example" target="_blank" rel="external">this example code </a></p><p>子组件</p><p><img src="https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_subcomponent.png" alt="Subcomponents"></p><p>使用子组件是扩展组件的对象图的另外一种方式, 就像依赖的组件那样, 子组件有它们自己的生命周期并且当所有子组件的引用都消失的时候是可以被垃圾收集的, 并具有相同的范围限制。在使用这种方法的一个优点是，不需要定义所有下游组件. </p><p>另一个主要的不同之处就是子组件只需要在父组件中声明. </p><p>这里有一个为Activity使用子组件的例子. 我们使用自定义的范围和<code>@Subcomponent</code>注解标注一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@MyActivityScope</span></div><div class="line"><span class="meta">@Subcomponent</span>(modules=&#123; MyActivityModule.class &#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyActivitySubComponent</span> </span>&#123;</div><div class="line">    <span class="meta">@Named</span>(<span class="string">"my_list"</span>) <span class="function">ArrayAdapter <span class="title">myListAdapter</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>moudle模块使用下面声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivityModule</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MyActivity activity;</div><div class="line"></div><div class="line">    <span class="comment">// must be instantiated with an activity</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyActivityModule</span><span class="params">(MyActivity activity)</span> </span>&#123; <span class="keyword">this</span>.activity = activity; &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span> <span class="meta">@MyActivityScope</span> <span class="meta">@Named</span>(<span class="string">"my_list"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> ArrayAdapter <span class="title">providesMyListAdapter</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(activity, android.R.layout.my_list);</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>最后, 在父组件中, 我们声明一个工厂方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Singleton</span></div><div class="line"><span class="meta">@Component</span>(modules=&#123; ... &#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyApplicationComponent</span> </span>&#123;</div><div class="line">    <span class="comment">// injection targets here</span></div><div class="line"></div><div class="line">    <span class="comment">// factory method to instantiate the subcomponent defined here (passing in the module instance)</span></div><div class="line">    <span class="function">MyActivitySubComponent <span class="title">newMyActivitySubcomponent</span><span class="params">(MyActivityModule activityModule)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在上面的例子中, <code>newMyActivitySubcomponent()</code>每次被调用的时候, 一个新的子组件的实例都会被创建, 使用子模块moudle注入到一个activity</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Singleton</span></div><div class="line"><span class="meta">@Component</span>(modules=&#123; ... &#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyApplicationComponent</span> </span>&#123;</div><div class="line">    <span class="comment">// injection targets here</span></div><div class="line"></div><div class="line">    <span class="comment">// factory method to instantiate the subcomponent defined here (passing in the module instance)</span></div><div class="line">    <span class="function">MyActivitySubComponent <span class="title">newMyActivitySubcomponent</span><span class="params">(MyActivityModule activityModule)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>子组件创建</p><p><img src="https://raw.githubusercontent.com/codepath/android_guides/master/images/subcomponent_builders.png" alt="Available starting in v2.7"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;很多Android Apps通常依赖于其他依赖库的实例化对象, 举例来说,  一个Twitter客户端可能使用类似&lt;a href=&quot;https://github.com/square/retrofit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Retrofit&lt;/a&gt;的网络依赖库来进行构建, 要使用这个库, 你需要添加解析的库，比如说&lt;a href=&quot;https://github.com/google/gson&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gson&lt;/a&gt;.  此外,  那些实现认证或者缓存的类可能需要访问shared preferences和其他公共的存储单元，需要首先实例化他们并且创建固有的依赖链.     &lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
</feed>
