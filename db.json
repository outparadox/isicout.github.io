{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/logo.png","path":"css/images/logo.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/avatar.png","path":"css/images/avatar.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/justified-gallery/justifiedGallery.min.css","path":"libs/justified-gallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","path":"libs/justified-gallery/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/styles.css","path":"libs/source-code-pro/styles.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/styles.css","path":"libs/open-sans/styles.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/WechatIMG2.jpeg","path":"css/images/WechatIMG2.jpeg","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","path":"libs/lightgallery/css/lg-fb-comment-box.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","path":"libs/lightgallery/css/lg-fb-comment-box.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","path":"libs/lightgallery/css/lg-fb-comment-box.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css.map","path":"libs/lightgallery/css/lg-transitions.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css","path":"libs/lightgallery/css/lg-transitions.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.min.css","path":"libs/lightgallery/css/lg-transitions.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css","path":"libs/lightgallery/css/lightgallery.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css.map","path":"libs/lightgallery/css/lightgallery.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.min.css","path":"libs/lightgallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.eot","path":"libs/lightgallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.svg","path":"libs/lightgallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.ttf","path":"libs/lightgallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.woff","path":"libs/lightgallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/loading.gif","path":"libs/lightgallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/video-play.png","path":"libs/lightgallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/vimeo-play.png","path":"libs/lightgallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/youtube-play.png","path":"libs/lightgallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.min.js","path":"libs/lightgallery/js/lg-autoplay.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.js","path":"libs/lightgallery/js/lg-fullscreen.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.js","path":"libs/lightgallery/js/lg-hash.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.js","path":"libs/lightgallery/js/lg-autoplay.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.js","path":"libs/lightgallery/js/lg-pager.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.min.js","path":"libs/lightgallery/js/lg-hash.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","path":"libs/lightgallery/js/lg-fullscreen.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.min.js","path":"libs/lightgallery/js/lg-pager.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.js","path":"libs/lightgallery/js/lg-share.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.min.js","path":"libs/lightgallery/js/lg-share.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.js","path":"libs/lightgallery/js/lg-thumbnail.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","path":"libs/lightgallery/js/lg-thumbnail.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.js","path":"libs/lightgallery/js/lg-video.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.min.js","path":"libs/lightgallery/js/lg-video.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.min.js","path":"libs/lightgallery/js/lg-zoom.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.min.js","path":"libs/lightgallery/js/lightgallery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.js","path":"libs/lightgallery/js/lightgallery.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.js","path":"libs/lightgallery/js/lg-zoom.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","path":"libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/FontAwesome.otf","path":"libs/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.eot","path":"libs/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff","path":"libs/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","path":"libs/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/jquery/2.1.3/jquery.min.js","path":"libs/jquery/2.1.3/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","path":"libs/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.svg","path":"libs/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"a8382068ea08e25e8f134589c0424fbe93d5def0","modified":1493863576000},{"_id":"themes/icarus/LICENSE","hash":"df00918fa95de563927fd92b26f14c7affdc3052","modified":1493712097000},{"_id":"themes/icarus/.DS_Store","hash":"bdcec62b69cee6fba3fb4eb08017222cbf647cc5","modified":1493793949000},{"_id":"themes/icarus/.gitignore","hash":"542aaea07afe90211c6a45c90b7d6879a4503043","modified":1493712097000},{"_id":"themes/icarus/README.md","hash":"25c75503f044b817297995a96621c92ce037a098","modified":1493712097000},{"_id":"themes/icarus/_config.yml","hash":"60b1855eb17a5861366cb0e85f64635389088970","modified":1493865944000},{"_id":"themes/icarus/package.json","hash":"1bc52ef10a33df23e56bd73c927f605019c87d41","modified":1493712097000},{"_id":"source/_posts/Ndk.md","hash":"c25e890591152370e9155b180e198d4fb44ab2af","modified":1493808092000},{"_id":"source/_posts/Opencv-In-Android.md","hash":"7f51507d30ce3b25a527317379414978d2b74967","modified":1494238431000},{"_id":"source/_posts/Jenkins.md","hash":"215d5ce43d5ef05df0cf6497a8e077bb5cc29e56","modified":1493870347000},{"_id":"source/_posts/hello-world.md","hash":"565b0ee7a5ef8219c00603ae62ed2a2862d96c60","modified":1493713359000},{"_id":"source/_posts/Dagger2.md","hash":"46a375572fbc69eb6168e1c14a6ff0d97788eab8","modified":1493713354000},{"_id":"themes/icarus/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1493712097000},{"_id":"themes/icarus/.git/config","hash":"965ef2ab67fe8b8aa4fb072307ee50d7cf6b31fe","modified":1493712097000},{"_id":"themes/icarus/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1493712087000},{"_id":"themes/icarus/.git/index","hash":"4b657d91509ea2b4e3e62d0954bd7d4b7a27ff5b","modified":1493712119000},{"_id":"themes/icarus/.git/packed-refs","hash":"5cf9ace7c4ebfcad08c0495221ef763311b5de14","modified":1493712097000},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE.md","hash":"9393fd3dbc943f1544facb66af7fd8b7a5b9ddbb","modified":1493712097000},{"_id":"themes/icarus/_source/.DS_Store","hash":"207d8804855f1e04f0626489ec405c32dae14139","modified":1493712796000},{"_id":"themes/icarus/languages/en.yml","hash":"ade241498b85503a8953a1deca963222f47067a7","modified":1493712097000},{"_id":"themes/icarus/languages/es.yml","hash":"d7432219be5bee4cb569331378ade61b749688e0","modified":1493712097000},{"_id":"themes/icarus/languages/fr.yml","hash":"cb3e597cbec7e8f458858c457bafd1f3a225083d","modified":1493712097000},{"_id":"themes/icarus/languages/id.yml","hash":"70ec9ab2ac04cf882e81377ca5ad15bf8adceca8","modified":1493712097000},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"3c5d5293575593705b9a2dfa9d97b017eb4bc8c3","modified":1493712097000},{"_id":"themes/icarus/languages/ko.yml","hash":"7c4ad4577dc0577ad2ca1c0410507f5e5fadf530","modified":1493712097000},{"_id":"themes/icarus/languages/ru.yml","hash":"d1aab2b0c939d0c6020f881d664b660a01ee7327","modified":1493712097000},{"_id":"themes/icarus/languages/ja.yml","hash":"ff972961e5f468a695d80d21b62c3e9032cdf561","modified":1493712097000},{"_id":"themes/icarus/languages/tr.yml","hash":"8b7eb6aec264db50dbabea89f680acca256f4cd1","modified":1493712097000},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"3dc8ec524805afd090438be717908750da439204","modified":1493712097000},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"d8d96a0a17c20af11919ce036e87379a6b163db9","modified":1493712097000},{"_id":"themes/icarus/layout/archive.ejs","hash":"c1ecf667f40f34d61ab33eed46bab143eb1af36d","modified":1493712097000},{"_id":"themes/icarus/layout/categories.ejs","hash":"aa95629b770cff8cca9d663aeb6b17928f070de5","modified":1493712097000},{"_id":"themes/icarus/layout/category.ejs","hash":"1d407f9176db84e83062c52ad4755aaea9e74401","modified":1493712097000},{"_id":"themes/icarus/layout/index.ejs","hash":"43e971ebc35657b18e08a049559790348a16666f","modified":1493712097000},{"_id":"themes/icarus/layout/layout.ejs","hash":"6f01b3d46d184a820297f9542497808b152bb09e","modified":1493712097000},{"_id":"themes/icarus/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1493712097000},{"_id":"themes/icarus/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1493712097000},{"_id":"themes/icarus/layout/tag.ejs","hash":"f6c220d4e5c231028bc71ddc11aec97d7b5a9943","modified":1493712097000},{"_id":"themes/icarus/layout/tags.ejs","hash":"b0fcea68d7c11e5899bf0375d80997685111653f","modified":1493712097000},{"_id":"themes/icarus/scripts/meta.js","hash":"1993754a2f3dffa283fa0538eb8f056385b69ad4","modified":1493712097000},{"_id":"themes/icarus/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1493712097000},{"_id":"themes/icarus/source/.DS_Store","hash":"6ca9e0665c7e0f2711f9aa36bb9d898818834cd7","modified":1493713211000},{"_id":"themes/icarus/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1493712087000},{"_id":"themes/icarus/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1493712087000},{"_id":"themes/icarus/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1493712087000},{"_id":"themes/icarus/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1493712087000},{"_id":"themes/icarus/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1493712087000},{"_id":"themes/icarus/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1493712087000},{"_id":"themes/icarus/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1493712087000},{"_id":"themes/icarus/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1493712087000},{"_id":"themes/icarus/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1493712087000},{"_id":"themes/icarus/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1493712087000},{"_id":"themes/icarus/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1493712087000},{"_id":"themes/icarus/.git/logs/HEAD","hash":"b51a80d89ff40f606e5c0dda9eefd744a342fbe5","modified":1493712097000},{"_id":"themes/icarus/_source/about/index.md","hash":"2847759c65295fdc47685cc32e10ae30b2f022ae","modified":1493712097000},{"_id":"themes/icarus/_source/tags/index.md","hash":"e999413d6392c34156b5c6e9273f9069f9e6d92d","modified":1493712097000},{"_id":"themes/icarus/_source/categories/index.md","hash":"55bee2cb88da438a2e8b1f29b1d7e954c07a9e60","modified":1493712097000},{"_id":"themes/icarus/layout/comment/changyan.ejs","hash":"b4bd2e641af59e06becaa8f2dc97867f023b8dcf","modified":1493712097000},{"_id":"themes/icarus/layout/comment/counter.ejs","hash":"466e01abb13d0a2b9ed281b2362740baa32afaff","modified":1493712097000},{"_id":"themes/icarus/layout/comment/duoshuo.ejs","hash":"ce46d7410a99b57704da32e9d09071cef6c9fa93","modified":1493712097000},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"1b32a90f400dc580f4b8298de75b94429ca6de68","modified":1493712097000},{"_id":"themes/icarus/layout/comment/facebook.ejs","hash":"5ee16430a4435c2fead0275ff83fc98092d73d4c","modified":1493712097000},{"_id":"themes/icarus/layout/comment/index.ejs","hash":"170e722e640593a46c38da2331b6afccfb69c449","modified":1493712097000},{"_id":"themes/icarus/layout/comment/scripts.ejs","hash":"30aa478e771ad6e6d1dba1060deb5c44ef34546c","modified":1493712097000},{"_id":"themes/icarus/layout/comment/youyan.ejs","hash":"6fe807992832939caf6c3e7651d052df9520d88e","modified":1493712097000},{"_id":"themes/icarus/layout/common/article.ejs","hash":"9c260a551596f71e93177f2289b5cb1c4bc7d96c","modified":1493712097000},{"_id":"themes/icarus/layout/comment/isso.ejs","hash":"4f8b81ff5bb418ec11ce080d515f247bfe436014","modified":1493712097000},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"cbfe560fcab445d42ceeb5d1beba5957d5be5eaa","modified":1493712097000},{"_id":"themes/icarus/layout/common/head.ejs","hash":"44f30945882afd27c89da2173da501fb1b531488","modified":1493712097000},{"_id":"themes/icarus/layout/common/header.ejs","hash":"738c6a923b2a6de6a81c4892c8a47e03d8b34f88","modified":1493712097000},{"_id":"themes/icarus/layout/common/profile.ejs","hash":"0d5a9622d490652599e3ba3e4077a7d6bb2eb38e","modified":1493712097000},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"c0a1a9e53f89440c42c325d5bd8c7234652c8937","modified":1493712097000},{"_id":"themes/icarus/layout/common/sidebar.ejs","hash":"6e80fa52d23c9c39bfa357a1e00c26fc8b851b82","modified":1493712097000},{"_id":"themes/icarus/layout/common/thumbnail.ejs","hash":"1b70f8a98cd8650b159bda858dbee38dbdb7f0c5","modified":1493712097000},{"_id":"themes/icarus/layout/common/timeline.ejs","hash":"6420e34e0332c9b6670011519f341340db989343","modified":1493712097000},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"6a7bee18e666e627e62541a5e30906f87ba1bfe8","modified":1493712097000},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"349f08b6521a16e79046b1f94f04317ac74f556e","modified":1493712097000},{"_id":"themes/icarus/layout/plugin/scripts.ejs","hash":"b349c7089a44302eaa8291c0ed13ef815f868a68","modified":1493712097000},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"3e603a702d20c53fd3bcbeb570a16a86d54781ce","modified":1493712097000},{"_id":"themes/icarus/layout/search/index.ejs","hash":"24935e32e61d4706454b174ea3bed0726ae7fb34","modified":1493712097000},{"_id":"themes/icarus/layout/search/index-mobile.ejs","hash":"50a727ac1dfe3073eb6fa6699ba01e66f4ac41c0","modified":1493712097000},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"130fe3d33ac71da0b50f7fee6a87979f30938a1b","modified":1493712097000},{"_id":"themes/icarus/layout/search/swiftype.ejs","hash":"379e66d2c13526e72e4120c443f95fccf4edef71","modified":1493712097000},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"ac180c4c84b73a04d61b17e7dc18c257e20bf59f","modified":1493712097000},{"_id":"themes/icarus/layout/share/index.ejs","hash":"2a2c0095b95b11e5692bd8ad6a2337aa644189a2","modified":1493712097000},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"a1e772c5a6f174d585b0c1e574058f75dc8e2898","modified":1493712097000},{"_id":"themes/icarus/layout/share/default.ejs","hash":"ebfb919dc525b3ed61a6a5ee05ee71410eedc541","modified":1493712097000},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"aad118699718b62c0d3f3cfd6f17a181139a76af","modified":1493712097000},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"583bda80cf15b3ef11fefbd1b502897dfff40100","modified":1493712097000},{"_id":"themes/icarus/layout/share/jiathis.ejs","hash":"21ebaa51e828cba2cefbeeaccb01514643565755","modified":1493712097000},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"d9ebbb7f6ce2f25df5ae25e4a1fef3c08f7054b9","modified":1493712097000},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"2ca923465275fb38a7ac7d67211d6e94a977e957","modified":1493712097000},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"3b8ae5953990436893da9d68f910ebe592005659","modified":1493712097000},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"ca8c7bf555fb6ce4904f2c59160548405c2c8a82","modified":1493712097000},{"_id":"themes/icarus/source/css/_extend.styl","hash":"539e02107f35e8b3bdb9bf160dc212a433a7b60e","modified":1493712097000},{"_id":"themes/icarus/source/css/_variables.styl","hash":"ceeb46952f7e4e367793e0766e19800aa6315a9d","modified":1493713228000},{"_id":"themes/icarus/source/css/style.styl","hash":"1716b199dba80b26086f325d69c36fa682465106","modified":1493712097000},{"_id":"themes/icarus/source/js/main.js","hash":"93dc932946e2898bf4f39c42af1b27295e886af1","modified":1493712097000},{"_id":"themes/icarus/source/js/insight.js","hash":"6ee84c42c2b230ff9e9bf605a444bd671d44f9e3","modified":1493712097000},{"_id":"themes/icarus/source/libs/.DS_Store","hash":"7f1108bb9f19d24c807bb70a29f5061615ef5e0a","modified":1493713328000},{"_id":"themes/icarus/.git/refs/heads/master","hash":"f4c94e8dcf2a004a0b4803f76f6a37a119a2f11c","modified":1493712097000},{"_id":"themes/icarus/.git/objects/pack/pack-b46b358ba5a6be048e7d7f1380864e23c27edc6e.idx","hash":"a7c2977f11e806f53f70028eb151a4f5f5bb8ab7","modified":1493712097000},{"_id":"themes/icarus/layout/common/post/banner.ejs","hash":"47ced3f03525698c79c6b1c07b48383fb6c496b2","modified":1493712097000},{"_id":"themes/icarus/layout/common/post/date.ejs","hash":"45cb0bcad461036cdd1fe2e3fbb5f2f19940025c","modified":1493712097000},{"_id":"themes/icarus/layout/common/post/category.ejs","hash":"75c9dda2e7ec041943855ca163a6b1c4c8b4f260","modified":1493712097000},{"_id":"themes/icarus/layout/common/post/gallery.ejs","hash":"659f019761116313169148ec61773e7b84abb739","modified":1493712097000},{"_id":"themes/icarus/layout/common/post/tag.ejs","hash":"2e966216256321aa0c76fe1b9be689601c76ef31","modified":1493712097000},{"_id":"themes/icarus/layout/common/post/nav.ejs","hash":"d7cd611e642327f33dff3963ef869c2b46824a11","modified":1493712097000},{"_id":"themes/icarus/layout/common/post/title.ejs","hash":"669ddb46fefa100856588351a7a2d30ad996b755","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/agate.styl","hash":"601eb70448a16b918df132f6fc41e891ae053653","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/androidstudio.styl","hash":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/arta.styl","hash":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-dark.styl","hash":"d84382bc8298f96730757391d3e761b7e640f406","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-dark.styl","hash":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-dark.styl","hash":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-dark.styl","hash":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-dark.styl","hash":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-dark.styl","hash":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-dark.styl","hash":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-dark.styl","hash":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/codepen-embed.styl","hash":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/darkula.styl","hash":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/dark.styl","hash":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/far.styl","hash":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/hopscotch.styl","hash":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/hybrid.styl","hash":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/ir-black.styl","hash":"693078bbd72a2091ed30f506cc55949600b717af","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/monokai-sublime.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/monokai.styl","hash":"5a4fe9f957fd7a368c21b62a818403db4270452f","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/obsidian.styl","hash":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/pojoaque.styl","hash":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/railscasts.styl","hash":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/solarized-dark.styl","hash":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/rainbow.styl","hash":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-blue.styl","hash":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/sunburst.styl","hash":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-bright.styl","hash":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night.styl","hash":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1493712097000},{"_id":"themes/icarus/source/css/_highlight/zenburn.styl","hash":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1493712097000},{"_id":"themes/icarus/source/css/_partial/archive.styl","hash":"d35088c83ddd7a197d6d94e16a2ce3a7e29fa1dc","modified":1493712097000},{"_id":"themes/icarus/source/css/_partial/article.styl","hash":"512b9252e1799b93a17c4ad847b0586814a030b4","modified":1493712097000},{"_id":"themes/icarus/source/css/_partial/comment.styl","hash":"784646796184d4f27918c22395288a2fafbf9554","modified":1493712097000},{"_id":"themes/icarus/source/css/_partial/footer.styl","hash":"484776654e4c1691dc844e6e93786a08855c1c99","modified":1493712097000},{"_id":"themes/icarus/source/css/_partial/header.styl","hash":"1e351f741144135871a3373fe7e969dc961b65e7","modified":1493712097000},{"_id":"themes/icarus/source/css/_partial/profile.styl","hash":"fb0170075dc2a41e01dd11bbfdbccbed544c479a","modified":1493712097000},{"_id":"themes/icarus/source/css/_partial/insight.styl","hash":"19833cd127f26ad90b06c115f8a96a30e0c0e53b","modified":1493712097000},{"_id":"themes/icarus/source/css/_partial/sidebar.styl","hash":"f528ca7064d9fcecd737b9b71c9c54601365d7d3","modified":1493712097000},{"_id":"themes/icarus/source/css/_partial/timeline.styl","hash":"c813b98f4fc45b64d2e07e5d944745a654c8c943","modified":1493712097000},{"_id":"themes/icarus/source/css/_util/grid.styl","hash":"93fb6f1e2f40cd7d88ad0d56dd73d3f9a7bc853e","modified":1493712097000},{"_id":"themes/icarus/source/css/_util/mixin.styl","hash":"c8e1ddfc0fe9108bab592c7a73b73ce9344991fd","modified":1493712097000},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1493712097000},{"_id":"themes/icarus/source/css/images/logo.png","hash":"e606a0584f98268b2fe92303f3254520862ef659","modified":1493712097000},{"_id":"themes/icarus/source/css/images/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1493712097000},{"_id":"themes/icarus/source/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1493712097000},{"_id":"themes/icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1493712097000},{"_id":"themes/icarus/source/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1493712097000},{"_id":"themes/icarus/source/libs/open-sans/styles.css","hash":"5ca6e111046232bde112d33201a60532aee7d3c4","modified":1493712097000},{"_id":"themes/icarus/source/css/images/WechatIMG2.jpeg","hash":"2179c69d408b2c9676d17b5a7fed612442239764","modified":1489652647000},{"_id":"themes/icarus/.git/logs/refs/heads/master","hash":"b51a80d89ff40f606e5c0dda9eefd744a342fbe5","modified":1493712097000},{"_id":"themes/icarus/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1493712097000},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.css","hash":"b5020c3860669185ba3f316fa7332cdf5c06f393","modified":1493712097000},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.min.css","hash":"7cd5a3384333f95c3d37d9488ad82cd6c4b03761","modified":1493712097000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1493712097000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1493712097000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1493712097000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1493712097000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1493712097000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1493712097000},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1493712097000},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1493712097000},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1493712097000},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1493712097000},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1493712097000},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1493712097000},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1493712097000},{"_id":"themes/icarus/source/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1493712097000},{"_id":"themes/icarus/source/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1493712097000},{"_id":"themes/icarus/source/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1493712097000},{"_id":"themes/icarus/source/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1493712097000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1493712097000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1493712097000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1493712097000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1493712097000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1493712097000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1493712097000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1493712097000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1493712097000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1493712097000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1493712097000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1493712097000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1493712097000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1493712097000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1493712097000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1493712097000},{"_id":"themes/icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1493712097000},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1493712097000},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1493712097000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1493712097000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1493712097000},{"_id":"themes/icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1493712097000},{"_id":"themes/icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1493712097000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1493712097000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1493712097000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1493712097000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1493712097000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1493712097000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1493712097000},{"_id":"themes/icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1493712097000},{"_id":"themes/icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1493712097000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1493712097000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1493712097000},{"_id":"themes/icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1493712097000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1493712097000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1493712097000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1493712097000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1493712097000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1493712097000},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1493712097000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1493712097000},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1493712097000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1493712097000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1493712097000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1493712097000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1493712097000},{"_id":"themes/icarus/source/libs/jquery/2.1.3/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1493712097000},{"_id":"themes/icarus/.git/logs/refs/remotes/origin/HEAD","hash":"b51a80d89ff40f606e5c0dda9eefd744a342fbe5","modified":1493712097000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1493712097000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1493712097000},{"_id":"themes/icarus/.git/objects/pack/pack-b46b358ba5a6be048e7d7f1380864e23c27edc6e.pack","hash":"81ecac50e942adc90c64f0440714196da6a75ea7","modified":1493712097000},{"_id":"public/tags/Opencv/index.html","hash":"c8cf3bba13ddd46d7321771dbe3010c708c02817","modified":1494238119286},{"_id":"public/tags/C/index.html","hash":"2b1855eb03b347563f5d3fdf8397df810be9eb82","modified":1494238119286},{"_id":"public/tags/Jenkins/index.html","hash":"5e53a9d106aecd5037c4774f07432f45ea0741f9","modified":1494238119287},{"_id":"public/tags/Ci/index.html","hash":"c8ca83389f25089fc201b619342ab69286fbfc4d","modified":1494238119287},{"_id":"public/2017/05/06/Opencv-In-Android/index.html","hash":"67914a1fdfd175cfdee330311358dad2b305035d","modified":1494238456471},{"_id":"public/2017/05/02/hello-world/index.html","hash":"c110b9bf6851c00c2efd33b77da764ed0e4fdfa2","modified":1494238119287},{"_id":"public/2017/05/04/Jenkins/index.html","hash":"2996fb6cc4ef229056e5b9e6f7c0834b54bea964","modified":1494238119287},{"_id":"public/2017/05/02/Ndk/index.html","hash":"d4f384e59da8d3c797747b6019882d3591833a7f","modified":1494238119287},{"_id":"public/2017/05/02/Dagger2/index.html","hash":"0f80bc1f9943a4f5779a96363dd3ffb15dcf35e1","modified":1494238119287},{"_id":"public/archives/index.html","hash":"fa49fc9c18215509d65b387c90e0e6cb4be7e561","modified":1494238119287},{"_id":"public/archives/2017/index.html","hash":"6e1d8b5b1a9e700f7502be165d355f9e89fa3b85","modified":1494238119287},{"_id":"public/archives/2017/05/index.html","hash":"1e2b94a8501a44cff2c2e734b034ca7f208709d3","modified":1494238119287},{"_id":"public/index.html","hash":"be7b97bd317652d7ecabe22fa835502bcde5a2ed","modified":1494238119287},{"_id":"public/tags/NDK/index.html","hash":"2e782bcec74d0ca1b39ded8771aa91909eedf085","modified":1494238119287},{"_id":"public/tags/JNI/index.html","hash":"d84d58845606ccfccea9809da922f923674d18ae","modified":1494238119288},{"_id":"public/tags/Android/index.html","hash":"efe70697948d804b77f55349f86ce79dae729e6f","modified":1494238119288},{"_id":"public/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1494238119302},{"_id":"public/css/images/logo.png","hash":"e606a0584f98268b2fe92303f3254520862ef659","modified":1494238119303},{"_id":"public/css/images/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1494238119303},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1494238119303},{"_id":"public/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1494238119303},{"_id":"public/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1494238119303},{"_id":"public/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1494238119303},{"_id":"public/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1494238119303},{"_id":"public/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1494238119303},{"_id":"public/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1494238119303},{"_id":"public/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1494238119303},{"_id":"public/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1494238119303},{"_id":"public/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1494238119303},{"_id":"public/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1494238119303},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1494238119303},{"_id":"public/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1494238119303},{"_id":"public/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1494238119303},{"_id":"public/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1494238119304},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1494238119304},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1494238119304},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1494238119304},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1494238119304},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1494238119304},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1494238119304},{"_id":"public/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1494238119304},{"_id":"public/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1494238119304},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1494238119304},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1494238119304},{"_id":"public/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1494238119304},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1494238119304},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1494238119305},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1494238119305},{"_id":"public/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1494238119305},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1494238119305},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1494238119305},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1494238119305},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1494238119305},{"_id":"public/css/images/WechatIMG2.jpeg","hash":"2179c69d408b2c9676d17b5a7fed612442239764","modified":1494238119830},{"_id":"public/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1494238119832},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1494238119834},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1494238119834},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1494238119834},{"_id":"public/js/main.js","hash":"93dc932946e2898bf4f39c42af1b27295e886af1","modified":1494238119841},{"_id":"public/js/insight.js","hash":"6ee84c42c2b230ff9e9bf605a444bd671d44f9e3","modified":1494238119841},{"_id":"public/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1494238119841},{"_id":"public/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1494238119841},{"_id":"public/libs/open-sans/styles.css","hash":"5ca6e111046232bde112d33201a60532aee7d3c4","modified":1494238119841},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1494238119841},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1494238119841},{"_id":"public/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1494238119841},{"_id":"public/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1494238119841},{"_id":"public/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1494238119841},{"_id":"public/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1494238119841},{"_id":"public/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1494238119841},{"_id":"public/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1494238119841},{"_id":"public/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1494238119841},{"_id":"public/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1494238119841},{"_id":"public/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1494238119841},{"_id":"public/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1494238119841},{"_id":"public/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1494238119841},{"_id":"public/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1494238119841},{"_id":"public/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1494238119841},{"_id":"public/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1494238119842},{"_id":"public/css/style.css","hash":"b156fcc9b7f8e6ad9fbec979a2689c577e4aec3f","modified":1494238119842},{"_id":"public/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1494238119842},{"_id":"public/libs/font-awesome/css/font-awesome.css","hash":"b5020c3860669185ba3f316fa7332cdf5c06f393","modified":1494238119842},{"_id":"public/libs/font-awesome/css/font-awesome.min.css","hash":"7cd5a3384333f95c3d37d9488ad82cd6c4b03761","modified":1494238119842},{"_id":"public/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1494238119842},{"_id":"public/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1494238119842},{"_id":"public/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1494238119842},{"_id":"public/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1494238119842},{"_id":"public/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1494238119842},{"_id":"public/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1494238119842},{"_id":"public/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1494238119842},{"_id":"public/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1494238119842},{"_id":"public/libs/jquery/2.1.3/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1494238119842},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1494238119842},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1494238119855}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"NDK in Android","date":"2017-05-02T08:36:41.000Z","thumbnail":"https://www.pinterest.com/pin/419890365235460556/","_content":"\nAndroid NDK  简单来说就是可以让你的应用使用natice-code语言, （比如C ,C++)的工具集\n\n一：what is the ndk \n\n Ndk 是允许你在你的工程中可以使用native-code (比如C or c++)的工具, 你可以利用ndk来构建你的natice-app\n 正如我们知道的那样, Java 是构建android app 的默认语言, 然而, java 代码很容易被反编译, 但是这对C++ code 来说这并不简单, 并且c++ 代码更加高效\n\n<!-- more -->\n\n二：why is ndk\n\nC++ 代码反编译困难 \n\n对于计算复杂量大的代码, C or C++ code can increase the performance of your app\n\n三：buliding native app\n\n如果你使用android studio 开发, 你需要下载安装ndk包, More info: [NDK](https://developer.android.com/ndk/downloads/index.html?hl=zh-cn)\n\n1, 首先在代码中声明要在C++ code中要实现的native方法\n\n``` java\n/**\n * auth:huanjulu\n */\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n        ((TextView) findViewById(R.id.text)).setText(nativeMethod());\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.menu_main, menu);\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        // Handle action bar item clicks here. The action bar will\n        // automatically handle clicks on the Home/Up button, so long\n        // as you specify a parent activity in AndroidManifest.xml.\n        int id = item.getItemId();\n\n        //noinspection SimplifiableIfStatement\n        if (id == R.id.action_settings) {\n            return true;\n        }\n\n        return super.onOptionsItemSelected(item);\n    }\n    /**\n     * native code\n     *\n     * @return\n     */\n    public native String nativeMethod();\n\n}\n\n\n```\n\n2, 对包含`native` 关键字方法的类, 生成`.h` 头文件\n\n进入到本地Java文件夹下 ,在Terminal input the follow commond\n\n``` java\n javah -d ../jni jniproject.ndkproject.MainActivity\n```\n\nfirst , `jniproject.ndkproject` is your package name  and `MainActivity` is the class name that contains native code\n\nand after that , you can see the `.h` file of  `MainActivity` class , it looks like :\n\n![Qualified types](http://opd7g7we7.bkt.clouddn.com/WX20170503-174729.png)\n\nand we can looks what contents it contains\n\n``` bash\n\n/* DO NOT EDIT THIS FILE - it is machine generated */\n#include <jni.h>\n/* Header for class jniproject_ndkproject_MainActivity */\n\n#ifndef _Included_jniproject_ndkproject_MainActivity\n#define _Included_jniproject_ndkproject_MainActivity\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n/*\n * Class:     jniproject_ndkproject_MainActivity\n * Method:    nativeMethod\n * Signature: ()Ljava/lang/String;\n */\nJNIEXPORT jstring JNICALL Java_jniproject_ndkproject_MainActivity_nativeMethod\n  (JNIEnv *, jobject);\n\n#ifdef __cplusplus\n}\n#endif\n#endif\n\n```\n\n3, `android.mk``application.mk` file\n\n在你的jni directory, 新建`android.mk`, \n\n``` bash\n\nLOCAL_PATH := $(call my-dir)\ninclude $(CLEAR_VARS)\n\nLOCAL_MODULE := hellojni\nLOCAL_SRC_FILES := hellojni.cpp\ninclude $(BUILD_SHARED_LIBRARY)\n```\n\n`application.mk` \n\n``` bash\nAPP_MODULES := hellojni  //生成的.so name\n\nAPP_ABI := all  //生成的.so 目标cpu平台\n```\nif you want to know more information of syntax about them, here is the dox\n[http://android.mk/#intro](http://android.mk/#intro)\n\n4, 编写你的natie-code 实现文件, (ig  .cpp or .c)\n\n\n``` c++\n#include \"jniproject_ndkproject_MainActivity.h\"\n\nJNIEXPORT jstring JNICALL Java_jniproject_ndkproject_MainActivity_nativeMethod\n       (JNIEnv *env, jclass type) {\n\n    return env->NewStringUTF(\"this code from jni cpp\");\n}\n\n```\nas wo can see that in above c++ code \n\nfirst , you need to include you `.h`file\n\n``` java\n#include \"jniproject_ndkproject_MainActivity.h\"\n```\n接下来你需要按照c++ 代码的规范编写实现方法, 请注意方法实现的命名规范 (JNIEXPORT  返回值类型 JNICALL 包名_类名_方法名)\n\n5, ndk-build \n\nunder the `jni` dictionary, generate `.so` file \n\n``` java\nluhuanju:jni huanjulu$ ndk-build\n\n```\n接下来你需要把生成的`app/src/main/libs` 下的平台的.so 文件复制到 `app/libs` 下\n\n![Qualified types](http://opd7g7we7.bkt.clouddn.com/WX20170503-181618@2x.png)\n\n6, `app/build.gradle` config seeting \n\n``` java\napply plugin: 'com.android.application'\n\nandroid {\n    compileSdkVersion 25\n    buildToolsVersion \"25.0.2\"\n    defaultConfig {\n        applicationId \"jniproject.ndkproject\"\n        minSdkVersion 15\n        targetSdkVersion 25\n        versionCode 1\n        versionName \"1.0\"\n        testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\"\n\n\n        ndk {//指定生成的lib，比如此时生成native.so\n            moduleName   \"hellojni\"\n        }\n    }\n\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n    }\n}\n\ndependencies {\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {\n        exclude group: 'com.android.support', module: 'support-annotations'\n    })\n    compile 'com.android.support:appcompat-v7:25.2.0'\n    compile 'com.android.support.constraint:constraint-layout:1.0.0-beta4'\n    compile 'com.android.support:design:25.2.0'\n    testCompile 'junit:junit:4.12'\n}\n\n```\n\nthe the last step is that you just need call you natice-code library \n\n\n\n``` java\npackage jniproject.ndkproject;\n\nimport android.os.Bundle;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.widget.TextView;\n\n\n/**\n * auth:huanjulu\n */\n\npublic class MainActivity extends AppCompatActivity {\n\n\n    static {\n        System.loadLibrary(\"hellojni\");\n    }\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n        ((TextView) findViewById(R.id.text)).setText(nativeMethod());\n    }\n    /**\n     * native code\n     *\n     * @return\n     */\n    public native String nativeMethod();\n\n}\n\n```\n\nhere is source code \n\n[https://github.com/isicout/JNIProgjectExample](https://github.com/isicout/JNIProgjectExample)\n\n\n\n\n","source":"_posts/Ndk.md","raw":"---\ntitle: NDK in Android\ndate: 2017-05-02 16:36:41\ntags: [NDK, JNI, Android]\nthumbnail: https://www.pinterest.com/pin/419890365235460556/\n---\n\nAndroid NDK  简单来说就是可以让你的应用使用natice-code语言, （比如C ,C++)的工具集\n\n一：what is the ndk \n\n Ndk 是允许你在你的工程中可以使用native-code (比如C or c++)的工具, 你可以利用ndk来构建你的natice-app\n 正如我们知道的那样, Java 是构建android app 的默认语言, 然而, java 代码很容易被反编译, 但是这对C++ code 来说这并不简单, 并且c++ 代码更加高效\n\n<!-- more -->\n\n二：why is ndk\n\nC++ 代码反编译困难 \n\n对于计算复杂量大的代码, C or C++ code can increase the performance of your app\n\n三：buliding native app\n\n如果你使用android studio 开发, 你需要下载安装ndk包, More info: [NDK](https://developer.android.com/ndk/downloads/index.html?hl=zh-cn)\n\n1, 首先在代码中声明要在C++ code中要实现的native方法\n\n``` java\n/**\n * auth:huanjulu\n */\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n        ((TextView) findViewById(R.id.text)).setText(nativeMethod());\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.menu_main, menu);\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        // Handle action bar item clicks here. The action bar will\n        // automatically handle clicks on the Home/Up button, so long\n        // as you specify a parent activity in AndroidManifest.xml.\n        int id = item.getItemId();\n\n        //noinspection SimplifiableIfStatement\n        if (id == R.id.action_settings) {\n            return true;\n        }\n\n        return super.onOptionsItemSelected(item);\n    }\n    /**\n     * native code\n     *\n     * @return\n     */\n    public native String nativeMethod();\n\n}\n\n\n```\n\n2, 对包含`native` 关键字方法的类, 生成`.h` 头文件\n\n进入到本地Java文件夹下 ,在Terminal input the follow commond\n\n``` java\n javah -d ../jni jniproject.ndkproject.MainActivity\n```\n\nfirst , `jniproject.ndkproject` is your package name  and `MainActivity` is the class name that contains native code\n\nand after that , you can see the `.h` file of  `MainActivity` class , it looks like :\n\n![Qualified types](http://opd7g7we7.bkt.clouddn.com/WX20170503-174729.png)\n\nand we can looks what contents it contains\n\n``` bash\n\n/* DO NOT EDIT THIS FILE - it is machine generated */\n#include <jni.h>\n/* Header for class jniproject_ndkproject_MainActivity */\n\n#ifndef _Included_jniproject_ndkproject_MainActivity\n#define _Included_jniproject_ndkproject_MainActivity\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n/*\n * Class:     jniproject_ndkproject_MainActivity\n * Method:    nativeMethod\n * Signature: ()Ljava/lang/String;\n */\nJNIEXPORT jstring JNICALL Java_jniproject_ndkproject_MainActivity_nativeMethod\n  (JNIEnv *, jobject);\n\n#ifdef __cplusplus\n}\n#endif\n#endif\n\n```\n\n3, `android.mk``application.mk` file\n\n在你的jni directory, 新建`android.mk`, \n\n``` bash\n\nLOCAL_PATH := $(call my-dir)\ninclude $(CLEAR_VARS)\n\nLOCAL_MODULE := hellojni\nLOCAL_SRC_FILES := hellojni.cpp\ninclude $(BUILD_SHARED_LIBRARY)\n```\n\n`application.mk` \n\n``` bash\nAPP_MODULES := hellojni  //生成的.so name\n\nAPP_ABI := all  //生成的.so 目标cpu平台\n```\nif you want to know more information of syntax about them, here is the dox\n[http://android.mk/#intro](http://android.mk/#intro)\n\n4, 编写你的natie-code 实现文件, (ig  .cpp or .c)\n\n\n``` c++\n#include \"jniproject_ndkproject_MainActivity.h\"\n\nJNIEXPORT jstring JNICALL Java_jniproject_ndkproject_MainActivity_nativeMethod\n       (JNIEnv *env, jclass type) {\n\n    return env->NewStringUTF(\"this code from jni cpp\");\n}\n\n```\nas wo can see that in above c++ code \n\nfirst , you need to include you `.h`file\n\n``` java\n#include \"jniproject_ndkproject_MainActivity.h\"\n```\n接下来你需要按照c++ 代码的规范编写实现方法, 请注意方法实现的命名规范 (JNIEXPORT  返回值类型 JNICALL 包名_类名_方法名)\n\n5, ndk-build \n\nunder the `jni` dictionary, generate `.so` file \n\n``` java\nluhuanju:jni huanjulu$ ndk-build\n\n```\n接下来你需要把生成的`app/src/main/libs` 下的平台的.so 文件复制到 `app/libs` 下\n\n![Qualified types](http://opd7g7we7.bkt.clouddn.com/WX20170503-181618@2x.png)\n\n6, `app/build.gradle` config seeting \n\n``` java\napply plugin: 'com.android.application'\n\nandroid {\n    compileSdkVersion 25\n    buildToolsVersion \"25.0.2\"\n    defaultConfig {\n        applicationId \"jniproject.ndkproject\"\n        minSdkVersion 15\n        targetSdkVersion 25\n        versionCode 1\n        versionName \"1.0\"\n        testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\"\n\n\n        ndk {//指定生成的lib，比如此时生成native.so\n            moduleName   \"hellojni\"\n        }\n    }\n\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n    }\n}\n\ndependencies {\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {\n        exclude group: 'com.android.support', module: 'support-annotations'\n    })\n    compile 'com.android.support:appcompat-v7:25.2.0'\n    compile 'com.android.support.constraint:constraint-layout:1.0.0-beta4'\n    compile 'com.android.support:design:25.2.0'\n    testCompile 'junit:junit:4.12'\n}\n\n```\n\nthe the last step is that you just need call you natice-code library \n\n\n\n``` java\npackage jniproject.ndkproject;\n\nimport android.os.Bundle;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.widget.TextView;\n\n\n/**\n * auth:huanjulu\n */\n\npublic class MainActivity extends AppCompatActivity {\n\n\n    static {\n        System.loadLibrary(\"hellojni\");\n    }\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n        ((TextView) findViewById(R.id.text)).setText(nativeMethod());\n    }\n    /**\n     * native code\n     *\n     * @return\n     */\n    public native String nativeMethod();\n\n}\n\n```\n\nhere is source code \n\n[https://github.com/isicout/JNIProgjectExample](https://github.com/isicout/JNIProgjectExample)\n\n\n\n\n","slug":"Ndk","published":1,"updated":"2017-05-03T10:41:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2fysnbm0000dc5jt3gc3xni","content":"<p>Android NDK  简单来说就是可以让你的应用使用natice-code语言, （比如C ,C++)的工具集</p>\n<p>一：what is the ndk </p>\n<p> Ndk 是允许你在你的工程中可以使用native-code (比如C or c++)的工具, 你可以利用ndk来构建你的natice-app<br> 正如我们知道的那样, Java 是构建android app 的默认语言, 然而, java 代码很容易被反编译, 但是这对C++ code 来说这并不简单, 并且c++ 代码更加高效</p>\n<a id=\"more\"></a>\n<p>二：why is ndk</p>\n<p>C++ 代码反编译困难 </p>\n<p>对于计算复杂量大的代码, C or C++ code can increase the performance of your app</p>\n<p>三：buliding native app</p>\n<p>如果你使用android studio 开发, 你需要下载安装ndk包, More info: <a href=\"https://developer.android.com/ndk/downloads/index.html?hl=zh-cn\" target=\"_blank\" rel=\"external\">NDK</a></p>\n<p>1, 首先在代码中声明要在C++ code中要实现的native方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * auth:huanjulu</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class=\"line\">        setSupportActionBar(toolbar);</div><div class=\"line\">        ((TextView) findViewById(R.id.text)).setText(nativeMethod());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onCreateOptionsMenu</span><span class=\"params\">(Menu menu)</span> </span>&#123;</div><div class=\"line\">        getMenuInflater().inflate(R.menu.menu_main, menu);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onOptionsItemSelected</span><span class=\"params\">(MenuItem item)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Handle action bar item clicks here. The action bar will</span></div><div class=\"line\">        <span class=\"comment\">// automatically handle clicks on the Home/Up button, so long</span></div><div class=\"line\">        <span class=\"comment\">// as you specify a parent activity in AndroidManifest.xml.</span></div><div class=\"line\">        <span class=\"keyword\">int</span> id = item.getItemId();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//noinspection SimplifiableIfStatement</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (id == R.id.action_settings) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onOptionsItemSelected(item);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * native code</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> String <span class=\"title\">nativeMethod</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2, 对包含<code>native</code> 关键字方法的类, 生成<code>.h</code> 头文件</p>\n<p>进入到本地Java文件夹下 ,在Terminal input the follow commond</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">javah -d ../jni jniproject.ndkproject.MainActivity</div></pre></td></tr></table></figure>\n<p>first , <code>jniproject.ndkproject</code> is your package name  and <code>MainActivity</code> is the class name that contains native code</p>\n<p>and after that , you can see the <code>.h</code> file of  <code>MainActivity</code> class , it looks like :</p>\n<p><img src=\"http://opd7g7we7.bkt.clouddn.com/WX20170503-174729.png\" alt=\"Qualified types\"></p>\n<p>and we can looks what contents it contains</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">/* DO NOT EDIT THIS FILE - it is machine generated */</div><div class=\"line\"><span class=\"comment\">#include &lt;jni.h&gt;</span></div><div class=\"line\">/* Header <span class=\"keyword\">for</span> class jniproject_ndkproject_MainActivity */</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#ifndef _Included_jniproject_ndkproject_MainActivity</span></div><div class=\"line\"><span class=\"comment\">#define _Included_jniproject_ndkproject_MainActivity</span></div><div class=\"line\"><span class=\"comment\">#ifdef __cplusplus</span></div><div class=\"line\">extern <span class=\"string\">\"C\"</span> &#123;</div><div class=\"line\"><span class=\"comment\">#endif</span></div><div class=\"line\">/*</div><div class=\"line\"> * Class:     jniproject_ndkproject_MainActivity</div><div class=\"line\"> * Method:    nativeMethod</div><div class=\"line\"> * Signature: ()Ljava/lang/String;</div><div class=\"line\"> */</div><div class=\"line\">JNIEXPORT jstring JNICALL Java_jniproject_ndkproject_MainActivity_nativeMethod</div><div class=\"line\">  (JNIEnv *, jobject);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#ifdef __cplusplus</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">#endif</span></div><div class=\"line\"><span class=\"comment\">#endif</span></div></pre></td></tr></table></figure>\n<p>3, <code>android.mk``application.mk</code> file</p>\n<p>在你的jni directory, 新建<code>android.mk</code>, </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">LOCAL_PATH := $(call my-dir)</div><div class=\"line\">include $(CLEAR_VARS)</div><div class=\"line\"></div><div class=\"line\">LOCAL_MODULE := hellojni</div><div class=\"line\">LOCAL_SRC_FILES := hellojni.cpp</div><div class=\"line\">include $(BUILD_SHARED_LIBRARY)</div></pre></td></tr></table></figure>\n<p><code>application.mk</code> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">APP_MODULES := hellojni  //生成的.so name</div><div class=\"line\"></div><div class=\"line\">APP_ABI := all  //生成的.so 目标cpu平台</div></pre></td></tr></table></figure>\n<p>if you want to know more information of syntax about them, here is the dox<br><a href=\"http://android.mk/#intro\" target=\"_blank\" rel=\"external\">http://android.mk/#intro</a></p>\n<p>4, 编写你的natie-code 实现文件, (ig  .cpp or .c)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"jniproject_ndkproject_MainActivity.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">JNIEXPORT jstring JNICALL <span class=\"title\">Java_jniproject_ndkproject_MainActivity_nativeMethod</span></span></div><div class=\"line\">       <span class=\"params\">(JNIEnv *env, jclass type)</span> &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> env-&gt;NewStringUTF(<span class=\"string\">\"this code from jni cpp\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>as wo can see that in above c++ code </p>\n<p>first , you need to include you <code>.h</code>file</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include \"jniproject_ndkproject_MainActivity.h\"</div></pre></td></tr></table></figure>\n<p>接下来你需要按照c++ 代码的规范编写实现方法, 请注意方法实现的命名规范 (JNIEXPORT  返回值类型 JNICALL 包名<em>类名</em>方法名)</p>\n<p>5, ndk-build </p>\n<p>under the <code>jni</code> dictionary, generate <code>.so</code> file </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">luhuanju:jni huanjulu$ ndk-build</div></pre></td></tr></table></figure>\n<p>接下来你需要把生成的<code>app/src/main/libs</code> 下的平台的.so 文件复制到 <code>app/libs</code> 下</p>\n<p><img src=\"http://opd7g7we7.bkt.clouddn.com/WX20170503-181618@2x.png\" alt=\"Qualified types\"></p>\n<p>6, <code>app/build.gradle</code> config seeting </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">apply plugin: <span class=\"string\">'com.android.application'</span></div><div class=\"line\"></div><div class=\"line\">android &#123;</div><div class=\"line\">    compileSdkVersion <span class=\"number\">25</span></div><div class=\"line\">    buildToolsVersion <span class=\"string\">\"25.0.2\"</span></div><div class=\"line\">    defaultConfig &#123;</div><div class=\"line\">        applicationId <span class=\"string\">\"jniproject.ndkproject\"</span></div><div class=\"line\">        minSdkVersion <span class=\"number\">15</span></div><div class=\"line\">        targetSdkVersion <span class=\"number\">25</span></div><div class=\"line\">        versionCode <span class=\"number\">1</span></div><div class=\"line\">        versionName <span class=\"string\">\"1.0\"</span></div><div class=\"line\">        testInstrumentationRunner <span class=\"string\">\"android.support.test.runner.AndroidJUnitRunner\"</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        ndk &#123;<span class=\"comment\">//指定生成的lib，比如此时生成native.so</span></div><div class=\"line\">            moduleName   <span class=\"string\">\"hellojni\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    buildTypes &#123;</div><div class=\"line\">        release &#123;</div><div class=\"line\">            <span class=\"function\">minifyEnabled <span class=\"keyword\">false</span></span></div><div class=\"line\">            proguardFiles <span class=\"title\">getDefaultProguardFile</span><span class=\"params\">(<span class=\"string\">'proguard-android.txt'</span>)</span>, 'proguard-rules.pro'</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">dependencies &#123;</div><div class=\"line\">    <span class=\"function\">compile <span class=\"title\">fileTree</span><span class=\"params\">(dir: <span class=\"string\">'libs'</span>, include: [<span class=\"string\">'*.jar'</span>])</span></span></div><div class=\"line\">    <span class=\"title\">androidTestCompile</span><span class=\"params\">(<span class=\"string\">'com.android.support.test.espresso:espresso-core:2.2.2'</span>, &#123;</span></div><div class=\"line\">        exclude group: <span class=\"string\">'com.android.support'</span>, <span class=\"keyword\">module</span>: <span class=\"string\">'support-annotations'</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">    compile 'com.android.support:appcompat-v7:25.2.0'</div><div class=\"line\">    compile 'com.android.support.constraint:constraint-layout:1.0.0-beta4'</div><div class=\"line\">    compile 'com.android.support:design:25.2.0'</div><div class=\"line\">    testCompile 'junit:junit:4.12'</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>the the last step is that you just need call you natice-code library </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> jniproject.ndkproject;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.Toolbar;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * auth:huanjulu</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">        System.loadLibrary(<span class=\"string\">\"hellojni\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class=\"line\">        setSupportActionBar(toolbar);</div><div class=\"line\">        ((TextView) findViewById(R.id.text)).setText(nativeMethod());</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * native code</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> String <span class=\"title\">nativeMethod</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>here is source code </p>\n<p><a href=\"https://github.com/isicout/JNIProgjectExample\" target=\"_blank\" rel=\"external\">https://github.com/isicout/JNIProgjectExample</a></p>\n","site":{"data":{}},"excerpt":"<p>Android NDK  简单来说就是可以让你的应用使用natice-code语言, （比如C ,C++)的工具集</p>\n<p>一：what is the ndk </p>\n<p> Ndk 是允许你在你的工程中可以使用native-code (比如C or c++)的工具, 你可以利用ndk来构建你的natice-app<br> 正如我们知道的那样, Java 是构建android app 的默认语言, 然而, java 代码很容易被反编译, 但是这对C++ code 来说这并不简单, 并且c++ 代码更加高效</p>","more":"<p>二：why is ndk</p>\n<p>C++ 代码反编译困难 </p>\n<p>对于计算复杂量大的代码, C or C++ code can increase the performance of your app</p>\n<p>三：buliding native app</p>\n<p>如果你使用android studio 开发, 你需要下载安装ndk包, More info: <a href=\"https://developer.android.com/ndk/downloads/index.html?hl=zh-cn\" target=\"_blank\" rel=\"external\">NDK</a></p>\n<p>1, 首先在代码中声明要在C++ code中要实现的native方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * auth:huanjulu</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class=\"line\">        setSupportActionBar(toolbar);</div><div class=\"line\">        ((TextView) findViewById(R.id.text)).setText(nativeMethod());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onCreateOptionsMenu</span><span class=\"params\">(Menu menu)</span> </span>&#123;</div><div class=\"line\">        getMenuInflater().inflate(R.menu.menu_main, menu);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onOptionsItemSelected</span><span class=\"params\">(MenuItem item)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Handle action bar item clicks here. The action bar will</span></div><div class=\"line\">        <span class=\"comment\">// automatically handle clicks on the Home/Up button, so long</span></div><div class=\"line\">        <span class=\"comment\">// as you specify a parent activity in AndroidManifest.xml.</span></div><div class=\"line\">        <span class=\"keyword\">int</span> id = item.getItemId();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//noinspection SimplifiableIfStatement</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (id == R.id.action_settings) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onOptionsItemSelected(item);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * native code</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> String <span class=\"title\">nativeMethod</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2, 对包含<code>native</code> 关键字方法的类, 生成<code>.h</code> 头文件</p>\n<p>进入到本地Java文件夹下 ,在Terminal input the follow commond</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">javah -d ../jni jniproject.ndkproject.MainActivity</div></pre></td></tr></table></figure>\n<p>first , <code>jniproject.ndkproject</code> is your package name  and <code>MainActivity</code> is the class name that contains native code</p>\n<p>and after that , you can see the <code>.h</code> file of  <code>MainActivity</code> class , it looks like :</p>\n<p><img src=\"http://opd7g7we7.bkt.clouddn.com/WX20170503-174729.png\" alt=\"Qualified types\"></p>\n<p>and we can looks what contents it contains</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">/* DO NOT EDIT THIS FILE - it is machine generated */</div><div class=\"line\"><span class=\"comment\">#include &lt;jni.h&gt;</span></div><div class=\"line\">/* Header <span class=\"keyword\">for</span> class jniproject_ndkproject_MainActivity */</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#ifndef _Included_jniproject_ndkproject_MainActivity</span></div><div class=\"line\"><span class=\"comment\">#define _Included_jniproject_ndkproject_MainActivity</span></div><div class=\"line\"><span class=\"comment\">#ifdef __cplusplus</span></div><div class=\"line\">extern <span class=\"string\">\"C\"</span> &#123;</div><div class=\"line\"><span class=\"comment\">#endif</span></div><div class=\"line\">/*</div><div class=\"line\"> * Class:     jniproject_ndkproject_MainActivity</div><div class=\"line\"> * Method:    nativeMethod</div><div class=\"line\"> * Signature: ()Ljava/lang/String;</div><div class=\"line\"> */</div><div class=\"line\">JNIEXPORT jstring JNICALL Java_jniproject_ndkproject_MainActivity_nativeMethod</div><div class=\"line\">  (JNIEnv *, jobject);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#ifdef __cplusplus</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">#endif</span></div><div class=\"line\"><span class=\"comment\">#endif</span></div></pre></td></tr></table></figure>\n<p>3, <code>android.mk``application.mk</code> file</p>\n<p>在你的jni directory, 新建<code>android.mk</code>, </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">LOCAL_PATH := $(call my-dir)</div><div class=\"line\">include $(CLEAR_VARS)</div><div class=\"line\"></div><div class=\"line\">LOCAL_MODULE := hellojni</div><div class=\"line\">LOCAL_SRC_FILES := hellojni.cpp</div><div class=\"line\">include $(BUILD_SHARED_LIBRARY)</div></pre></td></tr></table></figure>\n<p><code>application.mk</code> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">APP_MODULES := hellojni  //生成的.so name</div><div class=\"line\"></div><div class=\"line\">APP_ABI := all  //生成的.so 目标cpu平台</div></pre></td></tr></table></figure>\n<p>if you want to know more information of syntax about them, here is the dox<br><a href=\"http://android.mk/#intro\" target=\"_blank\" rel=\"external\">http://android.mk/#intro</a></p>\n<p>4, 编写你的natie-code 实现文件, (ig  .cpp or .c)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"jniproject_ndkproject_MainActivity.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">JNIEXPORT jstring JNICALL <span class=\"title\">Java_jniproject_ndkproject_MainActivity_nativeMethod</span></span></div><div class=\"line\">       <span class=\"params\">(JNIEnv *env, jclass type)</span> &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> env-&gt;NewStringUTF(<span class=\"string\">\"this code from jni cpp\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>as wo can see that in above c++ code </p>\n<p>first , you need to include you <code>.h</code>file</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include \"jniproject_ndkproject_MainActivity.h\"</div></pre></td></tr></table></figure>\n<p>接下来你需要按照c++ 代码的规范编写实现方法, 请注意方法实现的命名规范 (JNIEXPORT  返回值类型 JNICALL 包名<em>类名</em>方法名)</p>\n<p>5, ndk-build </p>\n<p>under the <code>jni</code> dictionary, generate <code>.so</code> file </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">luhuanju:jni huanjulu$ ndk-build</div></pre></td></tr></table></figure>\n<p>接下来你需要把生成的<code>app/src/main/libs</code> 下的平台的.so 文件复制到 <code>app/libs</code> 下</p>\n<p><img src=\"http://opd7g7we7.bkt.clouddn.com/WX20170503-181618@2x.png\" alt=\"Qualified types\"></p>\n<p>6, <code>app/build.gradle</code> config seeting </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">apply plugin: <span class=\"string\">'com.android.application'</span></div><div class=\"line\"></div><div class=\"line\">android &#123;</div><div class=\"line\">    compileSdkVersion <span class=\"number\">25</span></div><div class=\"line\">    buildToolsVersion <span class=\"string\">\"25.0.2\"</span></div><div class=\"line\">    defaultConfig &#123;</div><div class=\"line\">        applicationId <span class=\"string\">\"jniproject.ndkproject\"</span></div><div class=\"line\">        minSdkVersion <span class=\"number\">15</span></div><div class=\"line\">        targetSdkVersion <span class=\"number\">25</span></div><div class=\"line\">        versionCode <span class=\"number\">1</span></div><div class=\"line\">        versionName <span class=\"string\">\"1.0\"</span></div><div class=\"line\">        testInstrumentationRunner <span class=\"string\">\"android.support.test.runner.AndroidJUnitRunner\"</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        ndk &#123;<span class=\"comment\">//指定生成的lib，比如此时生成native.so</span></div><div class=\"line\">            moduleName   <span class=\"string\">\"hellojni\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    buildTypes &#123;</div><div class=\"line\">        release &#123;</div><div class=\"line\">            <span class=\"function\">minifyEnabled <span class=\"keyword\">false</span></span></div><div class=\"line\">            proguardFiles <span class=\"title\">getDefaultProguardFile</span><span class=\"params\">(<span class=\"string\">'proguard-android.txt'</span>)</span>, 'proguard-rules.pro'</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">dependencies &#123;</div><div class=\"line\">    <span class=\"function\">compile <span class=\"title\">fileTree</span><span class=\"params\">(dir: <span class=\"string\">'libs'</span>, include: [<span class=\"string\">'*.jar'</span>])</span></span></div><div class=\"line\">    <span class=\"title\">androidTestCompile</span><span class=\"params\">(<span class=\"string\">'com.android.support.test.espresso:espresso-core:2.2.2'</span>, &#123;</span></div><div class=\"line\">        exclude group: <span class=\"string\">'com.android.support'</span>, <span class=\"keyword\">module</span>: <span class=\"string\">'support-annotations'</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">    compile 'com.android.support:appcompat-v7:25.2.0'</div><div class=\"line\">    compile 'com.android.support.constraint:constraint-layout:1.0.0-beta4'</div><div class=\"line\">    compile 'com.android.support:design:25.2.0'</div><div class=\"line\">    testCompile 'junit:junit:4.12'</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>the the last step is that you just need call you natice-code library </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> jniproject.ndkproject;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.Toolbar;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * auth:huanjulu</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">        System.loadLibrary(<span class=\"string\">\"hellojni\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class=\"line\">        setSupportActionBar(toolbar);</div><div class=\"line\">        ((TextView) findViewById(R.id.text)).setText(nativeMethod());</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * native code</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> String <span class=\"title\">nativeMethod</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>here is source code </p>\n<p><a href=\"https://github.com/isicout/JNIProgjectExample\" target=\"_blank\" rel=\"external\">https://github.com/isicout/JNIProgjectExample</a></p>"},{"title":"Opencv In Android","date":"2017-05-06T07:17:39.000Z","_content":"\n\nthis article is ready for a people  who has some knowledge on android develop and a newer about how use opencv SDK in android .\n\n一: what is opencv \n\n简单的来说,  opencn 是跨平台的计算机视觉开源库, 它包含了何种图像识别算法\n\nIn simple terms , opencv is a open source library about Cross-platform computer vision \n\n[here is opencv ](https://developer.android.com/ndk/downloads/index.html?hl=zh-cn)\n\n<!-- more -->\n\n二: Setting up OpenCv Library inside Android \n\n1, first our develop environment\n\nAndroid Studio \nOpencv SDK 3.2\n\n2, you need download and import Opencv library SDK into android studio peoject \n\n[SDK](http://opencv.org/opencv-3-2.html)\n\n然后你需要使用sdk的java 部分的代码作为你项目的moudle\n\n `From File -> New -> Import Module`, choose folder `OpenCV-android-sdk -> sdk -> java ` \n\nthen add module dependency to your project\n\nin android studio, `Application -> Module Settings` , select the Dependencies tab , click  `+` icon at bottom ,choose `Module Dependency` and select the have imported Opencv moudle \n\nit will looks like that :\n\n![Opencv moudle](http://opd7g7we7.bkt.clouddn.com/WX20170508-162944.png)\n\ncopy libs folder under `sdk/native` to Android Studio under  `app/src/main` , and rename  `libs` to `jniLibs` , \n\n![Opencv libs](http://opd7g7we7.bkt.clouddn.com/opecv2.png)\n\n3, use opencv library \n\nto use opencv, first you need to modify your Activity xml file . example  `activity_main.xml`\n\n``` java\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    xmlns:opencv=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" >\n\n    <org.opencv.android.JavaCameraView\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        android:visibility=\"gone\"\n        android:id=\"@+id/tutorial1_activity_java_surface_view\"\n        opencv:show_fps=\"true\"\n        opencv:camera_id=\"any\" />\n\n</FrameLayout>\n```\n\nthen modify your activity , load the `libopencv_java3.so` , in here , Note: for OpenCV version 3 at this step you should instead load the library `opencv_java3`.  OpenCV version 2, you should load the `opencv_java`\n\n\n\n``` java\npackage com.example.huanjulu.opencvinandroidexample;\n\nimport org.opencv.android.BaseLoaderCallback;\nimport org.opencv.android.CameraBridgeViewBase.CvCameraViewFrame;\nimport org.opencv.android.LoaderCallbackInterface;\nimport org.opencv.android.OpenCVLoader;\nimport org.opencv.core.Mat;\nimport org.opencv.android.CameraBridgeViewBase;\nimport org.opencv.android.CameraBridgeViewBase.CvCameraViewListener2;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.MenuItem;\nimport android.view.SurfaceView;\nimport android.view.WindowManager;\n\npublic class MainActivity extends Activity implements CvCameraViewListener2 {\n    private static final String TAG = \"OCVSample::Activity\";\n\n    private CameraBridgeViewBase mOpenCvCameraView;\n    private boolean mIsJavaCamera = true;\n    private MenuItem mItemSwitchCamera = null;\n\n    private BaseLoaderCallback mLoaderCallback = new BaseLoaderCallback(this) {\n        @Override\n        public void onManagerConnected(int status) {\n            switch (status) {\n                case LoaderCallbackInterface.SUCCESS: {\n                    Log.i(TAG, \"OpenCV loaded successfully\");\n                    mOpenCvCameraView.enableView();\n                }\n                break;\n                default: {\n                    super.onManagerConnected(status);\n                }\n                break;\n            }\n        }\n    };\n\n\n    static {\n        System.loadLibrary(\"opencv_java3\");\n    }\n    /**\n     * Called when the activity is first created.\n     */\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        Log.i(TAG, \"called onCreate\");\n        super.onCreate(savedInstanceState);\n        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n\n        setContentView(R.layout.activity_main);\n\n        mOpenCvCameraView = (CameraBridgeViewBase) findViewById(R.id.tutorial1_activity_java_surface_view);\n\n        mOpenCvCameraView.setVisibility(SurfaceView.VISIBLE);\n\n        mOpenCvCameraView.setCvCameraViewListener(this);\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n        if (mOpenCvCameraView != null)\n            mOpenCvCameraView.disableView();\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n        if (!OpenCVLoader.initDebug()) {\n            Log.d(TAG, \"Internal OpenCV library not found. Using OpenCV Manager for initialization\");\n            OpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION_3_0_0, this, mLoaderCallback);\n        } else {\n            Log.d(TAG, \"OpenCV library found inside package. Using it!\");\n            mLoaderCallback.onManagerConnected(LoaderCallbackInterface.SUCCESS);\n        }\n    }\n\n    public void onDestroy() {\n        super.onDestroy();\n        if (mOpenCvCameraView != null)\n            mOpenCvCameraView.disableView();\n    }\n\n    public void onCameraViewStarted(int width, int height) {\n    }\n\n    public void onCameraViewStopped() {\n    }\n\n    public Mat onCameraFrame(CvCameraViewFrame inputFrame) {\n        return inputFrame.rgba();\n    }\n\n}\n\n```\n\nYou can create the Main Activity copying the above code. \n\nFirst you would like notice is that `MainActivity` implements  `CvCameraViewListener2` interface , this interface woulf enfore us to implement few methods which are related to  the camera \n\nthen \n\n``` java\npublic Mat onCameraFrame(CvCameraViewFrame inputFrame) {\n        return inputFrame.rgba();\n    }\n\n```\n\n这个是你使用opencv Java code 很重要的一个方法, 它接受相机的每帧原始数据, 并且你可以在这个方法内做所有的图片片处理工作, 它返回 `Mat `  作为相机要接受的帧数据.\n\nit is the best importment method for you use opencv , this will receiver the vedio as frames and you can do all the image processing inside this method and return a Mat thie this image  :)\n\n\ndont forget the permission of camera in your `AndroidMainfest.xml` \n\n``` java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.example.huanjulu.opencvinandroidexample\">\n    <supports-screens android:resizeable=\"true\"\n        android:smallScreens=\"true\"\n        android:normalScreens=\"true\"\n        android:largeScreens=\"true\"\n        android:anyDensity=\"true\" />\n\n    <uses-sdk android:minSdkVersion=\"8\" />\n\n    <uses-permission android:name=\"android.permission.CAMERA\"/>\n\n    <uses-feature android:name=\"android.hardware.camera\" android:required=\"false\"/>\n    <uses-feature android:name=\"android.hardware.camera.autofocus\" android:required=\"false\"/>\n    <uses-feature android:name=\"android.hardware.camera.front\" android:required=\"false\"/>\n    <uses-feature android:name=\"android.hardware.camera.front.autofocus\" android:required=\"false\"/>\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\">\n        <activity android:name=\".MainActivity\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n    </application>\n\n</manifest>\n```\n\nwhen open this application , if you get the follow prompt :\n\nIt seems that you device does not support camera (or it is locked ). Application will be closed.\n\nat this moment , you need manually turn on the camera Permission in device settting \n\nokay ,then yon can enjoy it \n\n\n\n\n\n\n\n","source":"_posts/Opencv-In-Android.md","raw":"---\ntitle: Opencv In Android\ndate: 2017-05-06 15:17:39\ntags: [Opencv, NDK, JNI, Android, C++]\n---\n\n\nthis article is ready for a people  who has some knowledge on android develop and a newer about how use opencv SDK in android .\n\n一: what is opencv \n\n简单的来说,  opencn 是跨平台的计算机视觉开源库, 它包含了何种图像识别算法\n\nIn simple terms , opencv is a open source library about Cross-platform computer vision \n\n[here is opencv ](https://developer.android.com/ndk/downloads/index.html?hl=zh-cn)\n\n<!-- more -->\n\n二: Setting up OpenCv Library inside Android \n\n1, first our develop environment\n\nAndroid Studio \nOpencv SDK 3.2\n\n2, you need download and import Opencv library SDK into android studio peoject \n\n[SDK](http://opencv.org/opencv-3-2.html)\n\n然后你需要使用sdk的java 部分的代码作为你项目的moudle\n\n `From File -> New -> Import Module`, choose folder `OpenCV-android-sdk -> sdk -> java ` \n\nthen add module dependency to your project\n\nin android studio, `Application -> Module Settings` , select the Dependencies tab , click  `+` icon at bottom ,choose `Module Dependency` and select the have imported Opencv moudle \n\nit will looks like that :\n\n![Opencv moudle](http://opd7g7we7.bkt.clouddn.com/WX20170508-162944.png)\n\ncopy libs folder under `sdk/native` to Android Studio under  `app/src/main` , and rename  `libs` to `jniLibs` , \n\n![Opencv libs](http://opd7g7we7.bkt.clouddn.com/opecv2.png)\n\n3, use opencv library \n\nto use opencv, first you need to modify your Activity xml file . example  `activity_main.xml`\n\n``` java\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    xmlns:opencv=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" >\n\n    <org.opencv.android.JavaCameraView\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        android:visibility=\"gone\"\n        android:id=\"@+id/tutorial1_activity_java_surface_view\"\n        opencv:show_fps=\"true\"\n        opencv:camera_id=\"any\" />\n\n</FrameLayout>\n```\n\nthen modify your activity , load the `libopencv_java3.so` , in here , Note: for OpenCV version 3 at this step you should instead load the library `opencv_java3`.  OpenCV version 2, you should load the `opencv_java`\n\n\n\n``` java\npackage com.example.huanjulu.opencvinandroidexample;\n\nimport org.opencv.android.BaseLoaderCallback;\nimport org.opencv.android.CameraBridgeViewBase.CvCameraViewFrame;\nimport org.opencv.android.LoaderCallbackInterface;\nimport org.opencv.android.OpenCVLoader;\nimport org.opencv.core.Mat;\nimport org.opencv.android.CameraBridgeViewBase;\nimport org.opencv.android.CameraBridgeViewBase.CvCameraViewListener2;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.MenuItem;\nimport android.view.SurfaceView;\nimport android.view.WindowManager;\n\npublic class MainActivity extends Activity implements CvCameraViewListener2 {\n    private static final String TAG = \"OCVSample::Activity\";\n\n    private CameraBridgeViewBase mOpenCvCameraView;\n    private boolean mIsJavaCamera = true;\n    private MenuItem mItemSwitchCamera = null;\n\n    private BaseLoaderCallback mLoaderCallback = new BaseLoaderCallback(this) {\n        @Override\n        public void onManagerConnected(int status) {\n            switch (status) {\n                case LoaderCallbackInterface.SUCCESS: {\n                    Log.i(TAG, \"OpenCV loaded successfully\");\n                    mOpenCvCameraView.enableView();\n                }\n                break;\n                default: {\n                    super.onManagerConnected(status);\n                }\n                break;\n            }\n        }\n    };\n\n\n    static {\n        System.loadLibrary(\"opencv_java3\");\n    }\n    /**\n     * Called when the activity is first created.\n     */\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        Log.i(TAG, \"called onCreate\");\n        super.onCreate(savedInstanceState);\n        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n\n        setContentView(R.layout.activity_main);\n\n        mOpenCvCameraView = (CameraBridgeViewBase) findViewById(R.id.tutorial1_activity_java_surface_view);\n\n        mOpenCvCameraView.setVisibility(SurfaceView.VISIBLE);\n\n        mOpenCvCameraView.setCvCameraViewListener(this);\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n        if (mOpenCvCameraView != null)\n            mOpenCvCameraView.disableView();\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n        if (!OpenCVLoader.initDebug()) {\n            Log.d(TAG, \"Internal OpenCV library not found. Using OpenCV Manager for initialization\");\n            OpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION_3_0_0, this, mLoaderCallback);\n        } else {\n            Log.d(TAG, \"OpenCV library found inside package. Using it!\");\n            mLoaderCallback.onManagerConnected(LoaderCallbackInterface.SUCCESS);\n        }\n    }\n\n    public void onDestroy() {\n        super.onDestroy();\n        if (mOpenCvCameraView != null)\n            mOpenCvCameraView.disableView();\n    }\n\n    public void onCameraViewStarted(int width, int height) {\n    }\n\n    public void onCameraViewStopped() {\n    }\n\n    public Mat onCameraFrame(CvCameraViewFrame inputFrame) {\n        return inputFrame.rgba();\n    }\n\n}\n\n```\n\nYou can create the Main Activity copying the above code. \n\nFirst you would like notice is that `MainActivity` implements  `CvCameraViewListener2` interface , this interface woulf enfore us to implement few methods which are related to  the camera \n\nthen \n\n``` java\npublic Mat onCameraFrame(CvCameraViewFrame inputFrame) {\n        return inputFrame.rgba();\n    }\n\n```\n\n这个是你使用opencv Java code 很重要的一个方法, 它接受相机的每帧原始数据, 并且你可以在这个方法内做所有的图片片处理工作, 它返回 `Mat `  作为相机要接受的帧数据.\n\nit is the best importment method for you use opencv , this will receiver the vedio as frames and you can do all the image processing inside this method and return a Mat thie this image  :)\n\n\ndont forget the permission of camera in your `AndroidMainfest.xml` \n\n``` java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.example.huanjulu.opencvinandroidexample\">\n    <supports-screens android:resizeable=\"true\"\n        android:smallScreens=\"true\"\n        android:normalScreens=\"true\"\n        android:largeScreens=\"true\"\n        android:anyDensity=\"true\" />\n\n    <uses-sdk android:minSdkVersion=\"8\" />\n\n    <uses-permission android:name=\"android.permission.CAMERA\"/>\n\n    <uses-feature android:name=\"android.hardware.camera\" android:required=\"false\"/>\n    <uses-feature android:name=\"android.hardware.camera.autofocus\" android:required=\"false\"/>\n    <uses-feature android:name=\"android.hardware.camera.front\" android:required=\"false\"/>\n    <uses-feature android:name=\"android.hardware.camera.front.autofocus\" android:required=\"false\"/>\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\">\n        <activity android:name=\".MainActivity\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n    </application>\n\n</manifest>\n```\n\nwhen open this application , if you get the follow prompt :\n\nIt seems that you device does not support camera (or it is locked ). Application will be closed.\n\nat this moment , you need manually turn on the camera Permission in device settting \n\nokay ,then yon can enjoy it \n\n\n\n\n\n\n\n","slug":"Opencv-In-Android","published":1,"updated":"2017-05-08T10:13:51.000Z","_id":"cj2fysnbq0001dc5jbdoteu94","comments":1,"layout":"post","photos":[],"link":"","content":"<p>this article is ready for a people  who has some knowledge on android develop and a newer about how use opencv SDK in android .</p>\n<p>一: what is opencv </p>\n<p>简单的来说,  opencn 是跨平台的计算机视觉开源库, 它包含了何种图像识别算法</p>\n<p>In simple terms , opencv is a open source library about Cross-platform computer vision </p>\n<p><a href=\"https://developer.android.com/ndk/downloads/index.html?hl=zh-cn\" target=\"_blank\" rel=\"external\">here is opencv </a></p>\n<a id=\"more\"></a>\n<p>二: Setting up OpenCv Library inside Android </p>\n<p>1, first our develop environment</p>\n<p>Android Studio<br>Opencv SDK 3.2</p>\n<p>2, you need download and import Opencv library SDK into android studio peoject </p>\n<p><a href=\"http://opencv.org/opencv-3-2.html\" target=\"_blank\" rel=\"external\">SDK</a></p>\n<p>然后你需要使用sdk的java 部分的代码作为你项目的moudle</p>\n<p> <code>From File -&gt; New -&gt; Import Module</code>, choose folder <code>OpenCV-android-sdk -&gt; sdk -&gt; java</code> </p>\n<p>then add module dependency to your project</p>\n<p>in android studio, <code>Application -&gt; Module Settings</code> , select the Dependencies tab , click  <code>+</code> icon at bottom ,choose <code>Module Dependency</code> and select the have imported Opencv moudle </p>\n<p>it will looks like that :</p>\n<p><img src=\"http://opd7g7we7.bkt.clouddn.com/WX20170508-162944.png\" alt=\"Opencv moudle\"></p>\n<p>copy libs folder under <code>sdk/native</code> to Android Studio under  <code>app/src/main</code> , and rename  <code>libs</code> to <code>jniLibs</code> , </p>\n<p><img src=\"http://opd7g7we7.bkt.clouddn.com/opecv2.png\" alt=\"Opencv libs\"></p>\n<p>3, use opencv library </p>\n<p>to use opencv, first you need to modify your Activity xml file . example  <code>activity_main.xml</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"</div><div class=\"line\">    xmlns:tools=\"http://schemas.android.com/tools\"</div><div class=\"line\">    xmlns:opencv=\"http://schemas.android.com/apk/res-auto\"</div><div class=\"line\">    android:layout_width=\"match_parent\"</div><div class=\"line\">    android:layout_height=\"match_parent\" &gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;org.opencv.android.JavaCameraView</div><div class=\"line\">        android:layout_width=\"fill_parent\"</div><div class=\"line\">        android:layout_height=\"fill_parent\"</div><div class=\"line\">        android:visibility=\"gone\"</div><div class=\"line\">        android:id=\"@+id/tutorial1_activity_java_surface_view\"</div><div class=\"line\">        opencv:show_fps=\"true\"</div><div class=\"line\">        opencv:camera_id=\"any\" /&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/FrameLayout&gt;</div></pre></td></tr></table></figure>\n<p>then modify your activity , load the <code>libopencv_java3.so</code> , in here , Note: for OpenCV version 3 at this step you should instead load the library <code>opencv_java3</code>.  OpenCV version 2, you should load the <code>opencv_java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example.huanjulu.opencvinandroidexample;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.opencv.android.BaseLoaderCallback;</div><div class=\"line\"><span class=\"keyword\">import</span> org.opencv.android.CameraBridgeViewBase.CvCameraViewFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> org.opencv.android.LoaderCallbackInterface;</div><div class=\"line\"><span class=\"keyword\">import</span> org.opencv.android.OpenCVLoader;</div><div class=\"line\"><span class=\"keyword\">import</span> org.opencv.core.Mat;</div><div class=\"line\"><span class=\"keyword\">import</span> org.opencv.android.CameraBridgeViewBase;</div><div class=\"line\"><span class=\"keyword\">import</span> org.opencv.android.CameraBridgeViewBase.CvCameraViewListener2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.MenuItem;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.SurfaceView;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.WindowManager;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> <span class=\"keyword\">implements</span> <span class=\"title\">CvCameraViewListener2</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"OCVSample::Activity\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> CameraBridgeViewBase mOpenCvCameraView;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mIsJavaCamera = <span class=\"keyword\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> MenuItem mItemSwitchCamera = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> BaseLoaderCallback mLoaderCallback = <span class=\"keyword\">new</span> BaseLoaderCallback(<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onManagerConnected</span><span class=\"params\">(<span class=\"keyword\">int</span> status)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (status) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> LoaderCallbackInterface.SUCCESS: &#123;</div><div class=\"line\">                    Log.i(TAG, <span class=\"string\">\"OpenCV loaded successfully\"</span>);</div><div class=\"line\">                    mOpenCvCameraView.enableView();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">default</span>: &#123;</div><div class=\"line\">                    <span class=\"keyword\">super</span>.onManagerConnected(status);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">        System.loadLibrary(<span class=\"string\">\"opencv_java3\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Called when the activity is first created.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        Log.i(TAG, <span class=\"string\">\"called onCreate\"</span>);</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);</div><div class=\"line\"></div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\"></div><div class=\"line\">        mOpenCvCameraView = (CameraBridgeViewBase) findViewById(R.id.tutorial1_activity_java_surface_view);</div><div class=\"line\"></div><div class=\"line\">        mOpenCvCameraView.setVisibility(SurfaceView.VISIBLE);</div><div class=\"line\"></div><div class=\"line\">        mOpenCvCameraView.setCvCameraViewListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPause</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onPause();</div><div class=\"line\">        <span class=\"keyword\">if</span> (mOpenCvCameraView != <span class=\"keyword\">null</span>)</div><div class=\"line\">            mOpenCvCameraView.disableView();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onResume();</div><div class=\"line\">        <span class=\"keyword\">if</span> (!OpenCVLoader.initDebug()) &#123;</div><div class=\"line\">            Log.d(TAG, <span class=\"string\">\"Internal OpenCV library not found. Using OpenCV Manager for initialization\"</span>);</div><div class=\"line\">            OpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION_3_0_0, <span class=\"keyword\">this</span>, mLoaderCallback);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            Log.d(TAG, <span class=\"string\">\"OpenCV library found inside package. Using it!\"</span>);</div><div class=\"line\">            mLoaderCallback.onManagerConnected(LoaderCallbackInterface.SUCCESS);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">        <span class=\"keyword\">if</span> (mOpenCvCameraView != <span class=\"keyword\">null</span>)</div><div class=\"line\">            mOpenCvCameraView.disableView();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCameraViewStarted</span><span class=\"params\">(<span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCameraViewStopped</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Mat <span class=\"title\">onCameraFrame</span><span class=\"params\">(CvCameraViewFrame inputFrame)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> inputFrame.rgba();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>You can create the Main Activity copying the above code. </p>\n<p>First you would like notice is that <code>MainActivity</code> implements  <code>CvCameraViewListener2</code> interface , this interface woulf enfore us to implement few methods which are related to  the camera </p>\n<p>then </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Mat <span class=\"title\">onCameraFrame</span><span class=\"params\">(CvCameraViewFrame inputFrame)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> inputFrame.rgba();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>这个是你使用opencv Java code 很重要的一个方法, 它接受相机的每帧原始数据, 并且你可以在这个方法内做所有的图片片处理工作, 它返回 <code>Mat</code>  作为相机要接受的帧数据.</p>\n<p>it is the best importment method for you use opencv , this will receiver the vedio as frames and you can do all the image processing inside this method and return a Mat thie this image  :)</p>\n<p>dont forget the permission of camera in your <code>AndroidMainfest.xml</code> </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\">&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"</div><div class=\"line\">    package=\"com.example.huanjulu.opencvinandroidexample\"&gt;</div><div class=\"line\">    &lt;supports-screens android:resizeable=\"true\"</div><div class=\"line\">        android:smallScreens=\"true\"</div><div class=\"line\">        android:normalScreens=\"true\"</div><div class=\"line\">        android:largeScreens=\"true\"</div><div class=\"line\">        android:anyDensity=\"true\" /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;uses-sdk android:minSdkVersion=\"8\" /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;uses-permission android:name=\"android.permission.CAMERA\"/&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;uses-feature android:name=\"android.hardware.camera\" android:required=\"false\"/&gt;</div><div class=\"line\">    &lt;uses-feature android:name=\"android.hardware.camera.autofocus\" android:required=\"false\"/&gt;</div><div class=\"line\">    &lt;uses-feature android:name=\"android.hardware.camera.front\" android:required=\"false\"/&gt;</div><div class=\"line\">    &lt;uses-feature android:name=\"android.hardware.camera.front.autofocus\" android:required=\"false\"/&gt;</div><div class=\"line\">    &lt;application</div><div class=\"line\">        android:allowBackup=\"true\"</div><div class=\"line\">        android:icon=\"@mipmap/ic_launcher\"</div><div class=\"line\">        android:label=\"@string/app_name\"</div><div class=\"line\">        android:roundIcon=\"@mipmap/ic_launcher_round\"</div><div class=\"line\">        android:supportsRtl=\"true\"</div><div class=\"line\">        android:theme=\"@style/AppTheme\"&gt;</div><div class=\"line\">        &lt;activity android:name=\".MainActivity\"&gt;</div><div class=\"line\">            &lt;intent-filter&gt;</div><div class=\"line\">                &lt;action android:name=\"android.intent.action.MAIN\" /&gt;</div><div class=\"line\"></div><div class=\"line\">                &lt;category android:name=\"android.intent.category.LAUNCHER\" /&gt;</div><div class=\"line\">            &lt;/intent-filter&gt;</div><div class=\"line\">        &lt;/activity&gt;</div><div class=\"line\">    &lt;/application&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/manifest&gt;</div></pre></td></tr></table></figure>\n<p>when open this application , if you get the follow prompt :</p>\n<p>It seems that you device does not support camera (or it is locked ). Application will be closed.</p>\n<p>at this moment , you need manually turn on the camera Permission in device settting </p>\n<p>okay ,then yon can enjoy it </p>\n","site":{"data":{}},"excerpt":"<p>this article is ready for a people  who has some knowledge on android develop and a newer about how use opencv SDK in android .</p>\n<p>一: what is opencv </p>\n<p>简单的来说,  opencn 是跨平台的计算机视觉开源库, 它包含了何种图像识别算法</p>\n<p>In simple terms , opencv is a open source library about Cross-platform computer vision </p>\n<p><a href=\"https://developer.android.com/ndk/downloads/index.html?hl=zh-cn\" target=\"_blank\" rel=\"external\">here is opencv </a></p>","more":"<p>二: Setting up OpenCv Library inside Android </p>\n<p>1, first our develop environment</p>\n<p>Android Studio<br>Opencv SDK 3.2</p>\n<p>2, you need download and import Opencv library SDK into android studio peoject </p>\n<p><a href=\"http://opencv.org/opencv-3-2.html\" target=\"_blank\" rel=\"external\">SDK</a></p>\n<p>然后你需要使用sdk的java 部分的代码作为你项目的moudle</p>\n<p> <code>From File -&gt; New -&gt; Import Module</code>, choose folder <code>OpenCV-android-sdk -&gt; sdk -&gt; java</code> </p>\n<p>then add module dependency to your project</p>\n<p>in android studio, <code>Application -&gt; Module Settings</code> , select the Dependencies tab , click  <code>+</code> icon at bottom ,choose <code>Module Dependency</code> and select the have imported Opencv moudle </p>\n<p>it will looks like that :</p>\n<p><img src=\"http://opd7g7we7.bkt.clouddn.com/WX20170508-162944.png\" alt=\"Opencv moudle\"></p>\n<p>copy libs folder under <code>sdk/native</code> to Android Studio under  <code>app/src/main</code> , and rename  <code>libs</code> to <code>jniLibs</code> , </p>\n<p><img src=\"http://opd7g7we7.bkt.clouddn.com/opecv2.png\" alt=\"Opencv libs\"></p>\n<p>3, use opencv library </p>\n<p>to use opencv, first you need to modify your Activity xml file . example  <code>activity_main.xml</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"</div><div class=\"line\">    xmlns:tools=\"http://schemas.android.com/tools\"</div><div class=\"line\">    xmlns:opencv=\"http://schemas.android.com/apk/res-auto\"</div><div class=\"line\">    android:layout_width=\"match_parent\"</div><div class=\"line\">    android:layout_height=\"match_parent\" &gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;org.opencv.android.JavaCameraView</div><div class=\"line\">        android:layout_width=\"fill_parent\"</div><div class=\"line\">        android:layout_height=\"fill_parent\"</div><div class=\"line\">        android:visibility=\"gone\"</div><div class=\"line\">        android:id=\"@+id/tutorial1_activity_java_surface_view\"</div><div class=\"line\">        opencv:show_fps=\"true\"</div><div class=\"line\">        opencv:camera_id=\"any\" /&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/FrameLayout&gt;</div></pre></td></tr></table></figure>\n<p>then modify your activity , load the <code>libopencv_java3.so</code> , in here , Note: for OpenCV version 3 at this step you should instead load the library <code>opencv_java3</code>.  OpenCV version 2, you should load the <code>opencv_java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example.huanjulu.opencvinandroidexample;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.opencv.android.BaseLoaderCallback;</div><div class=\"line\"><span class=\"keyword\">import</span> org.opencv.android.CameraBridgeViewBase.CvCameraViewFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> org.opencv.android.LoaderCallbackInterface;</div><div class=\"line\"><span class=\"keyword\">import</span> org.opencv.android.OpenCVLoader;</div><div class=\"line\"><span class=\"keyword\">import</span> org.opencv.core.Mat;</div><div class=\"line\"><span class=\"keyword\">import</span> org.opencv.android.CameraBridgeViewBase;</div><div class=\"line\"><span class=\"keyword\">import</span> org.opencv.android.CameraBridgeViewBase.CvCameraViewListener2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.MenuItem;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.SurfaceView;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.WindowManager;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> <span class=\"keyword\">implements</span> <span class=\"title\">CvCameraViewListener2</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"OCVSample::Activity\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> CameraBridgeViewBase mOpenCvCameraView;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mIsJavaCamera = <span class=\"keyword\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> MenuItem mItemSwitchCamera = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> BaseLoaderCallback mLoaderCallback = <span class=\"keyword\">new</span> BaseLoaderCallback(<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onManagerConnected</span><span class=\"params\">(<span class=\"keyword\">int</span> status)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (status) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> LoaderCallbackInterface.SUCCESS: &#123;</div><div class=\"line\">                    Log.i(TAG, <span class=\"string\">\"OpenCV loaded successfully\"</span>);</div><div class=\"line\">                    mOpenCvCameraView.enableView();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">default</span>: &#123;</div><div class=\"line\">                    <span class=\"keyword\">super</span>.onManagerConnected(status);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">        System.loadLibrary(<span class=\"string\">\"opencv_java3\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Called when the activity is first created.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        Log.i(TAG, <span class=\"string\">\"called onCreate\"</span>);</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);</div><div class=\"line\"></div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\"></div><div class=\"line\">        mOpenCvCameraView = (CameraBridgeViewBase) findViewById(R.id.tutorial1_activity_java_surface_view);</div><div class=\"line\"></div><div class=\"line\">        mOpenCvCameraView.setVisibility(SurfaceView.VISIBLE);</div><div class=\"line\"></div><div class=\"line\">        mOpenCvCameraView.setCvCameraViewListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPause</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onPause();</div><div class=\"line\">        <span class=\"keyword\">if</span> (mOpenCvCameraView != <span class=\"keyword\">null</span>)</div><div class=\"line\">            mOpenCvCameraView.disableView();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onResume();</div><div class=\"line\">        <span class=\"keyword\">if</span> (!OpenCVLoader.initDebug()) &#123;</div><div class=\"line\">            Log.d(TAG, <span class=\"string\">\"Internal OpenCV library not found. Using OpenCV Manager for initialization\"</span>);</div><div class=\"line\">            OpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION_3_0_0, <span class=\"keyword\">this</span>, mLoaderCallback);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            Log.d(TAG, <span class=\"string\">\"OpenCV library found inside package. Using it!\"</span>);</div><div class=\"line\">            mLoaderCallback.onManagerConnected(LoaderCallbackInterface.SUCCESS);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">        <span class=\"keyword\">if</span> (mOpenCvCameraView != <span class=\"keyword\">null</span>)</div><div class=\"line\">            mOpenCvCameraView.disableView();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCameraViewStarted</span><span class=\"params\">(<span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCameraViewStopped</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Mat <span class=\"title\">onCameraFrame</span><span class=\"params\">(CvCameraViewFrame inputFrame)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> inputFrame.rgba();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>You can create the Main Activity copying the above code. </p>\n<p>First you would like notice is that <code>MainActivity</code> implements  <code>CvCameraViewListener2</code> interface , this interface woulf enfore us to implement few methods which are related to  the camera </p>\n<p>then </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Mat <span class=\"title\">onCameraFrame</span><span class=\"params\">(CvCameraViewFrame inputFrame)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> inputFrame.rgba();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>这个是你使用opencv Java code 很重要的一个方法, 它接受相机的每帧原始数据, 并且你可以在这个方法内做所有的图片片处理工作, 它返回 <code>Mat</code>  作为相机要接受的帧数据.</p>\n<p>it is the best importment method for you use opencv , this will receiver the vedio as frames and you can do all the image processing inside this method and return a Mat thie this image  :)</p>\n<p>dont forget the permission of camera in your <code>AndroidMainfest.xml</code> </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\">&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"</div><div class=\"line\">    package=\"com.example.huanjulu.opencvinandroidexample\"&gt;</div><div class=\"line\">    &lt;supports-screens android:resizeable=\"true\"</div><div class=\"line\">        android:smallScreens=\"true\"</div><div class=\"line\">        android:normalScreens=\"true\"</div><div class=\"line\">        android:largeScreens=\"true\"</div><div class=\"line\">        android:anyDensity=\"true\" /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;uses-sdk android:minSdkVersion=\"8\" /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;uses-permission android:name=\"android.permission.CAMERA\"/&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;uses-feature android:name=\"android.hardware.camera\" android:required=\"false\"/&gt;</div><div class=\"line\">    &lt;uses-feature android:name=\"android.hardware.camera.autofocus\" android:required=\"false\"/&gt;</div><div class=\"line\">    &lt;uses-feature android:name=\"android.hardware.camera.front\" android:required=\"false\"/&gt;</div><div class=\"line\">    &lt;uses-feature android:name=\"android.hardware.camera.front.autofocus\" android:required=\"false\"/&gt;</div><div class=\"line\">    &lt;application</div><div class=\"line\">        android:allowBackup=\"true\"</div><div class=\"line\">        android:icon=\"@mipmap/ic_launcher\"</div><div class=\"line\">        android:label=\"@string/app_name\"</div><div class=\"line\">        android:roundIcon=\"@mipmap/ic_launcher_round\"</div><div class=\"line\">        android:supportsRtl=\"true\"</div><div class=\"line\">        android:theme=\"@style/AppTheme\"&gt;</div><div class=\"line\">        &lt;activity android:name=\".MainActivity\"&gt;</div><div class=\"line\">            &lt;intent-filter&gt;</div><div class=\"line\">                &lt;action android:name=\"android.intent.action.MAIN\" /&gt;</div><div class=\"line\"></div><div class=\"line\">                &lt;category android:name=\"android.intent.category.LAUNCHER\" /&gt;</div><div class=\"line\">            &lt;/intent-filter&gt;</div><div class=\"line\">        &lt;/activity&gt;</div><div class=\"line\">    &lt;/application&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/manifest&gt;</div></pre></td></tr></table></figure>\n<p>when open this application , if you get the follow prompt :</p>\n<p>It seems that you device does not support camera (or it is locked ). Application will be closed.</p>\n<p>at this moment , you need manually turn on the camera Permission in device settting </p>\n<p>okay ,then yon can enjoy it </p>"},{"title":"Jenkins","date":"2017-05-04T03:57:13.000Z","_content":"","source":"_posts/Jenkins.md","raw":"---\ntitle: Jenkins\ndate: 2017-05-04 11:57:13\ntags: [Jenkins, Ci, Android]\n---\n","slug":"Jenkins","published":1,"updated":"2017-05-04T03:59:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2fysnbu0003dc5jh604uek3","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-05-02T07:12:29.000Z","updated":"2017-05-02T08:22:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2fysnbx0004dc5jz668s6la","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<a id=\"more\"></a>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>"},{"title":"Do you know Dagger2?","date":"2017-05-02T06:13:26.000Z","_content":"\n\n## 概述\n\n很多Android Apps通常依赖于其他依赖库的实例化对象, 举例来说,  一个Twitter客户端可能使用类似[Retrofit](https://github.com/square/retrofit)的网络依赖库来进行构建, 要使用这个库, 你需要添加解析的库，比如说[Gson](https://github.com/google/gson).  此外,  那些实现认证或者缓存的类可能需要访问shared preferences和其他公共的存储单元，需要首先实例化他们并且创建固有的依赖链. \t\n\n<!-- more -->\n\n\nDagger2 为你分析这些依赖库, 并且生成代码以帮助把他们连接在一起, 虽然还有其他的Java 依赖注入库, 但是他们的大多数在依赖XML的时候有很多限制, 在运行期间需要验证依赖关系的问题, 或者在启动期间导致性能上的损耗,  Dagger 2纯粹依赖于使用Java注释处理器和编译时检查来分析和验证依赖性. 它被认为是迄今为止效率最高的依赖注入框架之一. \n\n## 优点\n\n这里有使用Dagger2 的一些优点\n\n\n- **简化对共享实例的访问.** 举例来说, 正如[ButterKnife](https://github.com/JakeWharton/butterknife)声明对View, 事件处理, 资源的引用更为简单那种, Dagger2为获取共享实例的饮用提供了一种简单的方式. 比如,一旦我们在Dagger中声明类似`MyTwitterApiClient`或者`SharedPreferences`的单例的引用, 我们可以简单的使用 `@Inject`注解来声明字段\n\n\n``` java\npublic class MainActivity extends Activity {\n   @Inject MyTwitterApiClient mTwitterApiClient;\n   @Inject SharedPreferences sharedPreferences;\n\n   public void onCreate(Bundle savedInstance) {\n       // assign singleton instances to fields\n       InjectorClass.inject(this);\n   } \n\n```\n\n- **更容易配制复杂的依赖.**  那些你经常创建的对象有一个隐式的过程. Dagger2 遍历依赖图表并且生成以便于理解且追踪代码, 同时把你从编写大量的模版代码的工作中解救出来, 你正常的需要手工编写代码以获取引用并将他们作为依赖传递给其他对象. 它也有助于简化重构, 因为以可以专注于构建哪些模块而不是关注于他们被创建的顺序. \n\n- **单元和集成变得更为轻松.** 因为依赖图表是由我们自己创建的, 我们能够简单的切换模块，作出网络响应并且模拟这种行为 \n\n- **实例作用域.** 你不仅更为简单的管理整个应用程序的生命周期, 你还可以利用Dagger2 声明更为简短的生命周期的实例(比如, 绑定用户的seesion, Activity 的生命周期, etc.). \n\n## 设置\n\nAndroid studio通常情况下不会允许你连接到生成Dagger2的代码作为合法的类,  因为他们通常情况下不会添加到资源路径, 但是通过添加`android-apt` 插件能够添加这些文件到IDE路径，并且使你对这些文件有更多的可见性\n\n由于Android Gradle plugin 2.2注释处理是内置的, android-apt并不被受待见. `android-apt`不支持新的 `jack` \n\n在你的`app/build.gradle` 文件中添加以下3行的申请说明\n\n``` java\ndependencies {\n    // apt command comes from the android-apt plugin\n    apt 'com.google.dagger:dagger-compiler:2.8'\n    compile 'com.google.dagger:dagger:2.8'\n    provided 'javax.annotation:jsr250-api:1.0'\n}\n\n```\n\n如果你正在使用android gradle 2.3 插件, 你可以使用`annotationProcessor` 来代替apt-plugin:\n\n``` java\ndependencies {\n    // apt command comes from the android-apt plugin\n    compile \"com.google.dagger:dagger:2.9\"\n    annotationProcessor \"com.google.dagger:dagger-compiler:2.9\"\n    provided 'javax.annotation:jsr250-api:1.0'\n}\n\n```\n\n要注意的是`provided`关键字仅仅在编译期间被用来作为依赖关系, Dagger生成用于创建源代码中定义的类的依赖图的代码. 这些类在编译期间被添加到IDE类路径中. `annotationProcessor`关键字被Android gradle插件所识别并且不会把这些类他们添加到类路径中, 它们仅仅被用来注释处理, 以防止别人意外的引用他们. \n\n\n## 创建单例\n\n![Creatint singletons](https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_general.png)\n\n很简单的例子表明如何使用Dagger2 集中你所有创建的单例.\n类似于下面这样, 假设在你的Twitter客户端中你从没有使用过任何类型的的依赖注入框架写代码\n\n``` java\nOkHttpClient client = new OkHttpClient();\n\n// Enable caching for OkHttp\nint cacheSize = 10 * 1024 * 1024; // 10 MiB\nCache cache = new Cache(getApplication().getCacheDir(), cacheSize);\nclient.setCache(cache);\n\n// Used for caching authentication tokens\nSharedPreferences sharedPrefeences = PreferenceManager.getDefaultSharedPreferences(this);\n\n// Instantiate Gson\nGson gson = new GsonBuilder().create();\nGsonConverterFactory converterFactory = GsonConverterFactory.create(gson);\n\n// Build Retrofit\nRetrofit retrofit = new Retrofit.Builder()\n                                .baseUrl(\"https://api.github.com\")\n                                .addConverterFactory(converterFactory)\n                                .client(client)  // custom client\n                                .build();\n```\n\n## 声明你的单例\n\n你需要通过创建一个Dagger2 moudle来明确哪些对象应该被包含作为依赖链的一部分. 举例来说, 如果我们希望使一个单独的`Retrofit`单例绑定到整个应用程序的生命周期,  并且对我们所有的activity和fragment都是可用的, 我们首先要让Dagger 知道可以提供一个`Retrofit`单例\n\n因为我们希望设置caching, 我们需要一份Application Context上下文环境. 我们的第一个Dagger模块`AppModule.java`将被用来提供此引用, 我们还需要声明带有`@Provides`注解的方法来告诉Dagger这个方法是返回类型为`Application`的构造器: \n\n``` java\n@Module\npublic class AppModule {\n\n    Application mApplication;\n\n    public AppModule(Application application) {\n        mApplication = application;\n    }\n\n    @Provides\n    @Singleton\n    Application providesApplication() {\n        return mApplication;\n    }\n}\n```\n\n我们创建一个名为`NetModule.java`并且使用`@Module`标注的类来告诉Dagger在可用方法的范围内寻找来作为实例的提供者\n\n`@Singleton`注解同样告诉Dagger编译器这个实例在整个应用生命周期中应该仅仅被创建一次, 在以下的例子中, 我们指定`SharedPreferences` `Gson` `Cache` `OkHttpClient` `Retrofit` 作为可以用作依赖列表一部分的返回类型\n\n``` java\n@Module\npublic class NetModule {\n\n    String mBaseUrl;\n\n    // Constructor needs one parameter to instantiate.  \n    public NetModule(String baseUrl) {\n        this.mBaseUrl = baseUrl;\n    }\n\n    // Dagger will only look for methods annotated with @Provides\n    @Provides\n    @Singleton\n    // Application reference must come from AppModule.class\n    SharedPreferences providesSharedPreferences(Application application) {\n        return PreferenceManager.getDefaultSharedPreferences(application);\n    }\n\n    @Provides\n    @Singleton\n    Cache provideOkHttpCache(Application application) { \n        int cacheSize = 10 * 1024 * 1024; // 10 MiB\n        Cache cache = new Cache(application.getCacheDir(), cacheSize);\n        return cache;\n    }\n\n   @Provides \n   @Singleton\n   Gson provideGson() {  \n       GsonBuilder gsonBuilder = new GsonBuilder();\n       gsonBuilder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES);\n       return gsonBuilder.create();\n   }\n\n   @Provides\n   @Singleton\n   OkHttpClient provideOkHttpClient(Cache cache) {\n      OkHttpClient client = new OkHttpClient();\n      client.setCache(cache);\n      return client;\n   }\n\n   @Provides\n   @Singleton\n   Retrofit provideRetrofit(Gson gson, OkHttpClient okHttpClient) {\n      Retrofit retrofit = new Retrofit.Builder()\n                .addConverterFactory(GsonConverterFactory.create(gson))\n                .baseUrl(mBaseUrl)\n                .client(okHttpClient)\n                .build();\n        return retrofit;\n    }\n}\n```\n\n注意这个方法名 (i.e. provideGson(), provideRetrofit(), etc)可以起任何名. 使用`@Provides`注解的返回值类型被用来将此实例与其他任何相同类型的moudle相关联, `@Singleton`注解被用来像Dagger描述在整个应用程序生命周期期间仅仅初始化一次\n\n`Retrofit`的实例的同时依赖于`Gson`和`OkHttpClient`实例, 所以我们可以在同一个类中声明另外一个方法以获取这两个类型. 在这个方法中`@Provides`注解和这两个参数将会使得Dagger 意识到这里有`Gson`和`OkHttpClient`的依赖以创建`Retrofit`的实例\n\n## 声明注入目标\n\nDagger为你的activitys, services, 或fragments提供了一种简单的通过使用`@Inject`注解注入字段并且调用`inject()`方法来分配引用, 调用`inject()`方法将会使Dagger2 在依赖图谱中尝试寻找一个相匹配的返回类型来定位单例. 如果找到, 它将分配各自对应字段的引用. 比如, 在下面的例子中, 它会尝试寻找返回类型为`MyTwitterApiClient`和`SharedPreferences`的提供器(provider)\n\n``` java\npublic class MainActivity extends Activity {\n   @Inject MyTwitterApiClient mTwitterApiClient;\n   @Inject SharedPreferences sharedPreferences;\n\n  public void onCreate(Bundle savedInstance) {\n       // assign singleton instances to fields\n       InjectorClass.inject(this);\n   } \n```\nDagger2 中使用的注入器类被称为 component组件, 它为我们的activitys, services, 或则fragments分配引用以连接我们之前声明的单例, 我们同样需要一个`@Component`注解声明的类, 可以添加的activitys, services, 或则fragments应该在这个类中单独的使用`inject()`方法声明:\n\n\n``` java\n@Singleton\n@Component(modules={AppModule.class, NetModule.class})\npublic interface NetComponent {\n   void inject(MainActivity activity);\n   // void inject(MyFragment fragment);\n   // void inject(MyService service);\n}\n```\n\n注意这些类并不足以作为注入的目标, Dagger2 依赖相匹配的类, 你必须明确指明那个类应该被声明在内, (这里有一些[建议](https://blog.gouline.net/dagger-2-even-sharper-less-square-b52101863542#.vgmua0fkm)来解决这个问题, 但是这样做代码可能追踪更加困难相比简单的定义它们 )\n\n## 代码生成\n\n一件重要Dagger2的方面是, 这个库为标注了`@Component`的接口类生成代码, 你可以使用前缀为`@Dagger`(i.e. DaggerTwitterApiComponent.java)的类, 它将负责实例化我们的依赖图谱中的一个实例, 并且用它执行`@Inject`注解字段的注入工作. 请看(setup guide)[https://github.com/codepath/android_guides/wiki/Dependency-Injection-with-Dagger-2#setup].\n\n## 实例化组件\n\n我们应该在`Application`的类中做所有工作, 因为这些实例在整个应用程序的生命周期中仅仅被声明一次\n\n``` java\npublic class MyApp extends Application {\n\n    private NetComponent mNetComponent;\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n\n        // Dagger%COMPONENT_NAME%\n        mNetComponent = DaggerNetComponent.builder()\n                // list of modules that are part of this component need to be created here too\n                .appModule(new AppModule(this)) // This also corresponds to the name of your module: %component_name%Module\n                .netModule(new NetModule(\"https://api.github.com\"))\n                .build();\n\n        // If a Dagger 2 component does not have any constructor arguments for any of its modules,\n        // then we can use .create() as a shortcut instead:\n        //  mNetComponent = com.codepath.dagger.components.DaggerNetComponent.create();\n    }\n\n    public NetComponent getNetComponent() {\n       return mNetComponent;\n    }\n}\n```\n\n如果不能没有Dagger component组件的引用, 你要确保重构项目(在AndroidStudio中, select Build > Rebuild Project)\n\n因为我们覆写了默认的`Application`类, 我们同样修改应用程序`name`为`MyApp`, 这样, 你的应用程序将使用这个Applicaiton 类来处理最初的实例. \n\n``` java\n<application\n      android:allowBackup=\"true\"\n      android:name=\".MyApp\">\n```\n\n在我们Activity的内部, 我们只需要调用`inject()`方法就可以简单的访问这些组件\n\n``` java\npublic class MyActivity extends Activity {\n  @Inject OkHttpClient mOkHttpClient;\n  @Inject SharedPreferences sharedPreferences;\n\n  public void onCreate(Bundle savedInstance) {\n        // assign singleton instances to fields\n        // We need to cast to `MyApp` in order to get the right method\n        ((MyApp) getApplication()).getNetComponent().inject(this);\n    } \n```\n\n## 限制类型\n\n![Qualified types](https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_qualifiers.png)\n\n如果我们需要同一返回类型的两个不同对象, 我们可以使用`@Named`限定注解, 你需要在你提供单例的地方(`@Provides` annotation)和注入它们的地方(`@Inject` annotations)同时声明它们:\n\n``` java\n@Provides @Named(\"cached\")\n@Singleton\nOkHttpClient provideOkHttpClient(Cache cache) {\n    OkHttpClient client = new OkHttpClient();\n    client.setCache(cache);\n    return client;\n}\n\n@Provides @Named(\"non_cached\") @Singleton\nOkHttpClient provideOkHttpClient() {\n    OkHttpClient client = new OkHttpClient();\n    return client;\n}\n```\n\n当你注入这些单例的时候, 你同样需要`@Named`注解\n\n``` java\n@Inject @Named(\"cached\") OkHttpClient client;\n@Inject @Named(\"non_cached\") OkHttpClient client2;\n```\n\n`@Named`是Dagger预先定义的限定注解, 你可以很好的创建你自己的限定注解\n\n``` java\n@Qualifier\n@Documented\n@Retention(RUNTIME)\npublic @interface DefaultPreferences {\n}\n```\n\n## 作用域\n\n![Scopes](https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_scopes.png)\n\n在Dagger2, 你可以声明Component组件通过声明自定义的范围如何封装. 举例来说, 你可以创建一个仅仅在activity或者fragment生命周期运行期间的作用域. 你可以创建只映射到用户身份验证会话的作用域. \n\n\n\n\n\n\n利用作用域允许我们要么创建依赖组件要么创建子组件, 上面的例子表明我们所使用的`@Singleton`注解是伴随应用程序的整个生命周期, 我们同样依赖于一个主要的Dagger component组件.\n\n如果我们希望拥有一个并不需要常驻内存中的多个Component组件(i.e. 依赖于activity或者fragment生命周期, 甚至依赖于用户的登录状态的Component组件), 我们可以创建相关的组件活着子组件, 在任何一种情况下, 都会为你封装代码提供一种方式. 我们将在下文中看到如何同时使用它们. \n\n这里有使用这些方法的几点考虑:\n\n- **相关的组件要求父组件明确列出哪些依赖可以注入, 而子组件没有** 对于父组件来说, 你需要通过指明类型和方法, 以想子组件暴露它们\n\n``` java\n// parent component\n@Singleton\n@Component(modules={AppModule.class, NetModule.class})\npublic interface NetComponent {\n    // remove injection methods if downstream modules will perform injection\n\n    // downstream components need these exposed\n    // the method name does not matter, only the return type\n    Retrofit retrofit(); \n    OkHttpClient okHttpClient();\n    SharedPreferences sharedPreferences();\n}\n```\n\n如果你忘记添加这行代码, 你将要看到一个关于注入目标丢失的错误. 类似于private/public变量如何去管理那样, 使用父component组件允许更明确的控制以及更好的封装, 但是使用子component组件使得依赖注入在花费的代价上更为简单\n\n- **两个相互依赖的组件不能共享同一范围.** 举例来说, 两个组件不能同时使用 `@Singleton`注解 标注作用域, 这个限制是有[这里](https://github.com/google/dagger/issues/107#issuecomment-71073298)描述的原因导致的, 相关的组件需要定义它们自己的范围.\n\n\n\n\n\n\n\n\n\n\n##  依赖组件\n\n![Dependent Components](https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_dependency.png)\n\n举例来说, 如果我们想要使用 用户会话的整个生命周期\n我们可以声明我们自己的 `@UserScope`接口\n\n``` java\nimport java.lang.annotation.Retention;\nimport javax.inject.Scope;\n\n@Scope\npublic @interface UserScope {\n}\n```\n然后, 我们声明它的父组件\n\n``` java\n  @Singleton\n  @Component(modules={AppModule.class, NetModule.class})\n  public interface NetComponent {\n      // downstream components need these exposed with the return type\n      // method name does not really matter\n      Retrofit retrofit();\n  }\n```\n\n我们可以接着声明它的子组件\n\n\n``` java\n@UserScope // using the previously defined scope, note that @Singleton will not work\n@Component(dependencies = NetComponent.class, modules = GitHubModule.class)\npublic interface GitHubComponent {\n    void inject(MainActivity activity);\n}\n```\n\n我们假设下面的Github模块简单的返回一个Github Api的接口\n\n``` java\n@Module\npublic class GitHubModule {\n\n    public interface GitHubApiInterface {\n      @GET(\"/org/{orgName}/repos\")\n      Call<ArrayList<Repository>> getRepository(@Path(\"orgName\") String orgName);\n    }\n\n    @Provides\n    @UserScope // needs to be consistent with the component scope\n    public GitHubApiInterface providesGitHubInterface(Retrofit retrofit) {\n        return retrofit.create(GitHubApiInterface.class);\n    }\n}\n```\n\n为了`GitHubModule.java`获得`Retrofit`实例的引用, 我们需要在调用它之前的组件中明确定义它们, 如果说在它之后执行注入, 它们应该在之后的组件中移除它们:\n\n``` java\n@Singleton\n@Component(modules={AppModule.class, NetModule.class})\npublic interface NetComponent {\n    // remove injection methods if downstream modules will perform injection\n\n    // downstream components need these exposed\n    Retrofit retrofit();\n    OkHttpClient okHttpClient();\n    SharedPreferences sharedPreferences();\n}\n```\n\n最后一步是使用`GitHubComponent` 执行实例化, 这个时候, 我们首先需要构建`NetComponent`, 并且在`DaggerGitHubComponent` builder的构造函数中传递它: \n\n``` java\nNetComponent mNetComponent = DaggerNetComponent.builder()\n                .appModule(new AppModule(this))\n                .netModule(new NetModule(\"https://api.github.com\"))\n                .build();\n\nGitHubComponent gitHubComponent = DaggerGitHubComponent.builder()\n                .netComponent(mNetComponent)\n                .gitHubModule(new GitHubModule())\n                .build();\n```\n\n[this example code ](https://github.com/codepath/dagger2-example)\n\n子组件\n\n![Subcomponents](https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_subcomponent.png)\n\n使用子组件是扩展组件的对象图的另外一种方式, 就像依赖的组件那样, 子组件有它们自己的生命周期并且当所有子组件的引用都消失的时候是可以被垃圾收集的, 并具有相同的范围限制。在使用这种方法的一个优点是，不需要定义所有下游组件. \n\n另一个主要的不同之处就是子组件只需要在父组件中声明. \n\n这里有一个为Activity使用子组件的例子. 我们使用自定义的范围和`@Subcomponent`注解标注一个类\n\n``` java\n@MyActivityScope\n@Subcomponent(modules={ MyActivityModule.class })\npublic interface MyActivitySubComponent {\n    @Named(\"my_list\") ArrayAdapter myListAdapter();\n}\n```\n\nmoudle模块使用下面声明\n\n``` java\n@Module\npublic class MyActivityModule {\n    private final MyActivity activity;\n\n    // must be instantiated with an activity\n    public MyActivityModule(MyActivity activity) { this.activity = activity; }\n\n    @Provides @MyActivityScope @Named(\"my_list\")\n    public ArrayAdapter providesMyListAdapter() {\n        return new ArrayAdapter<String>(activity, android.R.layout.my_list);\n    }\n    ...\n}\n```\n\n最后, 在父组件中, 我们声明一个工厂方法\n\n``` java\n@Singleton\n@Component(modules={ ... })\npublic interface MyApplicationComponent {\n    // injection targets here\n\n    // factory method to instantiate the subcomponent defined here (passing in the module instance)\n    MyActivitySubComponent newMyActivitySubcomponent(MyActivityModule activityModule);\n}\n```\n\n在上面的例子中, `newMyActivitySubcomponent()`每次被调用的时候, 一个新的子组件的实例都会被创建, 使用子模块moudle注入到一个activity\n\n``` java\n@Singleton\n@Component(modules={ ... })\npublic interface MyApplicationComponent {\n    // injection targets here\n\n    // factory method to instantiate the subcomponent defined here (passing in the module instance)\n    MyActivitySubComponent newMyActivitySubcomponent(MyActivityModule activityModule);\n}\n```\n子组件创建\n\n![Available starting in v2.7](https://raw.githubusercontent.com/codepath/android_guides/master/images/subcomponent_builders.png)\n\n\n\n","source":"_posts/Dagger2.md","raw":"---\ntitle: Do you know Dagger2?\ndate: 2017-05-02 14:13:26\ntags: Android \n---\n\n\n## 概述\n\n很多Android Apps通常依赖于其他依赖库的实例化对象, 举例来说,  一个Twitter客户端可能使用类似[Retrofit](https://github.com/square/retrofit)的网络依赖库来进行构建, 要使用这个库, 你需要添加解析的库，比如说[Gson](https://github.com/google/gson).  此外,  那些实现认证或者缓存的类可能需要访问shared preferences和其他公共的存储单元，需要首先实例化他们并且创建固有的依赖链. \t\n\n<!-- more -->\n\n\nDagger2 为你分析这些依赖库, 并且生成代码以帮助把他们连接在一起, 虽然还有其他的Java 依赖注入库, 但是他们的大多数在依赖XML的时候有很多限制, 在运行期间需要验证依赖关系的问题, 或者在启动期间导致性能上的损耗,  Dagger 2纯粹依赖于使用Java注释处理器和编译时检查来分析和验证依赖性. 它被认为是迄今为止效率最高的依赖注入框架之一. \n\n## 优点\n\n这里有使用Dagger2 的一些优点\n\n\n- **简化对共享实例的访问.** 举例来说, 正如[ButterKnife](https://github.com/JakeWharton/butterknife)声明对View, 事件处理, 资源的引用更为简单那种, Dagger2为获取共享实例的饮用提供了一种简单的方式. 比如,一旦我们在Dagger中声明类似`MyTwitterApiClient`或者`SharedPreferences`的单例的引用, 我们可以简单的使用 `@Inject`注解来声明字段\n\n\n``` java\npublic class MainActivity extends Activity {\n   @Inject MyTwitterApiClient mTwitterApiClient;\n   @Inject SharedPreferences sharedPreferences;\n\n   public void onCreate(Bundle savedInstance) {\n       // assign singleton instances to fields\n       InjectorClass.inject(this);\n   } \n\n```\n\n- **更容易配制复杂的依赖.**  那些你经常创建的对象有一个隐式的过程. Dagger2 遍历依赖图表并且生成以便于理解且追踪代码, 同时把你从编写大量的模版代码的工作中解救出来, 你正常的需要手工编写代码以获取引用并将他们作为依赖传递给其他对象. 它也有助于简化重构, 因为以可以专注于构建哪些模块而不是关注于他们被创建的顺序. \n\n- **单元和集成变得更为轻松.** 因为依赖图表是由我们自己创建的, 我们能够简单的切换模块，作出网络响应并且模拟这种行为 \n\n- **实例作用域.** 你不仅更为简单的管理整个应用程序的生命周期, 你还可以利用Dagger2 声明更为简短的生命周期的实例(比如, 绑定用户的seesion, Activity 的生命周期, etc.). \n\n## 设置\n\nAndroid studio通常情况下不会允许你连接到生成Dagger2的代码作为合法的类,  因为他们通常情况下不会添加到资源路径, 但是通过添加`android-apt` 插件能够添加这些文件到IDE路径，并且使你对这些文件有更多的可见性\n\n由于Android Gradle plugin 2.2注释处理是内置的, android-apt并不被受待见. `android-apt`不支持新的 `jack` \n\n在你的`app/build.gradle` 文件中添加以下3行的申请说明\n\n``` java\ndependencies {\n    // apt command comes from the android-apt plugin\n    apt 'com.google.dagger:dagger-compiler:2.8'\n    compile 'com.google.dagger:dagger:2.8'\n    provided 'javax.annotation:jsr250-api:1.0'\n}\n\n```\n\n如果你正在使用android gradle 2.3 插件, 你可以使用`annotationProcessor` 来代替apt-plugin:\n\n``` java\ndependencies {\n    // apt command comes from the android-apt plugin\n    compile \"com.google.dagger:dagger:2.9\"\n    annotationProcessor \"com.google.dagger:dagger-compiler:2.9\"\n    provided 'javax.annotation:jsr250-api:1.0'\n}\n\n```\n\n要注意的是`provided`关键字仅仅在编译期间被用来作为依赖关系, Dagger生成用于创建源代码中定义的类的依赖图的代码. 这些类在编译期间被添加到IDE类路径中. `annotationProcessor`关键字被Android gradle插件所识别并且不会把这些类他们添加到类路径中, 它们仅仅被用来注释处理, 以防止别人意外的引用他们. \n\n\n## 创建单例\n\n![Creatint singletons](https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_general.png)\n\n很简单的例子表明如何使用Dagger2 集中你所有创建的单例.\n类似于下面这样, 假设在你的Twitter客户端中你从没有使用过任何类型的的依赖注入框架写代码\n\n``` java\nOkHttpClient client = new OkHttpClient();\n\n// Enable caching for OkHttp\nint cacheSize = 10 * 1024 * 1024; // 10 MiB\nCache cache = new Cache(getApplication().getCacheDir(), cacheSize);\nclient.setCache(cache);\n\n// Used for caching authentication tokens\nSharedPreferences sharedPrefeences = PreferenceManager.getDefaultSharedPreferences(this);\n\n// Instantiate Gson\nGson gson = new GsonBuilder().create();\nGsonConverterFactory converterFactory = GsonConverterFactory.create(gson);\n\n// Build Retrofit\nRetrofit retrofit = new Retrofit.Builder()\n                                .baseUrl(\"https://api.github.com\")\n                                .addConverterFactory(converterFactory)\n                                .client(client)  // custom client\n                                .build();\n```\n\n## 声明你的单例\n\n你需要通过创建一个Dagger2 moudle来明确哪些对象应该被包含作为依赖链的一部分. 举例来说, 如果我们希望使一个单独的`Retrofit`单例绑定到整个应用程序的生命周期,  并且对我们所有的activity和fragment都是可用的, 我们首先要让Dagger 知道可以提供一个`Retrofit`单例\n\n因为我们希望设置caching, 我们需要一份Application Context上下文环境. 我们的第一个Dagger模块`AppModule.java`将被用来提供此引用, 我们还需要声明带有`@Provides`注解的方法来告诉Dagger这个方法是返回类型为`Application`的构造器: \n\n``` java\n@Module\npublic class AppModule {\n\n    Application mApplication;\n\n    public AppModule(Application application) {\n        mApplication = application;\n    }\n\n    @Provides\n    @Singleton\n    Application providesApplication() {\n        return mApplication;\n    }\n}\n```\n\n我们创建一个名为`NetModule.java`并且使用`@Module`标注的类来告诉Dagger在可用方法的范围内寻找来作为实例的提供者\n\n`@Singleton`注解同样告诉Dagger编译器这个实例在整个应用生命周期中应该仅仅被创建一次, 在以下的例子中, 我们指定`SharedPreferences` `Gson` `Cache` `OkHttpClient` `Retrofit` 作为可以用作依赖列表一部分的返回类型\n\n``` java\n@Module\npublic class NetModule {\n\n    String mBaseUrl;\n\n    // Constructor needs one parameter to instantiate.  \n    public NetModule(String baseUrl) {\n        this.mBaseUrl = baseUrl;\n    }\n\n    // Dagger will only look for methods annotated with @Provides\n    @Provides\n    @Singleton\n    // Application reference must come from AppModule.class\n    SharedPreferences providesSharedPreferences(Application application) {\n        return PreferenceManager.getDefaultSharedPreferences(application);\n    }\n\n    @Provides\n    @Singleton\n    Cache provideOkHttpCache(Application application) { \n        int cacheSize = 10 * 1024 * 1024; // 10 MiB\n        Cache cache = new Cache(application.getCacheDir(), cacheSize);\n        return cache;\n    }\n\n   @Provides \n   @Singleton\n   Gson provideGson() {  \n       GsonBuilder gsonBuilder = new GsonBuilder();\n       gsonBuilder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES);\n       return gsonBuilder.create();\n   }\n\n   @Provides\n   @Singleton\n   OkHttpClient provideOkHttpClient(Cache cache) {\n      OkHttpClient client = new OkHttpClient();\n      client.setCache(cache);\n      return client;\n   }\n\n   @Provides\n   @Singleton\n   Retrofit provideRetrofit(Gson gson, OkHttpClient okHttpClient) {\n      Retrofit retrofit = new Retrofit.Builder()\n                .addConverterFactory(GsonConverterFactory.create(gson))\n                .baseUrl(mBaseUrl)\n                .client(okHttpClient)\n                .build();\n        return retrofit;\n    }\n}\n```\n\n注意这个方法名 (i.e. provideGson(), provideRetrofit(), etc)可以起任何名. 使用`@Provides`注解的返回值类型被用来将此实例与其他任何相同类型的moudle相关联, `@Singleton`注解被用来像Dagger描述在整个应用程序生命周期期间仅仅初始化一次\n\n`Retrofit`的实例的同时依赖于`Gson`和`OkHttpClient`实例, 所以我们可以在同一个类中声明另外一个方法以获取这两个类型. 在这个方法中`@Provides`注解和这两个参数将会使得Dagger 意识到这里有`Gson`和`OkHttpClient`的依赖以创建`Retrofit`的实例\n\n## 声明注入目标\n\nDagger为你的activitys, services, 或fragments提供了一种简单的通过使用`@Inject`注解注入字段并且调用`inject()`方法来分配引用, 调用`inject()`方法将会使Dagger2 在依赖图谱中尝试寻找一个相匹配的返回类型来定位单例. 如果找到, 它将分配各自对应字段的引用. 比如, 在下面的例子中, 它会尝试寻找返回类型为`MyTwitterApiClient`和`SharedPreferences`的提供器(provider)\n\n``` java\npublic class MainActivity extends Activity {\n   @Inject MyTwitterApiClient mTwitterApiClient;\n   @Inject SharedPreferences sharedPreferences;\n\n  public void onCreate(Bundle savedInstance) {\n       // assign singleton instances to fields\n       InjectorClass.inject(this);\n   } \n```\nDagger2 中使用的注入器类被称为 component组件, 它为我们的activitys, services, 或则fragments分配引用以连接我们之前声明的单例, 我们同样需要一个`@Component`注解声明的类, 可以添加的activitys, services, 或则fragments应该在这个类中单独的使用`inject()`方法声明:\n\n\n``` java\n@Singleton\n@Component(modules={AppModule.class, NetModule.class})\npublic interface NetComponent {\n   void inject(MainActivity activity);\n   // void inject(MyFragment fragment);\n   // void inject(MyService service);\n}\n```\n\n注意这些类并不足以作为注入的目标, Dagger2 依赖相匹配的类, 你必须明确指明那个类应该被声明在内, (这里有一些[建议](https://blog.gouline.net/dagger-2-even-sharper-less-square-b52101863542#.vgmua0fkm)来解决这个问题, 但是这样做代码可能追踪更加困难相比简单的定义它们 )\n\n## 代码生成\n\n一件重要Dagger2的方面是, 这个库为标注了`@Component`的接口类生成代码, 你可以使用前缀为`@Dagger`(i.e. DaggerTwitterApiComponent.java)的类, 它将负责实例化我们的依赖图谱中的一个实例, 并且用它执行`@Inject`注解字段的注入工作. 请看(setup guide)[https://github.com/codepath/android_guides/wiki/Dependency-Injection-with-Dagger-2#setup].\n\n## 实例化组件\n\n我们应该在`Application`的类中做所有工作, 因为这些实例在整个应用程序的生命周期中仅仅被声明一次\n\n``` java\npublic class MyApp extends Application {\n\n    private NetComponent mNetComponent;\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n\n        // Dagger%COMPONENT_NAME%\n        mNetComponent = DaggerNetComponent.builder()\n                // list of modules that are part of this component need to be created here too\n                .appModule(new AppModule(this)) // This also corresponds to the name of your module: %component_name%Module\n                .netModule(new NetModule(\"https://api.github.com\"))\n                .build();\n\n        // If a Dagger 2 component does not have any constructor arguments for any of its modules,\n        // then we can use .create() as a shortcut instead:\n        //  mNetComponent = com.codepath.dagger.components.DaggerNetComponent.create();\n    }\n\n    public NetComponent getNetComponent() {\n       return mNetComponent;\n    }\n}\n```\n\n如果不能没有Dagger component组件的引用, 你要确保重构项目(在AndroidStudio中, select Build > Rebuild Project)\n\n因为我们覆写了默认的`Application`类, 我们同样修改应用程序`name`为`MyApp`, 这样, 你的应用程序将使用这个Applicaiton 类来处理最初的实例. \n\n``` java\n<application\n      android:allowBackup=\"true\"\n      android:name=\".MyApp\">\n```\n\n在我们Activity的内部, 我们只需要调用`inject()`方法就可以简单的访问这些组件\n\n``` java\npublic class MyActivity extends Activity {\n  @Inject OkHttpClient mOkHttpClient;\n  @Inject SharedPreferences sharedPreferences;\n\n  public void onCreate(Bundle savedInstance) {\n        // assign singleton instances to fields\n        // We need to cast to `MyApp` in order to get the right method\n        ((MyApp) getApplication()).getNetComponent().inject(this);\n    } \n```\n\n## 限制类型\n\n![Qualified types](https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_qualifiers.png)\n\n如果我们需要同一返回类型的两个不同对象, 我们可以使用`@Named`限定注解, 你需要在你提供单例的地方(`@Provides` annotation)和注入它们的地方(`@Inject` annotations)同时声明它们:\n\n``` java\n@Provides @Named(\"cached\")\n@Singleton\nOkHttpClient provideOkHttpClient(Cache cache) {\n    OkHttpClient client = new OkHttpClient();\n    client.setCache(cache);\n    return client;\n}\n\n@Provides @Named(\"non_cached\") @Singleton\nOkHttpClient provideOkHttpClient() {\n    OkHttpClient client = new OkHttpClient();\n    return client;\n}\n```\n\n当你注入这些单例的时候, 你同样需要`@Named`注解\n\n``` java\n@Inject @Named(\"cached\") OkHttpClient client;\n@Inject @Named(\"non_cached\") OkHttpClient client2;\n```\n\n`@Named`是Dagger预先定义的限定注解, 你可以很好的创建你自己的限定注解\n\n``` java\n@Qualifier\n@Documented\n@Retention(RUNTIME)\npublic @interface DefaultPreferences {\n}\n```\n\n## 作用域\n\n![Scopes](https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_scopes.png)\n\n在Dagger2, 你可以声明Component组件通过声明自定义的范围如何封装. 举例来说, 你可以创建一个仅仅在activity或者fragment生命周期运行期间的作用域. 你可以创建只映射到用户身份验证会话的作用域. \n\n\n\n\n\n\n利用作用域允许我们要么创建依赖组件要么创建子组件, 上面的例子表明我们所使用的`@Singleton`注解是伴随应用程序的整个生命周期, 我们同样依赖于一个主要的Dagger component组件.\n\n如果我们希望拥有一个并不需要常驻内存中的多个Component组件(i.e. 依赖于activity或者fragment生命周期, 甚至依赖于用户的登录状态的Component组件), 我们可以创建相关的组件活着子组件, 在任何一种情况下, 都会为你封装代码提供一种方式. 我们将在下文中看到如何同时使用它们. \n\n这里有使用这些方法的几点考虑:\n\n- **相关的组件要求父组件明确列出哪些依赖可以注入, 而子组件没有** 对于父组件来说, 你需要通过指明类型和方法, 以想子组件暴露它们\n\n``` java\n// parent component\n@Singleton\n@Component(modules={AppModule.class, NetModule.class})\npublic interface NetComponent {\n    // remove injection methods if downstream modules will perform injection\n\n    // downstream components need these exposed\n    // the method name does not matter, only the return type\n    Retrofit retrofit(); \n    OkHttpClient okHttpClient();\n    SharedPreferences sharedPreferences();\n}\n```\n\n如果你忘记添加这行代码, 你将要看到一个关于注入目标丢失的错误. 类似于private/public变量如何去管理那样, 使用父component组件允许更明确的控制以及更好的封装, 但是使用子component组件使得依赖注入在花费的代价上更为简单\n\n- **两个相互依赖的组件不能共享同一范围.** 举例来说, 两个组件不能同时使用 `@Singleton`注解 标注作用域, 这个限制是有[这里](https://github.com/google/dagger/issues/107#issuecomment-71073298)描述的原因导致的, 相关的组件需要定义它们自己的范围.\n\n\n\n\n\n\n\n\n\n\n##  依赖组件\n\n![Dependent Components](https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_dependency.png)\n\n举例来说, 如果我们想要使用 用户会话的整个生命周期\n我们可以声明我们自己的 `@UserScope`接口\n\n``` java\nimport java.lang.annotation.Retention;\nimport javax.inject.Scope;\n\n@Scope\npublic @interface UserScope {\n}\n```\n然后, 我们声明它的父组件\n\n``` java\n  @Singleton\n  @Component(modules={AppModule.class, NetModule.class})\n  public interface NetComponent {\n      // downstream components need these exposed with the return type\n      // method name does not really matter\n      Retrofit retrofit();\n  }\n```\n\n我们可以接着声明它的子组件\n\n\n``` java\n@UserScope // using the previously defined scope, note that @Singleton will not work\n@Component(dependencies = NetComponent.class, modules = GitHubModule.class)\npublic interface GitHubComponent {\n    void inject(MainActivity activity);\n}\n```\n\n我们假设下面的Github模块简单的返回一个Github Api的接口\n\n``` java\n@Module\npublic class GitHubModule {\n\n    public interface GitHubApiInterface {\n      @GET(\"/org/{orgName}/repos\")\n      Call<ArrayList<Repository>> getRepository(@Path(\"orgName\") String orgName);\n    }\n\n    @Provides\n    @UserScope // needs to be consistent with the component scope\n    public GitHubApiInterface providesGitHubInterface(Retrofit retrofit) {\n        return retrofit.create(GitHubApiInterface.class);\n    }\n}\n```\n\n为了`GitHubModule.java`获得`Retrofit`实例的引用, 我们需要在调用它之前的组件中明确定义它们, 如果说在它之后执行注入, 它们应该在之后的组件中移除它们:\n\n``` java\n@Singleton\n@Component(modules={AppModule.class, NetModule.class})\npublic interface NetComponent {\n    // remove injection methods if downstream modules will perform injection\n\n    // downstream components need these exposed\n    Retrofit retrofit();\n    OkHttpClient okHttpClient();\n    SharedPreferences sharedPreferences();\n}\n```\n\n最后一步是使用`GitHubComponent` 执行实例化, 这个时候, 我们首先需要构建`NetComponent`, 并且在`DaggerGitHubComponent` builder的构造函数中传递它: \n\n``` java\nNetComponent mNetComponent = DaggerNetComponent.builder()\n                .appModule(new AppModule(this))\n                .netModule(new NetModule(\"https://api.github.com\"))\n                .build();\n\nGitHubComponent gitHubComponent = DaggerGitHubComponent.builder()\n                .netComponent(mNetComponent)\n                .gitHubModule(new GitHubModule())\n                .build();\n```\n\n[this example code ](https://github.com/codepath/dagger2-example)\n\n子组件\n\n![Subcomponents](https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_subcomponent.png)\n\n使用子组件是扩展组件的对象图的另外一种方式, 就像依赖的组件那样, 子组件有它们自己的生命周期并且当所有子组件的引用都消失的时候是可以被垃圾收集的, 并具有相同的范围限制。在使用这种方法的一个优点是，不需要定义所有下游组件. \n\n另一个主要的不同之处就是子组件只需要在父组件中声明. \n\n这里有一个为Activity使用子组件的例子. 我们使用自定义的范围和`@Subcomponent`注解标注一个类\n\n``` java\n@MyActivityScope\n@Subcomponent(modules={ MyActivityModule.class })\npublic interface MyActivitySubComponent {\n    @Named(\"my_list\") ArrayAdapter myListAdapter();\n}\n```\n\nmoudle模块使用下面声明\n\n``` java\n@Module\npublic class MyActivityModule {\n    private final MyActivity activity;\n\n    // must be instantiated with an activity\n    public MyActivityModule(MyActivity activity) { this.activity = activity; }\n\n    @Provides @MyActivityScope @Named(\"my_list\")\n    public ArrayAdapter providesMyListAdapter() {\n        return new ArrayAdapter<String>(activity, android.R.layout.my_list);\n    }\n    ...\n}\n```\n\n最后, 在父组件中, 我们声明一个工厂方法\n\n``` java\n@Singleton\n@Component(modules={ ... })\npublic interface MyApplicationComponent {\n    // injection targets here\n\n    // factory method to instantiate the subcomponent defined here (passing in the module instance)\n    MyActivitySubComponent newMyActivitySubcomponent(MyActivityModule activityModule);\n}\n```\n\n在上面的例子中, `newMyActivitySubcomponent()`每次被调用的时候, 一个新的子组件的实例都会被创建, 使用子模块moudle注入到一个activity\n\n``` java\n@Singleton\n@Component(modules={ ... })\npublic interface MyApplicationComponent {\n    // injection targets here\n\n    // factory method to instantiate the subcomponent defined here (passing in the module instance)\n    MyActivitySubComponent newMyActivitySubcomponent(MyActivityModule activityModule);\n}\n```\n子组件创建\n\n![Available starting in v2.7](https://raw.githubusercontent.com/codepath/android_guides/master/images/subcomponent_builders.png)\n\n\n\n","slug":"Dagger2","published":1,"updated":"2017-05-02T08:22:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2fysnbz0005dc5j74ltipcp","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>很多Android Apps通常依赖于其他依赖库的实例化对象, 举例来说,  一个Twitter客户端可能使用类似<a href=\"https://github.com/square/retrofit\" target=\"_blank\" rel=\"external\">Retrofit</a>的网络依赖库来进行构建, 要使用这个库, 你需要添加解析的库，比如说<a href=\"https://github.com/google/gson\" target=\"_blank\" rel=\"external\">Gson</a>.  此外,  那些实现认证或者缓存的类可能需要访问shared preferences和其他公共的存储单元，需要首先实例化他们并且创建固有的依赖链.     </p>\n<a id=\"more\"></a>\n<p>Dagger2 为你分析这些依赖库, 并且生成代码以帮助把他们连接在一起, 虽然还有其他的Java 依赖注入库, 但是他们的大多数在依赖XML的时候有很多限制, 在运行期间需要验证依赖关系的问题, 或者在启动期间导致性能上的损耗,  Dagger 2纯粹依赖于使用Java注释处理器和编译时检查来分析和验证依赖性. 它被认为是迄今为止效率最高的依赖注入框架之一. </p>\n<h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><p>这里有使用Dagger2 的一些优点</p>\n<ul>\n<li><strong>简化对共享实例的访问.</strong> 举例来说, 正如<a href=\"https://github.com/JakeWharton/butterknife\" target=\"_blank\" rel=\"external\">ButterKnife</a>声明对View, 事件处理, 资源的引用更为简单那种, Dagger2为获取共享实例的饮用提供了一种简单的方式. 比如,一旦我们在Dagger中声明类似<code>MyTwitterApiClient</code>或者<code>SharedPreferences</code>的单例的引用, 我们可以简单的使用 <code>@Inject</code>注解来声明字段</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\">   <span class=\"meta\">@Inject</span> MyTwitterApiClient mTwitterApiClient;</div><div class=\"line\">   <span class=\"meta\">@Inject</span> SharedPreferences sharedPreferences;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstance)</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">// assign singleton instances to fields</span></div><div class=\"line\">       InjectorClass.inject(<span class=\"keyword\">this</span>);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>更容易配制复杂的依赖.</strong>  那些你经常创建的对象有一个隐式的过程. Dagger2 遍历依赖图表并且生成以便于理解且追踪代码, 同时把你从编写大量的模版代码的工作中解救出来, 你正常的需要手工编写代码以获取引用并将他们作为依赖传递给其他对象. 它也有助于简化重构, 因为以可以专注于构建哪些模块而不是关注于他们被创建的顺序. </p>\n</li>\n<li><p><strong>单元和集成变得更为轻松.</strong> 因为依赖图表是由我们自己创建的, 我们能够简单的切换模块，作出网络响应并且模拟这种行为 </p>\n</li>\n<li><p><strong>实例作用域.</strong> 你不仅更为简单的管理整个应用程序的生命周期, 你还可以利用Dagger2 声明更为简短的生命周期的实例(比如, 绑定用户的seesion, Activity 的生命周期, etc.). </p>\n</li>\n</ul>\n<h2 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h2><p>Android studio通常情况下不会允许你连接到生成Dagger2的代码作为合法的类,  因为他们通常情况下不会添加到资源路径, 但是通过添加<code>android-apt</code> 插件能够添加这些文件到IDE路径，并且使你对这些文件有更多的可见性</p>\n<p>由于Android Gradle plugin 2.2注释处理是内置的, android-apt并不被受待见. <code>android-apt</code>不支持新的 <code>jack</code> </p>\n<p>在你的<code>app/build.gradle</code> 文件中添加以下3行的申请说明</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">    <span class=\"comment\">// apt command comes from the android-apt plugin</span></div><div class=\"line\">    apt <span class=\"string\">'com.google.dagger:dagger-compiler:2.8'</span></div><div class=\"line\">    compile <span class=\"string\">'com.google.dagger:dagger:2.8'</span></div><div class=\"line\">    provided <span class=\"string\">'javax.annotation:jsr250-api:1.0'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果你正在使用android gradle 2.3 插件, 你可以使用<code>annotationProcessor</code> 来代替apt-plugin:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">    <span class=\"comment\">// apt command comes from the android-apt plugin</span></div><div class=\"line\">    compile <span class=\"string\">\"com.google.dagger:dagger:2.9\"</span></div><div class=\"line\">    annotationProcessor <span class=\"string\">\"com.google.dagger:dagger-compiler:2.9\"</span></div><div class=\"line\">    provided <span class=\"string\">'javax.annotation:jsr250-api:1.0'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>要注意的是<code>provided</code>关键字仅仅在编译期间被用来作为依赖关系, Dagger生成用于创建源代码中定义的类的依赖图的代码. 这些类在编译期间被添加到IDE类路径中. <code>annotationProcessor</code>关键字被Android gradle插件所识别并且不会把这些类他们添加到类路径中, 它们仅仅被用来注释处理, 以防止别人意外的引用他们. </p>\n<h2 id=\"创建单例\"><a href=\"#创建单例\" class=\"headerlink\" title=\"创建单例\"></a>创建单例</h2><p><img src=\"https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_general.png\" alt=\"Creatint singletons\"></p>\n<p>很简单的例子表明如何使用Dagger2 集中你所有创建的单例.<br>类似于下面这样, 假设在你的Twitter客户端中你从没有使用过任何类型的的依赖注入框架写代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Enable caching for OkHttp</span></div><div class=\"line\"><span class=\"keyword\">int</span> cacheSize = <span class=\"number\">10</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>; <span class=\"comment\">// 10 MiB</span></div><div class=\"line\">Cache cache = <span class=\"keyword\">new</span> Cache(getApplication().getCacheDir(), cacheSize);</div><div class=\"line\">client.setCache(cache);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Used for caching authentication tokens</span></div><div class=\"line\">SharedPreferences sharedPrefeences = PreferenceManager.getDefaultSharedPreferences(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Instantiate Gson</span></div><div class=\"line\">Gson gson = <span class=\"keyword\">new</span> GsonBuilder().create();</div><div class=\"line\">GsonConverterFactory converterFactory = GsonConverterFactory.create(gson);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Build Retrofit</span></div><div class=\"line\">Retrofit retrofit = <span class=\"keyword\">new</span> Retrofit.Builder()</div><div class=\"line\">                                .baseUrl(<span class=\"string\">\"https://api.github.com\"</span>)</div><div class=\"line\">                                .addConverterFactory(converterFactory)</div><div class=\"line\">                                .client(client)  <span class=\"comment\">// custom client</span></div><div class=\"line\">                                .build();</div></pre></td></tr></table></figure>\n<h2 id=\"声明你的单例\"><a href=\"#声明你的单例\" class=\"headerlink\" title=\"声明你的单例\"></a>声明你的单例</h2><p>你需要通过创建一个Dagger2 moudle来明确哪些对象应该被包含作为依赖链的一部分. 举例来说, 如果我们希望使一个单独的<code>Retrofit</code>单例绑定到整个应用程序的生命周期,  并且对我们所有的activity和fragment都是可用的, 我们首先要让Dagger 知道可以提供一个<code>Retrofit</code>单例</p>\n<p>因为我们希望设置caching, 我们需要一份Application Context上下文环境. 我们的第一个Dagger模块<code>AppModule.java</code>将被用来提供此引用, 我们还需要声明带有<code>@Provides</code>注解的方法来告诉Dagger这个方法是返回类型为<code>Application</code>的构造器: </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Module</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppModule</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    Application mApplication;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AppModule</span><span class=\"params\">(Application application)</span> </span>&#123;</div><div class=\"line\">        mApplication = application;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@Singleton</span></div><div class=\"line\">    <span class=\"function\">Application <span class=\"title\">providesApplication</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mApplication;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们创建一个名为<code>NetModule.java</code>并且使用<code>@Module</code>标注的类来告诉Dagger在可用方法的范围内寻找来作为实例的提供者</p>\n<p><code>@Singleton</code>注解同样告诉Dagger编译器这个实例在整个应用生命周期中应该仅仅被创建一次, 在以下的例子中, 我们指定<code>SharedPreferences</code> <code>Gson</code> <code>Cache</code> <code>OkHttpClient</code> <code>Retrofit</code> 作为可以用作依赖列表一部分的返回类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Module</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NetModule</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    String mBaseUrl;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Constructor needs one parameter to instantiate.  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NetModule</span><span class=\"params\">(String baseUrl)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.mBaseUrl = baseUrl;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Dagger will only look for methods annotated with @Provides</span></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@Singleton</span></div><div class=\"line\">    <span class=\"comment\">// Application reference must come from AppModule.class</span></div><div class=\"line\">    <span class=\"function\">SharedPreferences <span class=\"title\">providesSharedPreferences</span><span class=\"params\">(Application application)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> PreferenceManager.getDefaultSharedPreferences(application);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@Singleton</span></div><div class=\"line\">    <span class=\"function\">Cache <span class=\"title\">provideOkHttpCache</span><span class=\"params\">(Application application)</span> </span>&#123; </div><div class=\"line\">        <span class=\"keyword\">int</span> cacheSize = <span class=\"number\">10</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>; <span class=\"comment\">// 10 MiB</span></div><div class=\"line\">        Cache cache = <span class=\"keyword\">new</span> Cache(application.getCacheDir(), cacheSize);</div><div class=\"line\">        <span class=\"keyword\">return</span> cache;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Provides</span> </div><div class=\"line\">   <span class=\"meta\">@Singleton</span></div><div class=\"line\">   <span class=\"function\">Gson <span class=\"title\">provideGson</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">       GsonBuilder gsonBuilder = <span class=\"keyword\">new</span> GsonBuilder();</div><div class=\"line\">       gsonBuilder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES);</div><div class=\"line\">       <span class=\"keyword\">return</span> gsonBuilder.create();</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Provides</span></div><div class=\"line\">   <span class=\"meta\">@Singleton</span></div><div class=\"line\">   <span class=\"function\">OkHttpClient <span class=\"title\">provideOkHttpClient</span><span class=\"params\">(Cache cache)</span> </span>&#123;</div><div class=\"line\">      OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient();</div><div class=\"line\">      client.setCache(cache);</div><div class=\"line\">      <span class=\"keyword\">return</span> client;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Provides</span></div><div class=\"line\">   <span class=\"meta\">@Singleton</span></div><div class=\"line\">   <span class=\"function\">Retrofit <span class=\"title\">provideRetrofit</span><span class=\"params\">(Gson gson, OkHttpClient okHttpClient)</span> </span>&#123;</div><div class=\"line\">      Retrofit retrofit = <span class=\"keyword\">new</span> Retrofit.Builder()</div><div class=\"line\">                .addConverterFactory(GsonConverterFactory.create(gson))</div><div class=\"line\">                .baseUrl(mBaseUrl)</div><div class=\"line\">                .client(okHttpClient)</div><div class=\"line\">                .build();</div><div class=\"line\">        <span class=\"keyword\">return</span> retrofit;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意这个方法名 (i.e. provideGson(), provideRetrofit(), etc)可以起任何名. 使用<code>@Provides</code>注解的返回值类型被用来将此实例与其他任何相同类型的moudle相关联, <code>@Singleton</code>注解被用来像Dagger描述在整个应用程序生命周期期间仅仅初始化一次</p>\n<p><code>Retrofit</code>的实例的同时依赖于<code>Gson</code>和<code>OkHttpClient</code>实例, 所以我们可以在同一个类中声明另外一个方法以获取这两个类型. 在这个方法中<code>@Provides</code>注解和这两个参数将会使得Dagger 意识到这里有<code>Gson</code>和<code>OkHttpClient</code>的依赖以创建<code>Retrofit</code>的实例</p>\n<h2 id=\"声明注入目标\"><a href=\"#声明注入目标\" class=\"headerlink\" title=\"声明注入目标\"></a>声明注入目标</h2><p>Dagger为你的activitys, services, 或fragments提供了一种简单的通过使用<code>@Inject</code>注解注入字段并且调用<code>inject()</code>方法来分配引用, 调用<code>inject()</code>方法将会使Dagger2 在依赖图谱中尝试寻找一个相匹配的返回类型来定位单例. 如果找到, 它将分配各自对应字段的引用. 比如, 在下面的例子中, 它会尝试寻找返回类型为<code>MyTwitterApiClient</code>和<code>SharedPreferences</code>的提供器(provider)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\">   <span class=\"meta\">@Inject</span> MyTwitterApiClient mTwitterApiClient;</div><div class=\"line\">   <span class=\"meta\">@Inject</span> SharedPreferences sharedPreferences;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstance)</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">// assign singleton instances to fields</span></div><div class=\"line\">       InjectorClass.inject(<span class=\"keyword\">this</span>);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>Dagger2 中使用的注入器类被称为 component组件, 它为我们的activitys, services, 或则fragments分配引用以连接我们之前声明的单例, 我们同样需要一个<code>@Component</code>注解声明的类, 可以添加的activitys, services, 或则fragments应该在这个类中单独的使用<code>inject()</code>方法声明:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules=&#123;AppModule.class, NetModule.class&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">NetComponent</span> </span>&#123;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">(MainActivity activity)</span></span>;</div><div class=\"line\">   <span class=\"comment\">// void inject(MyFragment fragment);</span></div><div class=\"line\">   <span class=\"comment\">// void inject(MyService service);</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意这些类并不足以作为注入的目标, Dagger2 依赖相匹配的类, 你必须明确指明那个类应该被声明在内, (这里有一些<a href=\"https://blog.gouline.net/dagger-2-even-sharper-less-square-b52101863542#.vgmua0fkm\" target=\"_blank\" rel=\"external\">建议</a>来解决这个问题, 但是这样做代码可能追踪更加困难相比简单的定义它们 )</p>\n<h2 id=\"代码生成\"><a href=\"#代码生成\" class=\"headerlink\" title=\"代码生成\"></a>代码生成</h2><p>一件重要Dagger2的方面是, 这个库为标注了<code>@Component</code>的接口类生成代码, 你可以使用前缀为<code>@Dagger</code>(i.e. DaggerTwitterApiComponent.java)的类, 它将负责实例化我们的依赖图谱中的一个实例, 并且用它执行<code>@Inject</code>注解字段的注入工作. 请看(setup guide)[<a href=\"https://github.com/codepath/android_guides/wiki/Dependency-Injection-with-Dagger-2#setup\" target=\"_blank\" rel=\"external\">https://github.com/codepath/android_guides/wiki/Dependency-Injection-with-Dagger-2#setup</a>].</p>\n<h2 id=\"实例化组件\"><a href=\"#实例化组件\" class=\"headerlink\" title=\"实例化组件\"></a>实例化组件</h2><p>我们应该在<code>Application</code>的类中做所有工作, 因为这些实例在整个应用程序的生命周期中仅仅被声明一次</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> NetComponent mNetComponent;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Dagger%COMPONENT_NAME%</span></div><div class=\"line\">        mNetComponent = DaggerNetComponent.builder()</div><div class=\"line\">                <span class=\"comment\">// list of modules that are part of this component need to be created here too</span></div><div class=\"line\">                .appModule(<span class=\"keyword\">new</span> AppModule(<span class=\"keyword\">this</span>)) <span class=\"comment\">// This also corresponds to the name of your module: %component_name%Module</span></div><div class=\"line\">                .netModule(<span class=\"keyword\">new</span> NetModule(<span class=\"string\">\"https://api.github.com\"</span>))</div><div class=\"line\">                .build();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// If a Dagger 2 component does not have any constructor arguments for any of its modules,</span></div><div class=\"line\">        <span class=\"comment\">// then we can use .create() as a shortcut instead:</span></div><div class=\"line\">        <span class=\"comment\">//  mNetComponent = com.codepath.dagger.components.DaggerNetComponent.create();</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> NetComponent <span class=\"title\">getNetComponent</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> mNetComponent;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果不能没有Dagger component组件的引用, 你要确保重构项目(在AndroidStudio中, select Build &gt; Rebuild Project)</p>\n<p>因为我们覆写了默认的<code>Application</code>类, 我们同样修改应用程序<code>name</code>为<code>MyApp</code>, 这样, 你的应用程序将使用这个Applicaiton 类来处理最初的实例. </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;application</div><div class=\"line\">      android:allowBackup=<span class=\"string\">\"true\"</span></div><div class=\"line\">      android:name=<span class=\"string\">\".MyApp\"</span>&gt;</div></pre></td></tr></table></figure>\n<p>在我们Activity的内部, 我们只需要调用<code>inject()</code>方法就可以简单的访问这些组件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@Inject</span> OkHttpClient mOkHttpClient;</div><div class=\"line\">  <span class=\"meta\">@Inject</span> SharedPreferences sharedPreferences;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstance)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// assign singleton instances to fields</span></div><div class=\"line\">        <span class=\"comment\">// We need to cast to `MyApp` in order to get the right method</span></div><div class=\"line\">        ((MyApp) getApplication()).getNetComponent().inject(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"限制类型\"><a href=\"#限制类型\" class=\"headerlink\" title=\"限制类型\"></a>限制类型</h2><p><img src=\"https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_qualifiers.png\" alt=\"Qualified types\"></p>\n<p>如果我们需要同一返回类型的两个不同对象, 我们可以使用<code>@Named</code>限定注解, 你需要在你提供单例的地方(<code>@Provides</code> annotation)和注入它们的地方(<code>@Inject</code> annotations)同时声明它们:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Provides</span> <span class=\"meta\">@Named</span>(<span class=\"string\">\"cached\"</span>)</div><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"function\">OkHttpClient <span class=\"title\">provideOkHttpClient</span><span class=\"params\">(Cache cache)</span> </span>&#123;</div><div class=\"line\">    OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient();</div><div class=\"line\">    client.setCache(cache);</div><div class=\"line\">    <span class=\"keyword\">return</span> client;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Provides</span> <span class=\"meta\">@Named</span>(<span class=\"string\">\"non_cached\"</span>) <span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"function\">OkHttpClient <span class=\"title\">provideOkHttpClient</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient();</div><div class=\"line\">    <span class=\"keyword\">return</span> client;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当你注入这些单例的时候, 你同样需要<code>@Named</code>注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Inject</span> <span class=\"meta\">@Named</span>(<span class=\"string\">\"cached\"</span>) OkHttpClient client;</div><div class=\"line\"><span class=\"meta\">@Inject</span> <span class=\"meta\">@Named</span>(<span class=\"string\">\"non_cached\"</span>) OkHttpClient client2;</div></pre></td></tr></table></figure>\n<p><code>@Named</code>是Dagger预先定义的限定注解, 你可以很好的创建你自己的限定注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Qualifier</span></div><div class=\"line\"><span class=\"meta\">@Documented</span></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RUNTIME)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> DefaultPreferences &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p><img src=\"https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_scopes.png\" alt=\"Scopes\"></p>\n<p>在Dagger2, 你可以声明Component组件通过声明自定义的范围如何封装. 举例来说, 你可以创建一个仅仅在activity或者fragment生命周期运行期间的作用域. 你可以创建只映射到用户身份验证会话的作用域. </p>\n<p>利用作用域允许我们要么创建依赖组件要么创建子组件, 上面的例子表明我们所使用的<code>@Singleton</code>注解是伴随应用程序的整个生命周期, 我们同样依赖于一个主要的Dagger component组件.</p>\n<p>如果我们希望拥有一个并不需要常驻内存中的多个Component组件(i.e. 依赖于activity或者fragment生命周期, 甚至依赖于用户的登录状态的Component组件), 我们可以创建相关的组件活着子组件, 在任何一种情况下, 都会为你封装代码提供一种方式. 我们将在下文中看到如何同时使用它们. </p>\n<p>这里有使用这些方法的几点考虑:</p>\n<ul>\n<li><strong>相关的组件要求父组件明确列出哪些依赖可以注入, 而子组件没有</strong> 对于父组件来说, 你需要通过指明类型和方法, 以想子组件暴露它们</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// parent component</span></div><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules=&#123;AppModule.class, NetModule.class&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">NetComponent</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// remove injection methods if downstream modules will perform injection</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// downstream components need these exposed</span></div><div class=\"line\">    <span class=\"comment\">// the method name does not matter, only the return type</span></div><div class=\"line\">    <span class=\"function\">Retrofit <span class=\"title\">retrofit</span><span class=\"params\">()</span></span>; </div><div class=\"line\">    <span class=\"function\">OkHttpClient <span class=\"title\">okHttpClient</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\">SharedPreferences <span class=\"title\">sharedPreferences</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果你忘记添加这行代码, 你将要看到一个关于注入目标丢失的错误. 类似于private/public变量如何去管理那样, 使用父component组件允许更明确的控制以及更好的封装, 但是使用子component组件使得依赖注入在花费的代价上更为简单</p>\n<ul>\n<li><strong>两个相互依赖的组件不能共享同一范围.</strong> 举例来说, 两个组件不能同时使用 <code>@Singleton</code>注解 标注作用域, 这个限制是有<a href=\"https://github.com/google/dagger/issues/107#issuecomment-71073298\" target=\"_blank\" rel=\"external\">这里</a>描述的原因导致的, 相关的组件需要定义它们自己的范围.</li>\n</ul>\n<h2 id=\"依赖组件\"><a href=\"#依赖组件\" class=\"headerlink\" title=\"依赖组件\"></a>依赖组件</h2><p><img src=\"https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_dependency.png\" alt=\"Dependent Components\"></p>\n<p>举例来说, 如果我们想要使用 用户会话的整个生命周期<br>我们可以声明我们自己的 <code>@UserScope</code>接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.inject.Scope;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Scope</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> UserScope &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后, 我们声明它的父组件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules=&#123;AppModule.class, NetModule.class&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">NetComponent</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// downstream components need these exposed with the return type</span></div><div class=\"line\">    <span class=\"comment\">// method name does not really matter</span></div><div class=\"line\">    <span class=\"function\">Retrofit <span class=\"title\">retrofit</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们可以接着声明它的子组件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@UserScope</span> <span class=\"comment\">// using the previously defined scope, note that @Singleton will not work</span></div><div class=\"line\"><span class=\"meta\">@Component</span>(dependencies = NetComponent.class, modules = GitHubModule.class)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">GitHubComponent</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">(MainActivity activity)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们假设下面的Github模块简单的返回一个Github Api的接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Module</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GitHubModule</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">GitHubApiInterface</span> </span>&#123;</div><div class=\"line\">      <span class=\"meta\">@GET</span>(<span class=\"string\">\"/org/&#123;orgName&#125;/repos\"</span>)</div><div class=\"line\">      Call&lt;ArrayList&lt;Repository&gt;&gt; getRepository(<span class=\"meta\">@Path</span>(<span class=\"string\">\"orgName\"</span>) String orgName);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@UserScope</span> <span class=\"comment\">// needs to be consistent with the component scope</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> GitHubApiInterface <span class=\"title\">providesGitHubInterface</span><span class=\"params\">(Retrofit retrofit)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> retrofit.create(GitHubApiInterface.class);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>为了<code>GitHubModule.java</code>获得<code>Retrofit</code>实例的引用, 我们需要在调用它之前的组件中明确定义它们, 如果说在它之后执行注入, 它们应该在之后的组件中移除它们:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules=&#123;AppModule.class, NetModule.class&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">NetComponent</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// remove injection methods if downstream modules will perform injection</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// downstream components need these exposed</span></div><div class=\"line\">    <span class=\"function\">Retrofit <span class=\"title\">retrofit</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\">OkHttpClient <span class=\"title\">okHttpClient</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\">SharedPreferences <span class=\"title\">sharedPreferences</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最后一步是使用<code>GitHubComponent</code> 执行实例化, 这个时候, 我们首先需要构建<code>NetComponent</code>, 并且在<code>DaggerGitHubComponent</code> builder的构造函数中传递它: </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">NetComponent mNetComponent = DaggerNetComponent.builder()</div><div class=\"line\">                .appModule(<span class=\"keyword\">new</span> AppModule(<span class=\"keyword\">this</span>))</div><div class=\"line\">                .netModule(<span class=\"keyword\">new</span> NetModule(<span class=\"string\">\"https://api.github.com\"</span>))</div><div class=\"line\">                .build();</div><div class=\"line\"></div><div class=\"line\">GitHubComponent gitHubComponent = DaggerGitHubComponent.builder()</div><div class=\"line\">                .netComponent(mNetComponent)</div><div class=\"line\">                .gitHubModule(<span class=\"keyword\">new</span> GitHubModule())</div><div class=\"line\">                .build();</div></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/codepath/dagger2-example\" target=\"_blank\" rel=\"external\">this example code </a></p>\n<p>子组件</p>\n<p><img src=\"https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_subcomponent.png\" alt=\"Subcomponents\"></p>\n<p>使用子组件是扩展组件的对象图的另外一种方式, 就像依赖的组件那样, 子组件有它们自己的生命周期并且当所有子组件的引用都消失的时候是可以被垃圾收集的, 并具有相同的范围限制。在使用这种方法的一个优点是，不需要定义所有下游组件. </p>\n<p>另一个主要的不同之处就是子组件只需要在父组件中声明. </p>\n<p>这里有一个为Activity使用子组件的例子. 我们使用自定义的范围和<code>@Subcomponent</code>注解标注一个类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@MyActivityScope</span></div><div class=\"line\"><span class=\"meta\">@Subcomponent</span>(modules=&#123; MyActivityModule.class &#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyActivitySubComponent</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Named</span>(<span class=\"string\">\"my_list\"</span>) <span class=\"function\">ArrayAdapter <span class=\"title\">myListAdapter</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>moudle模块使用下面声明</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Module</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyActivityModule</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> MyActivity activity;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// must be instantiated with an activity</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyActivityModule</span><span class=\"params\">(MyActivity activity)</span> </span>&#123; <span class=\"keyword\">this</span>.activity = activity; &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span> <span class=\"meta\">@MyActivityScope</span> <span class=\"meta\">@Named</span>(<span class=\"string\">\"my_list\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ArrayAdapter <span class=\"title\">providesMyListAdapter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayAdapter&lt;String&gt;(activity, android.R.layout.my_list);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最后, 在父组件中, 我们声明一个工厂方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules=&#123; ... &#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyApplicationComponent</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// injection targets here</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// factory method to instantiate the subcomponent defined here (passing in the module instance)</span></div><div class=\"line\">    <span class=\"function\">MyActivitySubComponent <span class=\"title\">newMyActivitySubcomponent</span><span class=\"params\">(MyActivityModule activityModule)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在上面的例子中, <code>newMyActivitySubcomponent()</code>每次被调用的时候, 一个新的子组件的实例都会被创建, 使用子模块moudle注入到一个activity</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules=&#123; ... &#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyApplicationComponent</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// injection targets here</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// factory method to instantiate the subcomponent defined here (passing in the module instance)</span></div><div class=\"line\">    <span class=\"function\">MyActivitySubComponent <span class=\"title\">newMyActivitySubcomponent</span><span class=\"params\">(MyActivityModule activityModule)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>子组件创建</p>\n<p><img src=\"https://raw.githubusercontent.com/codepath/android_guides/master/images/subcomponent_builders.png\" alt=\"Available starting in v2.7\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>很多Android Apps通常依赖于其他依赖库的实例化对象, 举例来说,  一个Twitter客户端可能使用类似<a href=\"https://github.com/square/retrofit\" target=\"_blank\" rel=\"external\">Retrofit</a>的网络依赖库来进行构建, 要使用这个库, 你需要添加解析的库，比如说<a href=\"https://github.com/google/gson\" target=\"_blank\" rel=\"external\">Gson</a>.  此外,  那些实现认证或者缓存的类可能需要访问shared preferences和其他公共的存储单元，需要首先实例化他们并且创建固有的依赖链.     </p>","more":"<p>Dagger2 为你分析这些依赖库, 并且生成代码以帮助把他们连接在一起, 虽然还有其他的Java 依赖注入库, 但是他们的大多数在依赖XML的时候有很多限制, 在运行期间需要验证依赖关系的问题, 或者在启动期间导致性能上的损耗,  Dagger 2纯粹依赖于使用Java注释处理器和编译时检查来分析和验证依赖性. 它被认为是迄今为止效率最高的依赖注入框架之一. </p>\n<h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><p>这里有使用Dagger2 的一些优点</p>\n<ul>\n<li><strong>简化对共享实例的访问.</strong> 举例来说, 正如<a href=\"https://github.com/JakeWharton/butterknife\" target=\"_blank\" rel=\"external\">ButterKnife</a>声明对View, 事件处理, 资源的引用更为简单那种, Dagger2为获取共享实例的饮用提供了一种简单的方式. 比如,一旦我们在Dagger中声明类似<code>MyTwitterApiClient</code>或者<code>SharedPreferences</code>的单例的引用, 我们可以简单的使用 <code>@Inject</code>注解来声明字段</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\">   <span class=\"meta\">@Inject</span> MyTwitterApiClient mTwitterApiClient;</div><div class=\"line\">   <span class=\"meta\">@Inject</span> SharedPreferences sharedPreferences;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstance)</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">// assign singleton instances to fields</span></div><div class=\"line\">       InjectorClass.inject(<span class=\"keyword\">this</span>);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>更容易配制复杂的依赖.</strong>  那些你经常创建的对象有一个隐式的过程. Dagger2 遍历依赖图表并且生成以便于理解且追踪代码, 同时把你从编写大量的模版代码的工作中解救出来, 你正常的需要手工编写代码以获取引用并将他们作为依赖传递给其他对象. 它也有助于简化重构, 因为以可以专注于构建哪些模块而不是关注于他们被创建的顺序. </p>\n</li>\n<li><p><strong>单元和集成变得更为轻松.</strong> 因为依赖图表是由我们自己创建的, 我们能够简单的切换模块，作出网络响应并且模拟这种行为 </p>\n</li>\n<li><p><strong>实例作用域.</strong> 你不仅更为简单的管理整个应用程序的生命周期, 你还可以利用Dagger2 声明更为简短的生命周期的实例(比如, 绑定用户的seesion, Activity 的生命周期, etc.). </p>\n</li>\n</ul>\n<h2 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h2><p>Android studio通常情况下不会允许你连接到生成Dagger2的代码作为合法的类,  因为他们通常情况下不会添加到资源路径, 但是通过添加<code>android-apt</code> 插件能够添加这些文件到IDE路径，并且使你对这些文件有更多的可见性</p>\n<p>由于Android Gradle plugin 2.2注释处理是内置的, android-apt并不被受待见. <code>android-apt</code>不支持新的 <code>jack</code> </p>\n<p>在你的<code>app/build.gradle</code> 文件中添加以下3行的申请说明</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">    <span class=\"comment\">// apt command comes from the android-apt plugin</span></div><div class=\"line\">    apt <span class=\"string\">'com.google.dagger:dagger-compiler:2.8'</span></div><div class=\"line\">    compile <span class=\"string\">'com.google.dagger:dagger:2.8'</span></div><div class=\"line\">    provided <span class=\"string\">'javax.annotation:jsr250-api:1.0'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果你正在使用android gradle 2.3 插件, 你可以使用<code>annotationProcessor</code> 来代替apt-plugin:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">    <span class=\"comment\">// apt command comes from the android-apt plugin</span></div><div class=\"line\">    compile <span class=\"string\">\"com.google.dagger:dagger:2.9\"</span></div><div class=\"line\">    annotationProcessor <span class=\"string\">\"com.google.dagger:dagger-compiler:2.9\"</span></div><div class=\"line\">    provided <span class=\"string\">'javax.annotation:jsr250-api:1.0'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>要注意的是<code>provided</code>关键字仅仅在编译期间被用来作为依赖关系, Dagger生成用于创建源代码中定义的类的依赖图的代码. 这些类在编译期间被添加到IDE类路径中. <code>annotationProcessor</code>关键字被Android gradle插件所识别并且不会把这些类他们添加到类路径中, 它们仅仅被用来注释处理, 以防止别人意外的引用他们. </p>\n<h2 id=\"创建单例\"><a href=\"#创建单例\" class=\"headerlink\" title=\"创建单例\"></a>创建单例</h2><p><img src=\"https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_general.png\" alt=\"Creatint singletons\"></p>\n<p>很简单的例子表明如何使用Dagger2 集中你所有创建的单例.<br>类似于下面这样, 假设在你的Twitter客户端中你从没有使用过任何类型的的依赖注入框架写代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Enable caching for OkHttp</span></div><div class=\"line\"><span class=\"keyword\">int</span> cacheSize = <span class=\"number\">10</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>; <span class=\"comment\">// 10 MiB</span></div><div class=\"line\">Cache cache = <span class=\"keyword\">new</span> Cache(getApplication().getCacheDir(), cacheSize);</div><div class=\"line\">client.setCache(cache);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Used for caching authentication tokens</span></div><div class=\"line\">SharedPreferences sharedPrefeences = PreferenceManager.getDefaultSharedPreferences(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Instantiate Gson</span></div><div class=\"line\">Gson gson = <span class=\"keyword\">new</span> GsonBuilder().create();</div><div class=\"line\">GsonConverterFactory converterFactory = GsonConverterFactory.create(gson);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Build Retrofit</span></div><div class=\"line\">Retrofit retrofit = <span class=\"keyword\">new</span> Retrofit.Builder()</div><div class=\"line\">                                .baseUrl(<span class=\"string\">\"https://api.github.com\"</span>)</div><div class=\"line\">                                .addConverterFactory(converterFactory)</div><div class=\"line\">                                .client(client)  <span class=\"comment\">// custom client</span></div><div class=\"line\">                                .build();</div></pre></td></tr></table></figure>\n<h2 id=\"声明你的单例\"><a href=\"#声明你的单例\" class=\"headerlink\" title=\"声明你的单例\"></a>声明你的单例</h2><p>你需要通过创建一个Dagger2 moudle来明确哪些对象应该被包含作为依赖链的一部分. 举例来说, 如果我们希望使一个单独的<code>Retrofit</code>单例绑定到整个应用程序的生命周期,  并且对我们所有的activity和fragment都是可用的, 我们首先要让Dagger 知道可以提供一个<code>Retrofit</code>单例</p>\n<p>因为我们希望设置caching, 我们需要一份Application Context上下文环境. 我们的第一个Dagger模块<code>AppModule.java</code>将被用来提供此引用, 我们还需要声明带有<code>@Provides</code>注解的方法来告诉Dagger这个方法是返回类型为<code>Application</code>的构造器: </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Module</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppModule</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    Application mApplication;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AppModule</span><span class=\"params\">(Application application)</span> </span>&#123;</div><div class=\"line\">        mApplication = application;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@Singleton</span></div><div class=\"line\">    <span class=\"function\">Application <span class=\"title\">providesApplication</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mApplication;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们创建一个名为<code>NetModule.java</code>并且使用<code>@Module</code>标注的类来告诉Dagger在可用方法的范围内寻找来作为实例的提供者</p>\n<p><code>@Singleton</code>注解同样告诉Dagger编译器这个实例在整个应用生命周期中应该仅仅被创建一次, 在以下的例子中, 我们指定<code>SharedPreferences</code> <code>Gson</code> <code>Cache</code> <code>OkHttpClient</code> <code>Retrofit</code> 作为可以用作依赖列表一部分的返回类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Module</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NetModule</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    String mBaseUrl;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Constructor needs one parameter to instantiate.  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NetModule</span><span class=\"params\">(String baseUrl)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.mBaseUrl = baseUrl;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Dagger will only look for methods annotated with @Provides</span></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@Singleton</span></div><div class=\"line\">    <span class=\"comment\">// Application reference must come from AppModule.class</span></div><div class=\"line\">    <span class=\"function\">SharedPreferences <span class=\"title\">providesSharedPreferences</span><span class=\"params\">(Application application)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> PreferenceManager.getDefaultSharedPreferences(application);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@Singleton</span></div><div class=\"line\">    <span class=\"function\">Cache <span class=\"title\">provideOkHttpCache</span><span class=\"params\">(Application application)</span> </span>&#123; </div><div class=\"line\">        <span class=\"keyword\">int</span> cacheSize = <span class=\"number\">10</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>; <span class=\"comment\">// 10 MiB</span></div><div class=\"line\">        Cache cache = <span class=\"keyword\">new</span> Cache(application.getCacheDir(), cacheSize);</div><div class=\"line\">        <span class=\"keyword\">return</span> cache;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Provides</span> </div><div class=\"line\">   <span class=\"meta\">@Singleton</span></div><div class=\"line\">   <span class=\"function\">Gson <span class=\"title\">provideGson</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">       GsonBuilder gsonBuilder = <span class=\"keyword\">new</span> GsonBuilder();</div><div class=\"line\">       gsonBuilder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES);</div><div class=\"line\">       <span class=\"keyword\">return</span> gsonBuilder.create();</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Provides</span></div><div class=\"line\">   <span class=\"meta\">@Singleton</span></div><div class=\"line\">   <span class=\"function\">OkHttpClient <span class=\"title\">provideOkHttpClient</span><span class=\"params\">(Cache cache)</span> </span>&#123;</div><div class=\"line\">      OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient();</div><div class=\"line\">      client.setCache(cache);</div><div class=\"line\">      <span class=\"keyword\">return</span> client;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Provides</span></div><div class=\"line\">   <span class=\"meta\">@Singleton</span></div><div class=\"line\">   <span class=\"function\">Retrofit <span class=\"title\">provideRetrofit</span><span class=\"params\">(Gson gson, OkHttpClient okHttpClient)</span> </span>&#123;</div><div class=\"line\">      Retrofit retrofit = <span class=\"keyword\">new</span> Retrofit.Builder()</div><div class=\"line\">                .addConverterFactory(GsonConverterFactory.create(gson))</div><div class=\"line\">                .baseUrl(mBaseUrl)</div><div class=\"line\">                .client(okHttpClient)</div><div class=\"line\">                .build();</div><div class=\"line\">        <span class=\"keyword\">return</span> retrofit;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意这个方法名 (i.e. provideGson(), provideRetrofit(), etc)可以起任何名. 使用<code>@Provides</code>注解的返回值类型被用来将此实例与其他任何相同类型的moudle相关联, <code>@Singleton</code>注解被用来像Dagger描述在整个应用程序生命周期期间仅仅初始化一次</p>\n<p><code>Retrofit</code>的实例的同时依赖于<code>Gson</code>和<code>OkHttpClient</code>实例, 所以我们可以在同一个类中声明另外一个方法以获取这两个类型. 在这个方法中<code>@Provides</code>注解和这两个参数将会使得Dagger 意识到这里有<code>Gson</code>和<code>OkHttpClient</code>的依赖以创建<code>Retrofit</code>的实例</p>\n<h2 id=\"声明注入目标\"><a href=\"#声明注入目标\" class=\"headerlink\" title=\"声明注入目标\"></a>声明注入目标</h2><p>Dagger为你的activitys, services, 或fragments提供了一种简单的通过使用<code>@Inject</code>注解注入字段并且调用<code>inject()</code>方法来分配引用, 调用<code>inject()</code>方法将会使Dagger2 在依赖图谱中尝试寻找一个相匹配的返回类型来定位单例. 如果找到, 它将分配各自对应字段的引用. 比如, 在下面的例子中, 它会尝试寻找返回类型为<code>MyTwitterApiClient</code>和<code>SharedPreferences</code>的提供器(provider)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\">   <span class=\"meta\">@Inject</span> MyTwitterApiClient mTwitterApiClient;</div><div class=\"line\">   <span class=\"meta\">@Inject</span> SharedPreferences sharedPreferences;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstance)</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">// assign singleton instances to fields</span></div><div class=\"line\">       InjectorClass.inject(<span class=\"keyword\">this</span>);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>Dagger2 中使用的注入器类被称为 component组件, 它为我们的activitys, services, 或则fragments分配引用以连接我们之前声明的单例, 我们同样需要一个<code>@Component</code>注解声明的类, 可以添加的activitys, services, 或则fragments应该在这个类中单独的使用<code>inject()</code>方法声明:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules=&#123;AppModule.class, NetModule.class&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">NetComponent</span> </span>&#123;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">(MainActivity activity)</span></span>;</div><div class=\"line\">   <span class=\"comment\">// void inject(MyFragment fragment);</span></div><div class=\"line\">   <span class=\"comment\">// void inject(MyService service);</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意这些类并不足以作为注入的目标, Dagger2 依赖相匹配的类, 你必须明确指明那个类应该被声明在内, (这里有一些<a href=\"https://blog.gouline.net/dagger-2-even-sharper-less-square-b52101863542#.vgmua0fkm\" target=\"_blank\" rel=\"external\">建议</a>来解决这个问题, 但是这样做代码可能追踪更加困难相比简单的定义它们 )</p>\n<h2 id=\"代码生成\"><a href=\"#代码生成\" class=\"headerlink\" title=\"代码生成\"></a>代码生成</h2><p>一件重要Dagger2的方面是, 这个库为标注了<code>@Component</code>的接口类生成代码, 你可以使用前缀为<code>@Dagger</code>(i.e. DaggerTwitterApiComponent.java)的类, 它将负责实例化我们的依赖图谱中的一个实例, 并且用它执行<code>@Inject</code>注解字段的注入工作. 请看(setup guide)[<a href=\"https://github.com/codepath/android_guides/wiki/Dependency-Injection-with-Dagger-2#setup\" target=\"_blank\" rel=\"external\">https://github.com/codepath/android_guides/wiki/Dependency-Injection-with-Dagger-2#setup</a>].</p>\n<h2 id=\"实例化组件\"><a href=\"#实例化组件\" class=\"headerlink\" title=\"实例化组件\"></a>实例化组件</h2><p>我们应该在<code>Application</code>的类中做所有工作, 因为这些实例在整个应用程序的生命周期中仅仅被声明一次</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> NetComponent mNetComponent;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Dagger%COMPONENT_NAME%</span></div><div class=\"line\">        mNetComponent = DaggerNetComponent.builder()</div><div class=\"line\">                <span class=\"comment\">// list of modules that are part of this component need to be created here too</span></div><div class=\"line\">                .appModule(<span class=\"keyword\">new</span> AppModule(<span class=\"keyword\">this</span>)) <span class=\"comment\">// This also corresponds to the name of your module: %component_name%Module</span></div><div class=\"line\">                .netModule(<span class=\"keyword\">new</span> NetModule(<span class=\"string\">\"https://api.github.com\"</span>))</div><div class=\"line\">                .build();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// If a Dagger 2 component does not have any constructor arguments for any of its modules,</span></div><div class=\"line\">        <span class=\"comment\">// then we can use .create() as a shortcut instead:</span></div><div class=\"line\">        <span class=\"comment\">//  mNetComponent = com.codepath.dagger.components.DaggerNetComponent.create();</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> NetComponent <span class=\"title\">getNetComponent</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> mNetComponent;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果不能没有Dagger component组件的引用, 你要确保重构项目(在AndroidStudio中, select Build &gt; Rebuild Project)</p>\n<p>因为我们覆写了默认的<code>Application</code>类, 我们同样修改应用程序<code>name</code>为<code>MyApp</code>, 这样, 你的应用程序将使用这个Applicaiton 类来处理最初的实例. </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;application</div><div class=\"line\">      android:allowBackup=<span class=\"string\">\"true\"</span></div><div class=\"line\">      android:name=<span class=\"string\">\".MyApp\"</span>&gt;</div></pre></td></tr></table></figure>\n<p>在我们Activity的内部, 我们只需要调用<code>inject()</code>方法就可以简单的访问这些组件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@Inject</span> OkHttpClient mOkHttpClient;</div><div class=\"line\">  <span class=\"meta\">@Inject</span> SharedPreferences sharedPreferences;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstance)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// assign singleton instances to fields</span></div><div class=\"line\">        <span class=\"comment\">// We need to cast to `MyApp` in order to get the right method</span></div><div class=\"line\">        ((MyApp) getApplication()).getNetComponent().inject(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"限制类型\"><a href=\"#限制类型\" class=\"headerlink\" title=\"限制类型\"></a>限制类型</h2><p><img src=\"https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_qualifiers.png\" alt=\"Qualified types\"></p>\n<p>如果我们需要同一返回类型的两个不同对象, 我们可以使用<code>@Named</code>限定注解, 你需要在你提供单例的地方(<code>@Provides</code> annotation)和注入它们的地方(<code>@Inject</code> annotations)同时声明它们:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Provides</span> <span class=\"meta\">@Named</span>(<span class=\"string\">\"cached\"</span>)</div><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"function\">OkHttpClient <span class=\"title\">provideOkHttpClient</span><span class=\"params\">(Cache cache)</span> </span>&#123;</div><div class=\"line\">    OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient();</div><div class=\"line\">    client.setCache(cache);</div><div class=\"line\">    <span class=\"keyword\">return</span> client;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Provides</span> <span class=\"meta\">@Named</span>(<span class=\"string\">\"non_cached\"</span>) <span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"function\">OkHttpClient <span class=\"title\">provideOkHttpClient</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient();</div><div class=\"line\">    <span class=\"keyword\">return</span> client;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当你注入这些单例的时候, 你同样需要<code>@Named</code>注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Inject</span> <span class=\"meta\">@Named</span>(<span class=\"string\">\"cached\"</span>) OkHttpClient client;</div><div class=\"line\"><span class=\"meta\">@Inject</span> <span class=\"meta\">@Named</span>(<span class=\"string\">\"non_cached\"</span>) OkHttpClient client2;</div></pre></td></tr></table></figure>\n<p><code>@Named</code>是Dagger预先定义的限定注解, 你可以很好的创建你自己的限定注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Qualifier</span></div><div class=\"line\"><span class=\"meta\">@Documented</span></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RUNTIME)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> DefaultPreferences &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p><img src=\"https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_scopes.png\" alt=\"Scopes\"></p>\n<p>在Dagger2, 你可以声明Component组件通过声明自定义的范围如何封装. 举例来说, 你可以创建一个仅仅在activity或者fragment生命周期运行期间的作用域. 你可以创建只映射到用户身份验证会话的作用域. </p>\n<p>利用作用域允许我们要么创建依赖组件要么创建子组件, 上面的例子表明我们所使用的<code>@Singleton</code>注解是伴随应用程序的整个生命周期, 我们同样依赖于一个主要的Dagger component组件.</p>\n<p>如果我们希望拥有一个并不需要常驻内存中的多个Component组件(i.e. 依赖于activity或者fragment生命周期, 甚至依赖于用户的登录状态的Component组件), 我们可以创建相关的组件活着子组件, 在任何一种情况下, 都会为你封装代码提供一种方式. 我们将在下文中看到如何同时使用它们. </p>\n<p>这里有使用这些方法的几点考虑:</p>\n<ul>\n<li><strong>相关的组件要求父组件明确列出哪些依赖可以注入, 而子组件没有</strong> 对于父组件来说, 你需要通过指明类型和方法, 以想子组件暴露它们</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// parent component</span></div><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules=&#123;AppModule.class, NetModule.class&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">NetComponent</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// remove injection methods if downstream modules will perform injection</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// downstream components need these exposed</span></div><div class=\"line\">    <span class=\"comment\">// the method name does not matter, only the return type</span></div><div class=\"line\">    <span class=\"function\">Retrofit <span class=\"title\">retrofit</span><span class=\"params\">()</span></span>; </div><div class=\"line\">    <span class=\"function\">OkHttpClient <span class=\"title\">okHttpClient</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\">SharedPreferences <span class=\"title\">sharedPreferences</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果你忘记添加这行代码, 你将要看到一个关于注入目标丢失的错误. 类似于private/public变量如何去管理那样, 使用父component组件允许更明确的控制以及更好的封装, 但是使用子component组件使得依赖注入在花费的代价上更为简单</p>\n<ul>\n<li><strong>两个相互依赖的组件不能共享同一范围.</strong> 举例来说, 两个组件不能同时使用 <code>@Singleton</code>注解 标注作用域, 这个限制是有<a href=\"https://github.com/google/dagger/issues/107#issuecomment-71073298\" target=\"_blank\" rel=\"external\">这里</a>描述的原因导致的, 相关的组件需要定义它们自己的范围.</li>\n</ul>\n<h2 id=\"依赖组件\"><a href=\"#依赖组件\" class=\"headerlink\" title=\"依赖组件\"></a>依赖组件</h2><p><img src=\"https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_dependency.png\" alt=\"Dependent Components\"></p>\n<p>举例来说, 如果我们想要使用 用户会话的整个生命周期<br>我们可以声明我们自己的 <code>@UserScope</code>接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.inject.Scope;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Scope</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> UserScope &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后, 我们声明它的父组件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules=&#123;AppModule.class, NetModule.class&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">NetComponent</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// downstream components need these exposed with the return type</span></div><div class=\"line\">    <span class=\"comment\">// method name does not really matter</span></div><div class=\"line\">    <span class=\"function\">Retrofit <span class=\"title\">retrofit</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们可以接着声明它的子组件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@UserScope</span> <span class=\"comment\">// using the previously defined scope, note that @Singleton will not work</span></div><div class=\"line\"><span class=\"meta\">@Component</span>(dependencies = NetComponent.class, modules = GitHubModule.class)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">GitHubComponent</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">(MainActivity activity)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们假设下面的Github模块简单的返回一个Github Api的接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Module</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GitHubModule</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">GitHubApiInterface</span> </span>&#123;</div><div class=\"line\">      <span class=\"meta\">@GET</span>(<span class=\"string\">\"/org/&#123;orgName&#125;/repos\"</span>)</div><div class=\"line\">      Call&lt;ArrayList&lt;Repository&gt;&gt; getRepository(<span class=\"meta\">@Path</span>(<span class=\"string\">\"orgName\"</span>) String orgName);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@UserScope</span> <span class=\"comment\">// needs to be consistent with the component scope</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> GitHubApiInterface <span class=\"title\">providesGitHubInterface</span><span class=\"params\">(Retrofit retrofit)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> retrofit.create(GitHubApiInterface.class);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>为了<code>GitHubModule.java</code>获得<code>Retrofit</code>实例的引用, 我们需要在调用它之前的组件中明确定义它们, 如果说在它之后执行注入, 它们应该在之后的组件中移除它们:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules=&#123;AppModule.class, NetModule.class&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">NetComponent</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// remove injection methods if downstream modules will perform injection</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// downstream components need these exposed</span></div><div class=\"line\">    <span class=\"function\">Retrofit <span class=\"title\">retrofit</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\">OkHttpClient <span class=\"title\">okHttpClient</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\">SharedPreferences <span class=\"title\">sharedPreferences</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最后一步是使用<code>GitHubComponent</code> 执行实例化, 这个时候, 我们首先需要构建<code>NetComponent</code>, 并且在<code>DaggerGitHubComponent</code> builder的构造函数中传递它: </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">NetComponent mNetComponent = DaggerNetComponent.builder()</div><div class=\"line\">                .appModule(<span class=\"keyword\">new</span> AppModule(<span class=\"keyword\">this</span>))</div><div class=\"line\">                .netModule(<span class=\"keyword\">new</span> NetModule(<span class=\"string\">\"https://api.github.com\"</span>))</div><div class=\"line\">                .build();</div><div class=\"line\"></div><div class=\"line\">GitHubComponent gitHubComponent = DaggerGitHubComponent.builder()</div><div class=\"line\">                .netComponent(mNetComponent)</div><div class=\"line\">                .gitHubModule(<span class=\"keyword\">new</span> GitHubModule())</div><div class=\"line\">                .build();</div></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/codepath/dagger2-example\" target=\"_blank\" rel=\"external\">this example code </a></p>\n<p>子组件</p>\n<p><img src=\"https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_subcomponent.png\" alt=\"Subcomponents\"></p>\n<p>使用子组件是扩展组件的对象图的另外一种方式, 就像依赖的组件那样, 子组件有它们自己的生命周期并且当所有子组件的引用都消失的时候是可以被垃圾收集的, 并具有相同的范围限制。在使用这种方法的一个优点是，不需要定义所有下游组件. </p>\n<p>另一个主要的不同之处就是子组件只需要在父组件中声明. </p>\n<p>这里有一个为Activity使用子组件的例子. 我们使用自定义的范围和<code>@Subcomponent</code>注解标注一个类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@MyActivityScope</span></div><div class=\"line\"><span class=\"meta\">@Subcomponent</span>(modules=&#123; MyActivityModule.class &#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyActivitySubComponent</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Named</span>(<span class=\"string\">\"my_list\"</span>) <span class=\"function\">ArrayAdapter <span class=\"title\">myListAdapter</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>moudle模块使用下面声明</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Module</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyActivityModule</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> MyActivity activity;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// must be instantiated with an activity</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyActivityModule</span><span class=\"params\">(MyActivity activity)</span> </span>&#123; <span class=\"keyword\">this</span>.activity = activity; &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span> <span class=\"meta\">@MyActivityScope</span> <span class=\"meta\">@Named</span>(<span class=\"string\">\"my_list\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ArrayAdapter <span class=\"title\">providesMyListAdapter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayAdapter&lt;String&gt;(activity, android.R.layout.my_list);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最后, 在父组件中, 我们声明一个工厂方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules=&#123; ... &#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyApplicationComponent</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// injection targets here</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// factory method to instantiate the subcomponent defined here (passing in the module instance)</span></div><div class=\"line\">    <span class=\"function\">MyActivitySubComponent <span class=\"title\">newMyActivitySubcomponent</span><span class=\"params\">(MyActivityModule activityModule)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在上面的例子中, <code>newMyActivitySubcomponent()</code>每次被调用的时候, 一个新的子组件的实例都会被创建, 使用子模块moudle注入到一个activity</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules=&#123; ... &#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyApplicationComponent</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// injection targets here</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// factory method to instantiate the subcomponent defined here (passing in the module instance)</span></div><div class=\"line\">    <span class=\"function\">MyActivitySubComponent <span class=\"title\">newMyActivitySubcomponent</span><span class=\"params\">(MyActivityModule activityModule)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>子组件创建</p>\n<p><img src=\"https://raw.githubusercontent.com/codepath/android_guides/master/images/subcomponent_builders.png\" alt=\"Available starting in v2.7\"></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj2fysnbm0000dc5jt3gc3xni","tag_id":"cj2fysnbs0002dc5j1xckxd47","_id":"cj2fysnc20009dc5jtvdze1xl"},{"post_id":"cj2fysnbm0000dc5jt3gc3xni","tag_id":"cj2fysnbz0006dc5jyi9t2cne","_id":"cj2fysnc2000adc5jfaq2aasp"},{"post_id":"cj2fysnbm0000dc5jt3gc3xni","tag_id":"cj2fysnc00007dc5jyneb5pzg","_id":"cj2fysnc3000cdc5j574a98h5"},{"post_id":"cj2fysnbq0001dc5jbdoteu94","tag_id":"cj2fysnc00008dc5jl1itsrf2","_id":"cj2fysnc4000hdc5johdcqfqj"},{"post_id":"cj2fysnbq0001dc5jbdoteu94","tag_id":"cj2fysnbs0002dc5j1xckxd47","_id":"cj2fysnc4000idc5jaksj27v4"},{"post_id":"cj2fysnbq0001dc5jbdoteu94","tag_id":"cj2fysnbz0006dc5jyi9t2cne","_id":"cj2fysnc5000kdc5jj3zgvjwr"},{"post_id":"cj2fysnbq0001dc5jbdoteu94","tag_id":"cj2fysnc00007dc5jyneb5pzg","_id":"cj2fysnc7000ldc5jg147i8x9"},{"post_id":"cj2fysnbq0001dc5jbdoteu94","tag_id":"cj2fysnc4000fdc5je8ptv7j3","_id":"cj2fysnc7000ndc5j41d9xvrk"},{"post_id":"cj2fysnbu0003dc5jh604uek3","tag_id":"cj2fysnc4000gdc5jyms1t91n","_id":"cj2fysnc7000pdc5j6fgre0n0"},{"post_id":"cj2fysnbu0003dc5jh604uek3","tag_id":"cj2fysnc5000jdc5ja5bweg0k","_id":"cj2fysnc8000qdc5jn3v760mm"},{"post_id":"cj2fysnbu0003dc5jh604uek3","tag_id":"cj2fysnc00007dc5jyneb5pzg","_id":"cj2fysnc8000rdc5jpho733f5"},{"post_id":"cj2fysnbz0005dc5j74ltipcp","tag_id":"cj2fysnc00007dc5jyneb5pzg","_id":"cj2fysnc8000sdc5jf39yldoc"}],"Tag":[{"name":"NDK","_id":"cj2fysnbs0002dc5j1xckxd47"},{"name":"JNI","_id":"cj2fysnbz0006dc5jyi9t2cne"},{"name":"Android","_id":"cj2fysnc00007dc5jyneb5pzg"},{"name":"Opencv","_id":"cj2fysnc00008dc5jl1itsrf2"},{"name":"C++","_id":"cj2fysnc4000fdc5je8ptv7j3"},{"name":"Jenkins","_id":"cj2fysnc4000gdc5jyms1t91n"},{"name":"Ci","_id":"cj2fysnc5000jdc5ja5bweg0k"}]}}