{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/theme-example-master/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1}],"Cache":[{"_id":"themes/theme-example-master/README.md","hash":"c621c333984632fa1a37ad3131962d6811bcf047","modified":1481805208000},{"_id":"themes/theme-example-master/_config.yml","hash":"79d1ea5ba303c2a2b88200d196d323dcdbaf48c3","modified":1481805208000},{"_id":"source/.DS_Store","hash":"a8382068ea08e25e8f134589c0424fbe93d5def0","modified":1493863576000},{"_id":"source/_posts/Analyze.md","hash":"6158f16cd7df5db87bd78442123dcd7eceda20ed","modified":1504865199000},{"_id":"source/_posts/Jenkins.md","hash":"4319958b3fe2c032318dff665cdb6046bc7b909f","modified":1494560109000},{"_id":"source/_posts/Android-拷贝资源文件到sd-card.md","hash":"f7faba47e77b6b766d8bf86fceab3b9e7e1a5274","modified":1494562241000},{"_id":"source/_posts/Dagger2.md","hash":"46a375572fbc69eb6168e1c14a6ff0d97788eab8","modified":1493713354000},{"_id":"source/_posts/ArrayList-LinkedList源码分析.md","hash":"9b74a4ae52d2743c4abe9fbf6711289c537cf3f0","modified":1494303250000},{"_id":"source/_posts/detection-the-largest-retangle.md","hash":"95ce4f70f2fac11196f7a8967cc09d9ef950d585","modified":1499222796000},{"_id":"source/_posts/hello-world.md","hash":"565b0ee7a5ef8219c00603ae62ed2a2862d96c60","modified":1493713359000},{"_id":"source/_posts/Ndk.md","hash":"c25e890591152370e9155b180e198d4fb44ab2af","modified":1493808092000},{"_id":"source/_posts/Opencv-In-Android.md","hash":"08008dfe4274df2be02665d30cb7a5f588856cfd","modified":1494239859000},{"_id":"themes/theme-example-master/languages/default.yml","hash":"9572e889944083ee24ac5d6b79d697b956d1dd5b","modified":1481805208000},{"_id":"themes/theme-example-master/languages/zh-CN.yml","hash":"e8d6c1593a76e3b982707ad3386f2e7dcb0a86a1","modified":1481805208000},{"_id":"themes/theme-example-master/layout/archive.ejs","hash":"253edd91b94cd4b2f8b160cb4bbf630f0d1486bf","modified":1481805208000},{"_id":"themes/theme-example-master/languages/en.yml","hash":"9572e889944083ee24ac5d6b79d697b956d1dd5b","modified":1481805208000},{"_id":"themes/theme-example-master/layout/index.ejs","hash":"54a8275eb2efd0c3995a0afcf4eed566da92ef1e","modified":1481805208000},{"_id":"themes/theme-example-master/layout/post.ejs","hash":"4264de1ef2e14bee09685c951fb4bf95d93fee11","modified":1481805208000},{"_id":"themes/theme-example-master/layout/layout.ejs","hash":"25c6ffd588e6088e7f154b8ebcc62ab829a9d521","modified":1481805208000},{"_id":"themes/theme-example-master/layout/_partial/head.ejs","hash":"2a32fccbe89aab637d12ea1761efab0058bf91e0","modified":1481805208000},{"_id":"themes/theme-example-master/layout/_partial/paginator.ejs","hash":"28cdbb7ca44f43182d2c73d7d05504525a136a87","modified":1481805208000},{"_id":"themes/theme-example-master/layout/_partial/header.ejs","hash":"51b0aa0452aa8a087ec93e6acd9e8bd34904671b","modified":1481805208000},{"_id":"themes/theme-example-master/source/css/style.styl","hash":"24bf706e824c6ef71ff0852054bdb54ad45dece3","modified":1481805208000},{"_id":"themes/theme-example-master/source/css/_partial/archive.styl","hash":"d4033341d73c57e1bc6f2b15722dffc30d0c860f","modified":1481805208000},{"_id":"themes/theme-example-master/source/css/_partial/header.styl","hash":"84c511debb06dc7cf57a0639036bfaa6942e28d6","modified":1481805208000},{"_id":"themes/theme-example-master/source/css/_partial/paginator.styl","hash":"371576fdd8ec76201d9f72d9355625eef4b34bfc","modified":1481805208000},{"_id":"themes/theme-example-master/source/css/_partial/post.styl","hash":"fc2286c925c5eac8899ce269a87a1e78874345ea","modified":1481805208000},{"_id":"public/2017/09/08/Analyze/index.html","hash":"7b3b639d78a14bdd2f832d9281ad901995fd1de7","modified":1505115578644},{"_id":"public/2017/05/12/Android-拷贝资源文件到sd-card/index.html","hash":"0f7e17f4f3ea5531a76c9bca2505bfbc2695f1b4","modified":1505115578648},{"_id":"public/2017/05/09/ArrayList-LinkedList源码分析/index.html","hash":"f70834ea37277f75cf4f4b5937ceec48c90099de","modified":1505115578649},{"_id":"public/2017/05/04/Jenkins/index.html","hash":"bcbb15ca6d9e4dfa040b6204c1682d8ad86514e5","modified":1505115578649},{"_id":"public/2017/05/02/hello-world/index.html","hash":"df578bb6662dba964b8c629aa0de8c8dc90306f6","modified":1505115578649},{"_id":"public/archives/index.html","hash":"c2bc1043ea3ec18c15cbb2a298848103e05b82b9","modified":1505115578649},{"_id":"public/archives/2017/index.html","hash":"c2bc1043ea3ec18c15cbb2a298848103e05b82b9","modified":1505115578649},{"_id":"public/archives/2017/05/index.html","hash":"19e7b072683e255b415972e4b0f224760bb8bfb5","modified":1505115578649},{"_id":"public/archives/2017/09/index.html","hash":"d676bb345dc021eaa98d249941692f681535e151","modified":1505115578649},{"_id":"public/index.html","hash":"8b22abaf444e34278f0c7414a9a428ded23c7f34","modified":1505115578650},{"_id":"public/tags/Ci/index.html","hash":"a077b9d530d10d804ca8970254fdfffa78589d47","modified":1505115578650},{"_id":"public/tags/Jenkins/index.html","hash":"a077b9d530d10d804ca8970254fdfffa78589d47","modified":1505115578650},{"_id":"public/tags/Android/index.html","hash":"d60ee1f329d0ada13ee4e2104de5329fcd7c0f64","modified":1505115578650},{"_id":"public/tags/Java/index.html","hash":"a54ac2d71b9d91ff7771e9e3959c84b854c0bbb1","modified":1505115578650},{"_id":"public/tags/Data-structure/index.html","hash":"a54ac2d71b9d91ff7771e9e3959c84b854c0bbb1","modified":1505115578650},{"_id":"public/tags/Opencv/index.html","hash":"33b96b55785fe9f64c03ad5251bd5f5be901e960","modified":1505115578651},{"_id":"public/tags/C/index.html","hash":"33b96b55785fe9f64c03ad5251bd5f5be901e960","modified":1505115578654},{"_id":"public/tags/NDK/index.html","hash":"5854945dabe128a8db0beb4d729acfa9c451bf92","modified":1505115578654},{"_id":"public/tags/JNI/index.html","hash":"ad8a6a04a2640bb92b5232fcb1d17419bb319b42","modified":1505115578654},{"_id":"public/2017/05/08/detection-the-largest-retangle/index.html","hash":"c55a4b110058265651a0cd20a2f32746078ad7c0","modified":1505115578651},{"_id":"public/2017/05/06/Opencv-In-Android/index.html","hash":"7c3c224b0e533fcb0ed76779ad8b4f3b83bde969","modified":1505115578651},{"_id":"public/2017/05/02/Ndk/index.html","hash":"6ec8eb3855fd9dab59c0c83c9b87ec93bdc3f7cc","modified":1505115578651},{"_id":"public/2017/05/02/Dagger2/index.html","hash":"6e08102754e23868f9f7c9b6d8e089541327b74b","modified":1505115578652},{"_id":"public/css/style.css","hash":"cea904d6288d638c2004d175e2046a15df0fc2a8","modified":1505115567574}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Analyze","date":"2017-09-08T10:06:39.000Z","_content":"","source":"_posts/Analyze.md","raw":"---\ntitle: Analyze\ndate: 2017-09-08 18:06:39\ntags:\n---\n","slug":"Analyze","published":1,"updated":"2017-09-08T10:06:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7fuy44w0000ji5juoamnfj7","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Jenkins CI","date":"2017-05-04T03:57:13.000Z","_content":"\n\n","source":"_posts/Jenkins.md","raw":"---\ntitle: Jenkins CI\ndate: 2017-05-04 11:57:13\ntags: [Jenkins, Ci, Android]\n---\n\n\n","slug":"Jenkins","published":1,"updated":"2017-05-12T03:35:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7fuy4520001ji5j6s8f0edz","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Android 拷贝资源文件到sd card","date":"2017-05-12T03:50:10.000Z","_content":"在开发中, 我们有时候需要把某些资源文件打包到apk中, 在程序需要的时候, 读取它们或者把它们放入sd card\nin my project, i need to copy my source file to sd card ,  i have `pricetag_svm.xml` file under  my project fiolder`app/src/assets` and here is my code :\n<!-- more -->\n``` java\n    private void copyAssets(String file) throws IOException {\n        AssetManager assetManager = getAssets();\n        InputStream in = assetManager.open(file);\n\n        if (in != null) {\n\n            OutputStream out = null;\n\n            File outFile = new File(getExternalFilesDir(null), file);\n\n            if (!outFile.exists()) {\n\n                Log.d(\"TAG\", \"outFile path\" + outFile.getAbsolutePath());\n                out = new FileOutputStream(outFile);\n\n                copyFile(in, out);\n                if (in != null) {\n                    try {\n                        in.close();\n                    } catch (IOException e) {\n                        // NOOP\n                    }\n                }\n                if (out != null) {\n                    try {\n                        out.close();\n                    } catch (IOException e) {\n                        // NOOP\n                    }\n                }\n            }\n        }\n    }\n\n    private void copyFile(InputStream in, OutputStream out) throws IOException {\n        byte[] buffer = new byte[1024];\n        int read;\n        while ((read = in.read(buffer)) != -1) {\n            out.write(buffer, 0, read);\n        }\n    }\n\n```\n\nso , at the right time of your needs , just \n\n``` java\n  copyAssets(\"pricetag_svm.xml\");\n\n```\n\nafter this ,you will read this source file in your decice's sd card \n\n`Storage/Android/data/(your application package name)/files` \n\n\n\n\n","source":"_posts/Android-拷贝资源文件到sd-card.md","raw":"---\ntitle: Android 拷贝资源文件到sd card\ndate: 2017-05-12 11:50:10\ntags: Android\n---\n在开发中, 我们有时候需要把某些资源文件打包到apk中, 在程序需要的时候, 读取它们或者把它们放入sd card\nin my project, i need to copy my source file to sd card ,  i have `pricetag_svm.xml` file under  my project fiolder`app/src/assets` and here is my code :\n<!-- more -->\n``` java\n    private void copyAssets(String file) throws IOException {\n        AssetManager assetManager = getAssets();\n        InputStream in = assetManager.open(file);\n\n        if (in != null) {\n\n            OutputStream out = null;\n\n            File outFile = new File(getExternalFilesDir(null), file);\n\n            if (!outFile.exists()) {\n\n                Log.d(\"TAG\", \"outFile path\" + outFile.getAbsolutePath());\n                out = new FileOutputStream(outFile);\n\n                copyFile(in, out);\n                if (in != null) {\n                    try {\n                        in.close();\n                    } catch (IOException e) {\n                        // NOOP\n                    }\n                }\n                if (out != null) {\n                    try {\n                        out.close();\n                    } catch (IOException e) {\n                        // NOOP\n                    }\n                }\n            }\n        }\n    }\n\n    private void copyFile(InputStream in, OutputStream out) throws IOException {\n        byte[] buffer = new byte[1024];\n        int read;\n        while ((read = in.read(buffer)) != -1) {\n            out.write(buffer, 0, read);\n        }\n    }\n\n```\n\nso , at the right time of your needs , just \n\n``` java\n  copyAssets(\"pricetag_svm.xml\");\n\n```\n\nafter this ,you will read this source file in your decice's sd card \n\n`Storage/Android/data/(your application package name)/files` \n\n\n\n\n","slug":"Android-拷贝资源文件到sd-card","published":1,"updated":"2017-05-12T04:10:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7fuy4530002ji5jlgjas8qc","content":"<p>在开发中, 我们有时候需要把某些资源文件打包到apk中, 在程序需要的时候, 读取它们或者把它们放入sd card<br>in my project, i need to copy my source file to sd card ,  i have <code>pricetag_svm.xml</code> file under  my project fiolder<code>app/src/assets</code> and here is my code :<br><a id=\"more\"></a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">copyAssets</span><span class=\"params\">(String file)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    AssetManager assetManager = getAssets();</div><div class=\"line\">    InputStream in = assetManager.open(file);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (in != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\"></div><div class=\"line\">        OutputStream out = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">        File outFile = <span class=\"keyword\">new</span> File(getExternalFilesDir(<span class=\"keyword\">null</span>), file);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!outFile.exists()) &#123;</div><div class=\"line\"></div><div class=\"line\">            Log.d(<span class=\"string\">\"TAG\"</span>, <span class=\"string\">\"outFile path\"</span> + outFile.getAbsolutePath());</div><div class=\"line\">            out = <span class=\"keyword\">new</span> FileOutputStream(outFile);</div><div class=\"line\"></div><div class=\"line\">            copyFile(in, out);</div><div class=\"line\">            <span class=\"keyword\">if</span> (in != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    in.close();</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">                    <span class=\"comment\">// NOOP</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (out != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    out.close();</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">                    <span class=\"comment\">// NOOP</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">copyFile</span><span class=\"params\">(InputStream in, OutputStream out)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</div><div class=\"line\">    <span class=\"keyword\">int</span> read;</div><div class=\"line\">    <span class=\"keyword\">while</span> ((read = in.read(buffer)) != -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">        out.write(buffer, <span class=\"number\">0</span>, read);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>so , at the right time of your needs , just </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">copyAssets(<span class=\"string\">\"pricetag_svm.xml\"</span>);</div></pre></td></tr></table></figure>\n<p>after this ,you will read this source file in your decice’s sd card </p>\n<p><code>Storage/Android/data/(your application package name)/files</code> </p>\n","site":{"data":{}},"excerpt":"<p>在开发中, 我们有时候需要把某些资源文件打包到apk中, 在程序需要的时候, 读取它们或者把它们放入sd card<br>in my project, i need to copy my source file to sd card ,  i have <code>pricetag_svm.xml</code> file under  my project fiolder<code>app/src/assets</code> and here is my code :<br>","more":"<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">copyAssets</span><span class=\"params\">(String file)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    AssetManager assetManager = getAssets();</div><div class=\"line\">    InputStream in = assetManager.open(file);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (in != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\"></div><div class=\"line\">        OutputStream out = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">        File outFile = <span class=\"keyword\">new</span> File(getExternalFilesDir(<span class=\"keyword\">null</span>), file);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!outFile.exists()) &#123;</div><div class=\"line\"></div><div class=\"line\">            Log.d(<span class=\"string\">\"TAG\"</span>, <span class=\"string\">\"outFile path\"</span> + outFile.getAbsolutePath());</div><div class=\"line\">            out = <span class=\"keyword\">new</span> FileOutputStream(outFile);</div><div class=\"line\"></div><div class=\"line\">            copyFile(in, out);</div><div class=\"line\">            <span class=\"keyword\">if</span> (in != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    in.close();</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">                    <span class=\"comment\">// NOOP</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (out != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    out.close();</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">                    <span class=\"comment\">// NOOP</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">copyFile</span><span class=\"params\">(InputStream in, OutputStream out)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</div><div class=\"line\">    <span class=\"keyword\">int</span> read;</div><div class=\"line\">    <span class=\"keyword\">while</span> ((read = in.read(buffer)) != -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">        out.write(buffer, <span class=\"number\">0</span>, read);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>so , at the right time of your needs , just </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">copyAssets(<span class=\"string\">\"pricetag_svm.xml\"</span>);</div></pre></td></tr></table></figure>\n<p>after this ,you will read this source file in your decice’s sd card </p>\n<p><code>Storage/Android/data/(your application package name)/files</code> </p>"},{"title":"ArrayList LinkedList源码分析","date":"2017-05-09T04:10:59.000Z","_content":"","source":"_posts/ArrayList-LinkedList源码分析.md","raw":"---\ntitle: ArrayList LinkedList源码分析\ndate: 2017-05-09 12:10:59\ntags: [Java, Data structure]\n---\n","slug":"ArrayList-LinkedList源码分析","published":1,"updated":"2017-05-09T04:14:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7fuy4580004ji5jh82xxlu6","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Do you know Dagger2?","date":"2017-05-02T06:13:26.000Z","_content":"\n\n## 概述\n\n很多Android Apps通常依赖于其他依赖库的实例化对象, 举例来说,  一个Twitter客户端可能使用类似[Retrofit](https://github.com/square/retrofit)的网络依赖库来进行构建, 要使用这个库, 你需要添加解析的库，比如说[Gson](https://github.com/google/gson).  此外,  那些实现认证或者缓存的类可能需要访问shared preferences和其他公共的存储单元，需要首先实例化他们并且创建固有的依赖链. \t\n\n<!-- more -->\n\n\nDagger2 为你分析这些依赖库, 并且生成代码以帮助把他们连接在一起, 虽然还有其他的Java 依赖注入库, 但是他们的大多数在依赖XML的时候有很多限制, 在运行期间需要验证依赖关系的问题, 或者在启动期间导致性能上的损耗,  Dagger 2纯粹依赖于使用Java注释处理器和编译时检查来分析和验证依赖性. 它被认为是迄今为止效率最高的依赖注入框架之一. \n\n## 优点\n\n这里有使用Dagger2 的一些优点\n\n\n- **简化对共享实例的访问.** 举例来说, 正如[ButterKnife](https://github.com/JakeWharton/butterknife)声明对View, 事件处理, 资源的引用更为简单那种, Dagger2为获取共享实例的饮用提供了一种简单的方式. 比如,一旦我们在Dagger中声明类似`MyTwitterApiClient`或者`SharedPreferences`的单例的引用, 我们可以简单的使用 `@Inject`注解来声明字段\n\n\n``` java\npublic class MainActivity extends Activity {\n   @Inject MyTwitterApiClient mTwitterApiClient;\n   @Inject SharedPreferences sharedPreferences;\n\n   public void onCreate(Bundle savedInstance) {\n       // assign singleton instances to fields\n       InjectorClass.inject(this);\n   } \n\n```\n\n- **更容易配制复杂的依赖.**  那些你经常创建的对象有一个隐式的过程. Dagger2 遍历依赖图表并且生成以便于理解且追踪代码, 同时把你从编写大量的模版代码的工作中解救出来, 你正常的需要手工编写代码以获取引用并将他们作为依赖传递给其他对象. 它也有助于简化重构, 因为以可以专注于构建哪些模块而不是关注于他们被创建的顺序. \n\n- **单元和集成变得更为轻松.** 因为依赖图表是由我们自己创建的, 我们能够简单的切换模块，作出网络响应并且模拟这种行为 \n\n- **实例作用域.** 你不仅更为简单的管理整个应用程序的生命周期, 你还可以利用Dagger2 声明更为简短的生命周期的实例(比如, 绑定用户的seesion, Activity 的生命周期, etc.). \n\n## 设置\n\nAndroid studio通常情况下不会允许你连接到生成Dagger2的代码作为合法的类,  因为他们通常情况下不会添加到资源路径, 但是通过添加`android-apt` 插件能够添加这些文件到IDE路径，并且使你对这些文件有更多的可见性\n\n由于Android Gradle plugin 2.2注释处理是内置的, android-apt并不被受待见. `android-apt`不支持新的 `jack` \n\n在你的`app/build.gradle` 文件中添加以下3行的申请说明\n\n``` java\ndependencies {\n    // apt command comes from the android-apt plugin\n    apt 'com.google.dagger:dagger-compiler:2.8'\n    compile 'com.google.dagger:dagger:2.8'\n    provided 'javax.annotation:jsr250-api:1.0'\n}\n\n```\n\n如果你正在使用android gradle 2.3 插件, 你可以使用`annotationProcessor` 来代替apt-plugin:\n\n``` java\ndependencies {\n    // apt command comes from the android-apt plugin\n    compile \"com.google.dagger:dagger:2.9\"\n    annotationProcessor \"com.google.dagger:dagger-compiler:2.9\"\n    provided 'javax.annotation:jsr250-api:1.0'\n}\n\n```\n\n要注意的是`provided`关键字仅仅在编译期间被用来作为依赖关系, Dagger生成用于创建源代码中定义的类的依赖图的代码. 这些类在编译期间被添加到IDE类路径中. `annotationProcessor`关键字被Android gradle插件所识别并且不会把这些类他们添加到类路径中, 它们仅仅被用来注释处理, 以防止别人意外的引用他们. \n\n\n## 创建单例\n\n![Creatint singletons](https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_general.png)\n\n很简单的例子表明如何使用Dagger2 集中你所有创建的单例.\n类似于下面这样, 假设在你的Twitter客户端中你从没有使用过任何类型的的依赖注入框架写代码\n\n``` java\nOkHttpClient client = new OkHttpClient();\n\n// Enable caching for OkHttp\nint cacheSize = 10 * 1024 * 1024; // 10 MiB\nCache cache = new Cache(getApplication().getCacheDir(), cacheSize);\nclient.setCache(cache);\n\n// Used for caching authentication tokens\nSharedPreferences sharedPrefeences = PreferenceManager.getDefaultSharedPreferences(this);\n\n// Instantiate Gson\nGson gson = new GsonBuilder().create();\nGsonConverterFactory converterFactory = GsonConverterFactory.create(gson);\n\n// Build Retrofit\nRetrofit retrofit = new Retrofit.Builder()\n                                .baseUrl(\"https://api.github.com\")\n                                .addConverterFactory(converterFactory)\n                                .client(client)  // custom client\n                                .build();\n```\n\n## 声明你的单例\n\n你需要通过创建一个Dagger2 moudle来明确哪些对象应该被包含作为依赖链的一部分. 举例来说, 如果我们希望使一个单独的`Retrofit`单例绑定到整个应用程序的生命周期,  并且对我们所有的activity和fragment都是可用的, 我们首先要让Dagger 知道可以提供一个`Retrofit`单例\n\n因为我们希望设置caching, 我们需要一份Application Context上下文环境. 我们的第一个Dagger模块`AppModule.java`将被用来提供此引用, 我们还需要声明带有`@Provides`注解的方法来告诉Dagger这个方法是返回类型为`Application`的构造器: \n\n``` java\n@Module\npublic class AppModule {\n\n    Application mApplication;\n\n    public AppModule(Application application) {\n        mApplication = application;\n    }\n\n    @Provides\n    @Singleton\n    Application providesApplication() {\n        return mApplication;\n    }\n}\n```\n\n我们创建一个名为`NetModule.java`并且使用`@Module`标注的类来告诉Dagger在可用方法的范围内寻找来作为实例的提供者\n\n`@Singleton`注解同样告诉Dagger编译器这个实例在整个应用生命周期中应该仅仅被创建一次, 在以下的例子中, 我们指定`SharedPreferences` `Gson` `Cache` `OkHttpClient` `Retrofit` 作为可以用作依赖列表一部分的返回类型\n\n``` java\n@Module\npublic class NetModule {\n\n    String mBaseUrl;\n\n    // Constructor needs one parameter to instantiate.  \n    public NetModule(String baseUrl) {\n        this.mBaseUrl = baseUrl;\n    }\n\n    // Dagger will only look for methods annotated with @Provides\n    @Provides\n    @Singleton\n    // Application reference must come from AppModule.class\n    SharedPreferences providesSharedPreferences(Application application) {\n        return PreferenceManager.getDefaultSharedPreferences(application);\n    }\n\n    @Provides\n    @Singleton\n    Cache provideOkHttpCache(Application application) { \n        int cacheSize = 10 * 1024 * 1024; // 10 MiB\n        Cache cache = new Cache(application.getCacheDir(), cacheSize);\n        return cache;\n    }\n\n   @Provides \n   @Singleton\n   Gson provideGson() {  \n       GsonBuilder gsonBuilder = new GsonBuilder();\n       gsonBuilder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES);\n       return gsonBuilder.create();\n   }\n\n   @Provides\n   @Singleton\n   OkHttpClient provideOkHttpClient(Cache cache) {\n      OkHttpClient client = new OkHttpClient();\n      client.setCache(cache);\n      return client;\n   }\n\n   @Provides\n   @Singleton\n   Retrofit provideRetrofit(Gson gson, OkHttpClient okHttpClient) {\n      Retrofit retrofit = new Retrofit.Builder()\n                .addConverterFactory(GsonConverterFactory.create(gson))\n                .baseUrl(mBaseUrl)\n                .client(okHttpClient)\n                .build();\n        return retrofit;\n    }\n}\n```\n\n注意这个方法名 (i.e. provideGson(), provideRetrofit(), etc)可以起任何名. 使用`@Provides`注解的返回值类型被用来将此实例与其他任何相同类型的moudle相关联, `@Singleton`注解被用来像Dagger描述在整个应用程序生命周期期间仅仅初始化一次\n\n`Retrofit`的实例的同时依赖于`Gson`和`OkHttpClient`实例, 所以我们可以在同一个类中声明另外一个方法以获取这两个类型. 在这个方法中`@Provides`注解和这两个参数将会使得Dagger 意识到这里有`Gson`和`OkHttpClient`的依赖以创建`Retrofit`的实例\n\n## 声明注入目标\n\nDagger为你的activitys, services, 或fragments提供了一种简单的通过使用`@Inject`注解注入字段并且调用`inject()`方法来分配引用, 调用`inject()`方法将会使Dagger2 在依赖图谱中尝试寻找一个相匹配的返回类型来定位单例. 如果找到, 它将分配各自对应字段的引用. 比如, 在下面的例子中, 它会尝试寻找返回类型为`MyTwitterApiClient`和`SharedPreferences`的提供器(provider)\n\n``` java\npublic class MainActivity extends Activity {\n   @Inject MyTwitterApiClient mTwitterApiClient;\n   @Inject SharedPreferences sharedPreferences;\n\n  public void onCreate(Bundle savedInstance) {\n       // assign singleton instances to fields\n       InjectorClass.inject(this);\n   } \n```\nDagger2 中使用的注入器类被称为 component组件, 它为我们的activitys, services, 或则fragments分配引用以连接我们之前声明的单例, 我们同样需要一个`@Component`注解声明的类, 可以添加的activitys, services, 或则fragments应该在这个类中单独的使用`inject()`方法声明:\n\n\n``` java\n@Singleton\n@Component(modules={AppModule.class, NetModule.class})\npublic interface NetComponent {\n   void inject(MainActivity activity);\n   // void inject(MyFragment fragment);\n   // void inject(MyService service);\n}\n```\n\n注意这些类并不足以作为注入的目标, Dagger2 依赖相匹配的类, 你必须明确指明那个类应该被声明在内, (这里有一些[建议](https://blog.gouline.net/dagger-2-even-sharper-less-square-b52101863542#.vgmua0fkm)来解决这个问题, 但是这样做代码可能追踪更加困难相比简单的定义它们 )\n\n## 代码生成\n\n一件重要Dagger2的方面是, 这个库为标注了`@Component`的接口类生成代码, 你可以使用前缀为`@Dagger`(i.e. DaggerTwitterApiComponent.java)的类, 它将负责实例化我们的依赖图谱中的一个实例, 并且用它执行`@Inject`注解字段的注入工作. 请看(setup guide)[https://github.com/codepath/android_guides/wiki/Dependency-Injection-with-Dagger-2#setup].\n\n## 实例化组件\n\n我们应该在`Application`的类中做所有工作, 因为这些实例在整个应用程序的生命周期中仅仅被声明一次\n\n``` java\npublic class MyApp extends Application {\n\n    private NetComponent mNetComponent;\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n\n        // Dagger%COMPONENT_NAME%\n        mNetComponent = DaggerNetComponent.builder()\n                // list of modules that are part of this component need to be created here too\n                .appModule(new AppModule(this)) // This also corresponds to the name of your module: %component_name%Module\n                .netModule(new NetModule(\"https://api.github.com\"))\n                .build();\n\n        // If a Dagger 2 component does not have any constructor arguments for any of its modules,\n        // then we can use .create() as a shortcut instead:\n        //  mNetComponent = com.codepath.dagger.components.DaggerNetComponent.create();\n    }\n\n    public NetComponent getNetComponent() {\n       return mNetComponent;\n    }\n}\n```\n\n如果不能没有Dagger component组件的引用, 你要确保重构项目(在AndroidStudio中, select Build > Rebuild Project)\n\n因为我们覆写了默认的`Application`类, 我们同样修改应用程序`name`为`MyApp`, 这样, 你的应用程序将使用这个Applicaiton 类来处理最初的实例. \n\n``` java\n<application\n      android:allowBackup=\"true\"\n      android:name=\".MyApp\">\n```\n\n在我们Activity的内部, 我们只需要调用`inject()`方法就可以简单的访问这些组件\n\n``` java\npublic class MyActivity extends Activity {\n  @Inject OkHttpClient mOkHttpClient;\n  @Inject SharedPreferences sharedPreferences;\n\n  public void onCreate(Bundle savedInstance) {\n        // assign singleton instances to fields\n        // We need to cast to `MyApp` in order to get the right method\n        ((MyApp) getApplication()).getNetComponent().inject(this);\n    } \n```\n\n## 限制类型\n\n![Qualified types](https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_qualifiers.png)\n\n如果我们需要同一返回类型的两个不同对象, 我们可以使用`@Named`限定注解, 你需要在你提供单例的地方(`@Provides` annotation)和注入它们的地方(`@Inject` annotations)同时声明它们:\n\n``` java\n@Provides @Named(\"cached\")\n@Singleton\nOkHttpClient provideOkHttpClient(Cache cache) {\n    OkHttpClient client = new OkHttpClient();\n    client.setCache(cache);\n    return client;\n}\n\n@Provides @Named(\"non_cached\") @Singleton\nOkHttpClient provideOkHttpClient() {\n    OkHttpClient client = new OkHttpClient();\n    return client;\n}\n```\n\n当你注入这些单例的时候, 你同样需要`@Named`注解\n\n``` java\n@Inject @Named(\"cached\") OkHttpClient client;\n@Inject @Named(\"non_cached\") OkHttpClient client2;\n```\n\n`@Named`是Dagger预先定义的限定注解, 你可以很好的创建你自己的限定注解\n\n``` java\n@Qualifier\n@Documented\n@Retention(RUNTIME)\npublic @interface DefaultPreferences {\n}\n```\n\n## 作用域\n\n![Scopes](https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_scopes.png)\n\n在Dagger2, 你可以声明Component组件通过声明自定义的范围如何封装. 举例来说, 你可以创建一个仅仅在activity或者fragment生命周期运行期间的作用域. 你可以创建只映射到用户身份验证会话的作用域. \n\n\n\n\n\n\n利用作用域允许我们要么创建依赖组件要么创建子组件, 上面的例子表明我们所使用的`@Singleton`注解是伴随应用程序的整个生命周期, 我们同样依赖于一个主要的Dagger component组件.\n\n如果我们希望拥有一个并不需要常驻内存中的多个Component组件(i.e. 依赖于activity或者fragment生命周期, 甚至依赖于用户的登录状态的Component组件), 我们可以创建相关的组件活着子组件, 在任何一种情况下, 都会为你封装代码提供一种方式. 我们将在下文中看到如何同时使用它们. \n\n这里有使用这些方法的几点考虑:\n\n- **相关的组件要求父组件明确列出哪些依赖可以注入, 而子组件没有** 对于父组件来说, 你需要通过指明类型和方法, 以想子组件暴露它们\n\n``` java\n// parent component\n@Singleton\n@Component(modules={AppModule.class, NetModule.class})\npublic interface NetComponent {\n    // remove injection methods if downstream modules will perform injection\n\n    // downstream components need these exposed\n    // the method name does not matter, only the return type\n    Retrofit retrofit(); \n    OkHttpClient okHttpClient();\n    SharedPreferences sharedPreferences();\n}\n```\n\n如果你忘记添加这行代码, 你将要看到一个关于注入目标丢失的错误. 类似于private/public变量如何去管理那样, 使用父component组件允许更明确的控制以及更好的封装, 但是使用子component组件使得依赖注入在花费的代价上更为简单\n\n- **两个相互依赖的组件不能共享同一范围.** 举例来说, 两个组件不能同时使用 `@Singleton`注解 标注作用域, 这个限制是有[这里](https://github.com/google/dagger/issues/107#issuecomment-71073298)描述的原因导致的, 相关的组件需要定义它们自己的范围.\n\n\n\n\n\n\n\n\n\n\n##  依赖组件\n\n![Dependent Components](https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_dependency.png)\n\n举例来说, 如果我们想要使用 用户会话的整个生命周期\n我们可以声明我们自己的 `@UserScope`接口\n\n``` java\nimport java.lang.annotation.Retention;\nimport javax.inject.Scope;\n\n@Scope\npublic @interface UserScope {\n}\n```\n然后, 我们声明它的父组件\n\n``` java\n  @Singleton\n  @Component(modules={AppModule.class, NetModule.class})\n  public interface NetComponent {\n      // downstream components need these exposed with the return type\n      // method name does not really matter\n      Retrofit retrofit();\n  }\n```\n\n我们可以接着声明它的子组件\n\n\n``` java\n@UserScope // using the previously defined scope, note that @Singleton will not work\n@Component(dependencies = NetComponent.class, modules = GitHubModule.class)\npublic interface GitHubComponent {\n    void inject(MainActivity activity);\n}\n```\n\n我们假设下面的Github模块简单的返回一个Github Api的接口\n\n``` java\n@Module\npublic class GitHubModule {\n\n    public interface GitHubApiInterface {\n      @GET(\"/org/{orgName}/repos\")\n      Call<ArrayList<Repository>> getRepository(@Path(\"orgName\") String orgName);\n    }\n\n    @Provides\n    @UserScope // needs to be consistent with the component scope\n    public GitHubApiInterface providesGitHubInterface(Retrofit retrofit) {\n        return retrofit.create(GitHubApiInterface.class);\n    }\n}\n```\n\n为了`GitHubModule.java`获得`Retrofit`实例的引用, 我们需要在调用它之前的组件中明确定义它们, 如果说在它之后执行注入, 它们应该在之后的组件中移除它们:\n\n``` java\n@Singleton\n@Component(modules={AppModule.class, NetModule.class})\npublic interface NetComponent {\n    // remove injection methods if downstream modules will perform injection\n\n    // downstream components need these exposed\n    Retrofit retrofit();\n    OkHttpClient okHttpClient();\n    SharedPreferences sharedPreferences();\n}\n```\n\n最后一步是使用`GitHubComponent` 执行实例化, 这个时候, 我们首先需要构建`NetComponent`, 并且在`DaggerGitHubComponent` builder的构造函数中传递它: \n\n``` java\nNetComponent mNetComponent = DaggerNetComponent.builder()\n                .appModule(new AppModule(this))\n                .netModule(new NetModule(\"https://api.github.com\"))\n                .build();\n\nGitHubComponent gitHubComponent = DaggerGitHubComponent.builder()\n                .netComponent(mNetComponent)\n                .gitHubModule(new GitHubModule())\n                .build();\n```\n\n[this example code ](https://github.com/codepath/dagger2-example)\n\n子组件\n\n![Subcomponents](https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_subcomponent.png)\n\n使用子组件是扩展组件的对象图的另外一种方式, 就像依赖的组件那样, 子组件有它们自己的生命周期并且当所有子组件的引用都消失的时候是可以被垃圾收集的, 并具有相同的范围限制。在使用这种方法的一个优点是，不需要定义所有下游组件. \n\n另一个主要的不同之处就是子组件只需要在父组件中声明. \n\n这里有一个为Activity使用子组件的例子. 我们使用自定义的范围和`@Subcomponent`注解标注一个类\n\n``` java\n@MyActivityScope\n@Subcomponent(modules={ MyActivityModule.class })\npublic interface MyActivitySubComponent {\n    @Named(\"my_list\") ArrayAdapter myListAdapter();\n}\n```\n\nmoudle模块使用下面声明\n\n``` java\n@Module\npublic class MyActivityModule {\n    private final MyActivity activity;\n\n    // must be instantiated with an activity\n    public MyActivityModule(MyActivity activity) { this.activity = activity; }\n\n    @Provides @MyActivityScope @Named(\"my_list\")\n    public ArrayAdapter providesMyListAdapter() {\n        return new ArrayAdapter<String>(activity, android.R.layout.my_list);\n    }\n    ...\n}\n```\n\n最后, 在父组件中, 我们声明一个工厂方法\n\n``` java\n@Singleton\n@Component(modules={ ... })\npublic interface MyApplicationComponent {\n    // injection targets here\n\n    // factory method to instantiate the subcomponent defined here (passing in the module instance)\n    MyActivitySubComponent newMyActivitySubcomponent(MyActivityModule activityModule);\n}\n```\n\n在上面的例子中, `newMyActivitySubcomponent()`每次被调用的时候, 一个新的子组件的实例都会被创建, 使用子模块moudle注入到一个activity\n\n``` java\n@Singleton\n@Component(modules={ ... })\npublic interface MyApplicationComponent {\n    // injection targets here\n\n    // factory method to instantiate the subcomponent defined here (passing in the module instance)\n    MyActivitySubComponent newMyActivitySubcomponent(MyActivityModule activityModule);\n}\n```\n子组件创建\n\n![Available starting in v2.7](https://raw.githubusercontent.com/codepath/android_guides/master/images/subcomponent_builders.png)\n\n\n\n","source":"_posts/Dagger2.md","raw":"---\ntitle: Do you know Dagger2?\ndate: 2017-05-02 14:13:26\ntags: Android \n---\n\n\n## 概述\n\n很多Android Apps通常依赖于其他依赖库的实例化对象, 举例来说,  一个Twitter客户端可能使用类似[Retrofit](https://github.com/square/retrofit)的网络依赖库来进行构建, 要使用这个库, 你需要添加解析的库，比如说[Gson](https://github.com/google/gson).  此外,  那些实现认证或者缓存的类可能需要访问shared preferences和其他公共的存储单元，需要首先实例化他们并且创建固有的依赖链. \t\n\n<!-- more -->\n\n\nDagger2 为你分析这些依赖库, 并且生成代码以帮助把他们连接在一起, 虽然还有其他的Java 依赖注入库, 但是他们的大多数在依赖XML的时候有很多限制, 在运行期间需要验证依赖关系的问题, 或者在启动期间导致性能上的损耗,  Dagger 2纯粹依赖于使用Java注释处理器和编译时检查来分析和验证依赖性. 它被认为是迄今为止效率最高的依赖注入框架之一. \n\n## 优点\n\n这里有使用Dagger2 的一些优点\n\n\n- **简化对共享实例的访问.** 举例来说, 正如[ButterKnife](https://github.com/JakeWharton/butterknife)声明对View, 事件处理, 资源的引用更为简单那种, Dagger2为获取共享实例的饮用提供了一种简单的方式. 比如,一旦我们在Dagger中声明类似`MyTwitterApiClient`或者`SharedPreferences`的单例的引用, 我们可以简单的使用 `@Inject`注解来声明字段\n\n\n``` java\npublic class MainActivity extends Activity {\n   @Inject MyTwitterApiClient mTwitterApiClient;\n   @Inject SharedPreferences sharedPreferences;\n\n   public void onCreate(Bundle savedInstance) {\n       // assign singleton instances to fields\n       InjectorClass.inject(this);\n   } \n\n```\n\n- **更容易配制复杂的依赖.**  那些你经常创建的对象有一个隐式的过程. Dagger2 遍历依赖图表并且生成以便于理解且追踪代码, 同时把你从编写大量的模版代码的工作中解救出来, 你正常的需要手工编写代码以获取引用并将他们作为依赖传递给其他对象. 它也有助于简化重构, 因为以可以专注于构建哪些模块而不是关注于他们被创建的顺序. \n\n- **单元和集成变得更为轻松.** 因为依赖图表是由我们自己创建的, 我们能够简单的切换模块，作出网络响应并且模拟这种行为 \n\n- **实例作用域.** 你不仅更为简单的管理整个应用程序的生命周期, 你还可以利用Dagger2 声明更为简短的生命周期的实例(比如, 绑定用户的seesion, Activity 的生命周期, etc.). \n\n## 设置\n\nAndroid studio通常情况下不会允许你连接到生成Dagger2的代码作为合法的类,  因为他们通常情况下不会添加到资源路径, 但是通过添加`android-apt` 插件能够添加这些文件到IDE路径，并且使你对这些文件有更多的可见性\n\n由于Android Gradle plugin 2.2注释处理是内置的, android-apt并不被受待见. `android-apt`不支持新的 `jack` \n\n在你的`app/build.gradle` 文件中添加以下3行的申请说明\n\n``` java\ndependencies {\n    // apt command comes from the android-apt plugin\n    apt 'com.google.dagger:dagger-compiler:2.8'\n    compile 'com.google.dagger:dagger:2.8'\n    provided 'javax.annotation:jsr250-api:1.0'\n}\n\n```\n\n如果你正在使用android gradle 2.3 插件, 你可以使用`annotationProcessor` 来代替apt-plugin:\n\n``` java\ndependencies {\n    // apt command comes from the android-apt plugin\n    compile \"com.google.dagger:dagger:2.9\"\n    annotationProcessor \"com.google.dagger:dagger-compiler:2.9\"\n    provided 'javax.annotation:jsr250-api:1.0'\n}\n\n```\n\n要注意的是`provided`关键字仅仅在编译期间被用来作为依赖关系, Dagger生成用于创建源代码中定义的类的依赖图的代码. 这些类在编译期间被添加到IDE类路径中. `annotationProcessor`关键字被Android gradle插件所识别并且不会把这些类他们添加到类路径中, 它们仅仅被用来注释处理, 以防止别人意外的引用他们. \n\n\n## 创建单例\n\n![Creatint singletons](https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_general.png)\n\n很简单的例子表明如何使用Dagger2 集中你所有创建的单例.\n类似于下面这样, 假设在你的Twitter客户端中你从没有使用过任何类型的的依赖注入框架写代码\n\n``` java\nOkHttpClient client = new OkHttpClient();\n\n// Enable caching for OkHttp\nint cacheSize = 10 * 1024 * 1024; // 10 MiB\nCache cache = new Cache(getApplication().getCacheDir(), cacheSize);\nclient.setCache(cache);\n\n// Used for caching authentication tokens\nSharedPreferences sharedPrefeences = PreferenceManager.getDefaultSharedPreferences(this);\n\n// Instantiate Gson\nGson gson = new GsonBuilder().create();\nGsonConverterFactory converterFactory = GsonConverterFactory.create(gson);\n\n// Build Retrofit\nRetrofit retrofit = new Retrofit.Builder()\n                                .baseUrl(\"https://api.github.com\")\n                                .addConverterFactory(converterFactory)\n                                .client(client)  // custom client\n                                .build();\n```\n\n## 声明你的单例\n\n你需要通过创建一个Dagger2 moudle来明确哪些对象应该被包含作为依赖链的一部分. 举例来说, 如果我们希望使一个单独的`Retrofit`单例绑定到整个应用程序的生命周期,  并且对我们所有的activity和fragment都是可用的, 我们首先要让Dagger 知道可以提供一个`Retrofit`单例\n\n因为我们希望设置caching, 我们需要一份Application Context上下文环境. 我们的第一个Dagger模块`AppModule.java`将被用来提供此引用, 我们还需要声明带有`@Provides`注解的方法来告诉Dagger这个方法是返回类型为`Application`的构造器: \n\n``` java\n@Module\npublic class AppModule {\n\n    Application mApplication;\n\n    public AppModule(Application application) {\n        mApplication = application;\n    }\n\n    @Provides\n    @Singleton\n    Application providesApplication() {\n        return mApplication;\n    }\n}\n```\n\n我们创建一个名为`NetModule.java`并且使用`@Module`标注的类来告诉Dagger在可用方法的范围内寻找来作为实例的提供者\n\n`@Singleton`注解同样告诉Dagger编译器这个实例在整个应用生命周期中应该仅仅被创建一次, 在以下的例子中, 我们指定`SharedPreferences` `Gson` `Cache` `OkHttpClient` `Retrofit` 作为可以用作依赖列表一部分的返回类型\n\n``` java\n@Module\npublic class NetModule {\n\n    String mBaseUrl;\n\n    // Constructor needs one parameter to instantiate.  \n    public NetModule(String baseUrl) {\n        this.mBaseUrl = baseUrl;\n    }\n\n    // Dagger will only look for methods annotated with @Provides\n    @Provides\n    @Singleton\n    // Application reference must come from AppModule.class\n    SharedPreferences providesSharedPreferences(Application application) {\n        return PreferenceManager.getDefaultSharedPreferences(application);\n    }\n\n    @Provides\n    @Singleton\n    Cache provideOkHttpCache(Application application) { \n        int cacheSize = 10 * 1024 * 1024; // 10 MiB\n        Cache cache = new Cache(application.getCacheDir(), cacheSize);\n        return cache;\n    }\n\n   @Provides \n   @Singleton\n   Gson provideGson() {  \n       GsonBuilder gsonBuilder = new GsonBuilder();\n       gsonBuilder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES);\n       return gsonBuilder.create();\n   }\n\n   @Provides\n   @Singleton\n   OkHttpClient provideOkHttpClient(Cache cache) {\n      OkHttpClient client = new OkHttpClient();\n      client.setCache(cache);\n      return client;\n   }\n\n   @Provides\n   @Singleton\n   Retrofit provideRetrofit(Gson gson, OkHttpClient okHttpClient) {\n      Retrofit retrofit = new Retrofit.Builder()\n                .addConverterFactory(GsonConverterFactory.create(gson))\n                .baseUrl(mBaseUrl)\n                .client(okHttpClient)\n                .build();\n        return retrofit;\n    }\n}\n```\n\n注意这个方法名 (i.e. provideGson(), provideRetrofit(), etc)可以起任何名. 使用`@Provides`注解的返回值类型被用来将此实例与其他任何相同类型的moudle相关联, `@Singleton`注解被用来像Dagger描述在整个应用程序生命周期期间仅仅初始化一次\n\n`Retrofit`的实例的同时依赖于`Gson`和`OkHttpClient`实例, 所以我们可以在同一个类中声明另外一个方法以获取这两个类型. 在这个方法中`@Provides`注解和这两个参数将会使得Dagger 意识到这里有`Gson`和`OkHttpClient`的依赖以创建`Retrofit`的实例\n\n## 声明注入目标\n\nDagger为你的activitys, services, 或fragments提供了一种简单的通过使用`@Inject`注解注入字段并且调用`inject()`方法来分配引用, 调用`inject()`方法将会使Dagger2 在依赖图谱中尝试寻找一个相匹配的返回类型来定位单例. 如果找到, 它将分配各自对应字段的引用. 比如, 在下面的例子中, 它会尝试寻找返回类型为`MyTwitterApiClient`和`SharedPreferences`的提供器(provider)\n\n``` java\npublic class MainActivity extends Activity {\n   @Inject MyTwitterApiClient mTwitterApiClient;\n   @Inject SharedPreferences sharedPreferences;\n\n  public void onCreate(Bundle savedInstance) {\n       // assign singleton instances to fields\n       InjectorClass.inject(this);\n   } \n```\nDagger2 中使用的注入器类被称为 component组件, 它为我们的activitys, services, 或则fragments分配引用以连接我们之前声明的单例, 我们同样需要一个`@Component`注解声明的类, 可以添加的activitys, services, 或则fragments应该在这个类中单独的使用`inject()`方法声明:\n\n\n``` java\n@Singleton\n@Component(modules={AppModule.class, NetModule.class})\npublic interface NetComponent {\n   void inject(MainActivity activity);\n   // void inject(MyFragment fragment);\n   // void inject(MyService service);\n}\n```\n\n注意这些类并不足以作为注入的目标, Dagger2 依赖相匹配的类, 你必须明确指明那个类应该被声明在内, (这里有一些[建议](https://blog.gouline.net/dagger-2-even-sharper-less-square-b52101863542#.vgmua0fkm)来解决这个问题, 但是这样做代码可能追踪更加困难相比简单的定义它们 )\n\n## 代码生成\n\n一件重要Dagger2的方面是, 这个库为标注了`@Component`的接口类生成代码, 你可以使用前缀为`@Dagger`(i.e. DaggerTwitterApiComponent.java)的类, 它将负责实例化我们的依赖图谱中的一个实例, 并且用它执行`@Inject`注解字段的注入工作. 请看(setup guide)[https://github.com/codepath/android_guides/wiki/Dependency-Injection-with-Dagger-2#setup].\n\n## 实例化组件\n\n我们应该在`Application`的类中做所有工作, 因为这些实例在整个应用程序的生命周期中仅仅被声明一次\n\n``` java\npublic class MyApp extends Application {\n\n    private NetComponent mNetComponent;\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n\n        // Dagger%COMPONENT_NAME%\n        mNetComponent = DaggerNetComponent.builder()\n                // list of modules that are part of this component need to be created here too\n                .appModule(new AppModule(this)) // This also corresponds to the name of your module: %component_name%Module\n                .netModule(new NetModule(\"https://api.github.com\"))\n                .build();\n\n        // If a Dagger 2 component does not have any constructor arguments for any of its modules,\n        // then we can use .create() as a shortcut instead:\n        //  mNetComponent = com.codepath.dagger.components.DaggerNetComponent.create();\n    }\n\n    public NetComponent getNetComponent() {\n       return mNetComponent;\n    }\n}\n```\n\n如果不能没有Dagger component组件的引用, 你要确保重构项目(在AndroidStudio中, select Build > Rebuild Project)\n\n因为我们覆写了默认的`Application`类, 我们同样修改应用程序`name`为`MyApp`, 这样, 你的应用程序将使用这个Applicaiton 类来处理最初的实例. \n\n``` java\n<application\n      android:allowBackup=\"true\"\n      android:name=\".MyApp\">\n```\n\n在我们Activity的内部, 我们只需要调用`inject()`方法就可以简单的访问这些组件\n\n``` java\npublic class MyActivity extends Activity {\n  @Inject OkHttpClient mOkHttpClient;\n  @Inject SharedPreferences sharedPreferences;\n\n  public void onCreate(Bundle savedInstance) {\n        // assign singleton instances to fields\n        // We need to cast to `MyApp` in order to get the right method\n        ((MyApp) getApplication()).getNetComponent().inject(this);\n    } \n```\n\n## 限制类型\n\n![Qualified types](https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_qualifiers.png)\n\n如果我们需要同一返回类型的两个不同对象, 我们可以使用`@Named`限定注解, 你需要在你提供单例的地方(`@Provides` annotation)和注入它们的地方(`@Inject` annotations)同时声明它们:\n\n``` java\n@Provides @Named(\"cached\")\n@Singleton\nOkHttpClient provideOkHttpClient(Cache cache) {\n    OkHttpClient client = new OkHttpClient();\n    client.setCache(cache);\n    return client;\n}\n\n@Provides @Named(\"non_cached\") @Singleton\nOkHttpClient provideOkHttpClient() {\n    OkHttpClient client = new OkHttpClient();\n    return client;\n}\n```\n\n当你注入这些单例的时候, 你同样需要`@Named`注解\n\n``` java\n@Inject @Named(\"cached\") OkHttpClient client;\n@Inject @Named(\"non_cached\") OkHttpClient client2;\n```\n\n`@Named`是Dagger预先定义的限定注解, 你可以很好的创建你自己的限定注解\n\n``` java\n@Qualifier\n@Documented\n@Retention(RUNTIME)\npublic @interface DefaultPreferences {\n}\n```\n\n## 作用域\n\n![Scopes](https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_scopes.png)\n\n在Dagger2, 你可以声明Component组件通过声明自定义的范围如何封装. 举例来说, 你可以创建一个仅仅在activity或者fragment生命周期运行期间的作用域. 你可以创建只映射到用户身份验证会话的作用域. \n\n\n\n\n\n\n利用作用域允许我们要么创建依赖组件要么创建子组件, 上面的例子表明我们所使用的`@Singleton`注解是伴随应用程序的整个生命周期, 我们同样依赖于一个主要的Dagger component组件.\n\n如果我们希望拥有一个并不需要常驻内存中的多个Component组件(i.e. 依赖于activity或者fragment生命周期, 甚至依赖于用户的登录状态的Component组件), 我们可以创建相关的组件活着子组件, 在任何一种情况下, 都会为你封装代码提供一种方式. 我们将在下文中看到如何同时使用它们. \n\n这里有使用这些方法的几点考虑:\n\n- **相关的组件要求父组件明确列出哪些依赖可以注入, 而子组件没有** 对于父组件来说, 你需要通过指明类型和方法, 以想子组件暴露它们\n\n``` java\n// parent component\n@Singleton\n@Component(modules={AppModule.class, NetModule.class})\npublic interface NetComponent {\n    // remove injection methods if downstream modules will perform injection\n\n    // downstream components need these exposed\n    // the method name does not matter, only the return type\n    Retrofit retrofit(); \n    OkHttpClient okHttpClient();\n    SharedPreferences sharedPreferences();\n}\n```\n\n如果你忘记添加这行代码, 你将要看到一个关于注入目标丢失的错误. 类似于private/public变量如何去管理那样, 使用父component组件允许更明确的控制以及更好的封装, 但是使用子component组件使得依赖注入在花费的代价上更为简单\n\n- **两个相互依赖的组件不能共享同一范围.** 举例来说, 两个组件不能同时使用 `@Singleton`注解 标注作用域, 这个限制是有[这里](https://github.com/google/dagger/issues/107#issuecomment-71073298)描述的原因导致的, 相关的组件需要定义它们自己的范围.\n\n\n\n\n\n\n\n\n\n\n##  依赖组件\n\n![Dependent Components](https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_dependency.png)\n\n举例来说, 如果我们想要使用 用户会话的整个生命周期\n我们可以声明我们自己的 `@UserScope`接口\n\n``` java\nimport java.lang.annotation.Retention;\nimport javax.inject.Scope;\n\n@Scope\npublic @interface UserScope {\n}\n```\n然后, 我们声明它的父组件\n\n``` java\n  @Singleton\n  @Component(modules={AppModule.class, NetModule.class})\n  public interface NetComponent {\n      // downstream components need these exposed with the return type\n      // method name does not really matter\n      Retrofit retrofit();\n  }\n```\n\n我们可以接着声明它的子组件\n\n\n``` java\n@UserScope // using the previously defined scope, note that @Singleton will not work\n@Component(dependencies = NetComponent.class, modules = GitHubModule.class)\npublic interface GitHubComponent {\n    void inject(MainActivity activity);\n}\n```\n\n我们假设下面的Github模块简单的返回一个Github Api的接口\n\n``` java\n@Module\npublic class GitHubModule {\n\n    public interface GitHubApiInterface {\n      @GET(\"/org/{orgName}/repos\")\n      Call<ArrayList<Repository>> getRepository(@Path(\"orgName\") String orgName);\n    }\n\n    @Provides\n    @UserScope // needs to be consistent with the component scope\n    public GitHubApiInterface providesGitHubInterface(Retrofit retrofit) {\n        return retrofit.create(GitHubApiInterface.class);\n    }\n}\n```\n\n为了`GitHubModule.java`获得`Retrofit`实例的引用, 我们需要在调用它之前的组件中明确定义它们, 如果说在它之后执行注入, 它们应该在之后的组件中移除它们:\n\n``` java\n@Singleton\n@Component(modules={AppModule.class, NetModule.class})\npublic interface NetComponent {\n    // remove injection methods if downstream modules will perform injection\n\n    // downstream components need these exposed\n    Retrofit retrofit();\n    OkHttpClient okHttpClient();\n    SharedPreferences sharedPreferences();\n}\n```\n\n最后一步是使用`GitHubComponent` 执行实例化, 这个时候, 我们首先需要构建`NetComponent`, 并且在`DaggerGitHubComponent` builder的构造函数中传递它: \n\n``` java\nNetComponent mNetComponent = DaggerNetComponent.builder()\n                .appModule(new AppModule(this))\n                .netModule(new NetModule(\"https://api.github.com\"))\n                .build();\n\nGitHubComponent gitHubComponent = DaggerGitHubComponent.builder()\n                .netComponent(mNetComponent)\n                .gitHubModule(new GitHubModule())\n                .build();\n```\n\n[this example code ](https://github.com/codepath/dagger2-example)\n\n子组件\n\n![Subcomponents](https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_subcomponent.png)\n\n使用子组件是扩展组件的对象图的另外一种方式, 就像依赖的组件那样, 子组件有它们自己的生命周期并且当所有子组件的引用都消失的时候是可以被垃圾收集的, 并具有相同的范围限制。在使用这种方法的一个优点是，不需要定义所有下游组件. \n\n另一个主要的不同之处就是子组件只需要在父组件中声明. \n\n这里有一个为Activity使用子组件的例子. 我们使用自定义的范围和`@Subcomponent`注解标注一个类\n\n``` java\n@MyActivityScope\n@Subcomponent(modules={ MyActivityModule.class })\npublic interface MyActivitySubComponent {\n    @Named(\"my_list\") ArrayAdapter myListAdapter();\n}\n```\n\nmoudle模块使用下面声明\n\n``` java\n@Module\npublic class MyActivityModule {\n    private final MyActivity activity;\n\n    // must be instantiated with an activity\n    public MyActivityModule(MyActivity activity) { this.activity = activity; }\n\n    @Provides @MyActivityScope @Named(\"my_list\")\n    public ArrayAdapter providesMyListAdapter() {\n        return new ArrayAdapter<String>(activity, android.R.layout.my_list);\n    }\n    ...\n}\n```\n\n最后, 在父组件中, 我们声明一个工厂方法\n\n``` java\n@Singleton\n@Component(modules={ ... })\npublic interface MyApplicationComponent {\n    // injection targets here\n\n    // factory method to instantiate the subcomponent defined here (passing in the module instance)\n    MyActivitySubComponent newMyActivitySubcomponent(MyActivityModule activityModule);\n}\n```\n\n在上面的例子中, `newMyActivitySubcomponent()`每次被调用的时候, 一个新的子组件的实例都会被创建, 使用子模块moudle注入到一个activity\n\n``` java\n@Singleton\n@Component(modules={ ... })\npublic interface MyApplicationComponent {\n    // injection targets here\n\n    // factory method to instantiate the subcomponent defined here (passing in the module instance)\n    MyActivitySubComponent newMyActivitySubcomponent(MyActivityModule activityModule);\n}\n```\n子组件创建\n\n![Available starting in v2.7](https://raw.githubusercontent.com/codepath/android_guides/master/images/subcomponent_builders.png)\n\n\n\n","slug":"Dagger2","published":1,"updated":"2017-05-02T08:22:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7fuy4590005ji5jghjaxjrm","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>很多Android Apps通常依赖于其他依赖库的实例化对象, 举例来说,  一个Twitter客户端可能使用类似<a href=\"https://github.com/square/retrofit\" target=\"_blank\" rel=\"external\">Retrofit</a>的网络依赖库来进行构建, 要使用这个库, 你需要添加解析的库，比如说<a href=\"https://github.com/google/gson\" target=\"_blank\" rel=\"external\">Gson</a>.  此外,  那些实现认证或者缓存的类可能需要访问shared preferences和其他公共的存储单元，需要首先实例化他们并且创建固有的依赖链.     </p>\n<a id=\"more\"></a>\n<p>Dagger2 为你分析这些依赖库, 并且生成代码以帮助把他们连接在一起, 虽然还有其他的Java 依赖注入库, 但是他们的大多数在依赖XML的时候有很多限制, 在运行期间需要验证依赖关系的问题, 或者在启动期间导致性能上的损耗,  Dagger 2纯粹依赖于使用Java注释处理器和编译时检查来分析和验证依赖性. 它被认为是迄今为止效率最高的依赖注入框架之一. </p>\n<h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><p>这里有使用Dagger2 的一些优点</p>\n<ul>\n<li><strong>简化对共享实例的访问.</strong> 举例来说, 正如<a href=\"https://github.com/JakeWharton/butterknife\" target=\"_blank\" rel=\"external\">ButterKnife</a>声明对View, 事件处理, 资源的引用更为简单那种, Dagger2为获取共享实例的饮用提供了一种简单的方式. 比如,一旦我们在Dagger中声明类似<code>MyTwitterApiClient</code>或者<code>SharedPreferences</code>的单例的引用, 我们可以简单的使用 <code>@Inject</code>注解来声明字段</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\">   <span class=\"meta\">@Inject</span> MyTwitterApiClient mTwitterApiClient;</div><div class=\"line\">   <span class=\"meta\">@Inject</span> SharedPreferences sharedPreferences;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstance)</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">// assign singleton instances to fields</span></div><div class=\"line\">       InjectorClass.inject(<span class=\"keyword\">this</span>);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>更容易配制复杂的依赖.</strong>  那些你经常创建的对象有一个隐式的过程. Dagger2 遍历依赖图表并且生成以便于理解且追踪代码, 同时把你从编写大量的模版代码的工作中解救出来, 你正常的需要手工编写代码以获取引用并将他们作为依赖传递给其他对象. 它也有助于简化重构, 因为以可以专注于构建哪些模块而不是关注于他们被创建的顺序. </p>\n</li>\n<li><p><strong>单元和集成变得更为轻松.</strong> 因为依赖图表是由我们自己创建的, 我们能够简单的切换模块，作出网络响应并且模拟这种行为 </p>\n</li>\n<li><p><strong>实例作用域.</strong> 你不仅更为简单的管理整个应用程序的生命周期, 你还可以利用Dagger2 声明更为简短的生命周期的实例(比如, 绑定用户的seesion, Activity 的生命周期, etc.). </p>\n</li>\n</ul>\n<h2 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h2><p>Android studio通常情况下不会允许你连接到生成Dagger2的代码作为合法的类,  因为他们通常情况下不会添加到资源路径, 但是通过添加<code>android-apt</code> 插件能够添加这些文件到IDE路径，并且使你对这些文件有更多的可见性</p>\n<p>由于Android Gradle plugin 2.2注释处理是内置的, android-apt并不被受待见. <code>android-apt</code>不支持新的 <code>jack</code> </p>\n<p>在你的<code>app/build.gradle</code> 文件中添加以下3行的申请说明</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">    <span class=\"comment\">// apt command comes from the android-apt plugin</span></div><div class=\"line\">    apt <span class=\"string\">'com.google.dagger:dagger-compiler:2.8'</span></div><div class=\"line\">    compile <span class=\"string\">'com.google.dagger:dagger:2.8'</span></div><div class=\"line\">    provided <span class=\"string\">'javax.annotation:jsr250-api:1.0'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果你正在使用android gradle 2.3 插件, 你可以使用<code>annotationProcessor</code> 来代替apt-plugin:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">    <span class=\"comment\">// apt command comes from the android-apt plugin</span></div><div class=\"line\">    compile <span class=\"string\">\"com.google.dagger:dagger:2.9\"</span></div><div class=\"line\">    annotationProcessor <span class=\"string\">\"com.google.dagger:dagger-compiler:2.9\"</span></div><div class=\"line\">    provided <span class=\"string\">'javax.annotation:jsr250-api:1.0'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>要注意的是<code>provided</code>关键字仅仅在编译期间被用来作为依赖关系, Dagger生成用于创建源代码中定义的类的依赖图的代码. 这些类在编译期间被添加到IDE类路径中. <code>annotationProcessor</code>关键字被Android gradle插件所识别并且不会把这些类他们添加到类路径中, 它们仅仅被用来注释处理, 以防止别人意外的引用他们. </p>\n<h2 id=\"创建单例\"><a href=\"#创建单例\" class=\"headerlink\" title=\"创建单例\"></a>创建单例</h2><p><img src=\"https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_general.png\" alt=\"Creatint singletons\"></p>\n<p>很简单的例子表明如何使用Dagger2 集中你所有创建的单例.<br>类似于下面这样, 假设在你的Twitter客户端中你从没有使用过任何类型的的依赖注入框架写代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Enable caching for OkHttp</span></div><div class=\"line\"><span class=\"keyword\">int</span> cacheSize = <span class=\"number\">10</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>; <span class=\"comment\">// 10 MiB</span></div><div class=\"line\">Cache cache = <span class=\"keyword\">new</span> Cache(getApplication().getCacheDir(), cacheSize);</div><div class=\"line\">client.setCache(cache);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Used for caching authentication tokens</span></div><div class=\"line\">SharedPreferences sharedPrefeences = PreferenceManager.getDefaultSharedPreferences(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Instantiate Gson</span></div><div class=\"line\">Gson gson = <span class=\"keyword\">new</span> GsonBuilder().create();</div><div class=\"line\">GsonConverterFactory converterFactory = GsonConverterFactory.create(gson);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Build Retrofit</span></div><div class=\"line\">Retrofit retrofit = <span class=\"keyword\">new</span> Retrofit.Builder()</div><div class=\"line\">                                .baseUrl(<span class=\"string\">\"https://api.github.com\"</span>)</div><div class=\"line\">                                .addConverterFactory(converterFactory)</div><div class=\"line\">                                .client(client)  <span class=\"comment\">// custom client</span></div><div class=\"line\">                                .build();</div></pre></td></tr></table></figure>\n<h2 id=\"声明你的单例\"><a href=\"#声明你的单例\" class=\"headerlink\" title=\"声明你的单例\"></a>声明你的单例</h2><p>你需要通过创建一个Dagger2 moudle来明确哪些对象应该被包含作为依赖链的一部分. 举例来说, 如果我们希望使一个单独的<code>Retrofit</code>单例绑定到整个应用程序的生命周期,  并且对我们所有的activity和fragment都是可用的, 我们首先要让Dagger 知道可以提供一个<code>Retrofit</code>单例</p>\n<p>因为我们希望设置caching, 我们需要一份Application Context上下文环境. 我们的第一个Dagger模块<code>AppModule.java</code>将被用来提供此引用, 我们还需要声明带有<code>@Provides</code>注解的方法来告诉Dagger这个方法是返回类型为<code>Application</code>的构造器: </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Module</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppModule</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    Application mApplication;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AppModule</span><span class=\"params\">(Application application)</span> </span>&#123;</div><div class=\"line\">        mApplication = application;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@Singleton</span></div><div class=\"line\">    <span class=\"function\">Application <span class=\"title\">providesApplication</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mApplication;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们创建一个名为<code>NetModule.java</code>并且使用<code>@Module</code>标注的类来告诉Dagger在可用方法的范围内寻找来作为实例的提供者</p>\n<p><code>@Singleton</code>注解同样告诉Dagger编译器这个实例在整个应用生命周期中应该仅仅被创建一次, 在以下的例子中, 我们指定<code>SharedPreferences</code> <code>Gson</code> <code>Cache</code> <code>OkHttpClient</code> <code>Retrofit</code> 作为可以用作依赖列表一部分的返回类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Module</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NetModule</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    String mBaseUrl;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Constructor needs one parameter to instantiate.  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NetModule</span><span class=\"params\">(String baseUrl)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.mBaseUrl = baseUrl;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Dagger will only look for methods annotated with @Provides</span></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@Singleton</span></div><div class=\"line\">    <span class=\"comment\">// Application reference must come from AppModule.class</span></div><div class=\"line\">    <span class=\"function\">SharedPreferences <span class=\"title\">providesSharedPreferences</span><span class=\"params\">(Application application)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> PreferenceManager.getDefaultSharedPreferences(application);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@Singleton</span></div><div class=\"line\">    <span class=\"function\">Cache <span class=\"title\">provideOkHttpCache</span><span class=\"params\">(Application application)</span> </span>&#123; </div><div class=\"line\">        <span class=\"keyword\">int</span> cacheSize = <span class=\"number\">10</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>; <span class=\"comment\">// 10 MiB</span></div><div class=\"line\">        Cache cache = <span class=\"keyword\">new</span> Cache(application.getCacheDir(), cacheSize);</div><div class=\"line\">        <span class=\"keyword\">return</span> cache;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Provides</span> </div><div class=\"line\">   <span class=\"meta\">@Singleton</span></div><div class=\"line\">   <span class=\"function\">Gson <span class=\"title\">provideGson</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">       GsonBuilder gsonBuilder = <span class=\"keyword\">new</span> GsonBuilder();</div><div class=\"line\">       gsonBuilder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES);</div><div class=\"line\">       <span class=\"keyword\">return</span> gsonBuilder.create();</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Provides</span></div><div class=\"line\">   <span class=\"meta\">@Singleton</span></div><div class=\"line\">   <span class=\"function\">OkHttpClient <span class=\"title\">provideOkHttpClient</span><span class=\"params\">(Cache cache)</span> </span>&#123;</div><div class=\"line\">      OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient();</div><div class=\"line\">      client.setCache(cache);</div><div class=\"line\">      <span class=\"keyword\">return</span> client;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Provides</span></div><div class=\"line\">   <span class=\"meta\">@Singleton</span></div><div class=\"line\">   <span class=\"function\">Retrofit <span class=\"title\">provideRetrofit</span><span class=\"params\">(Gson gson, OkHttpClient okHttpClient)</span> </span>&#123;</div><div class=\"line\">      Retrofit retrofit = <span class=\"keyword\">new</span> Retrofit.Builder()</div><div class=\"line\">                .addConverterFactory(GsonConverterFactory.create(gson))</div><div class=\"line\">                .baseUrl(mBaseUrl)</div><div class=\"line\">                .client(okHttpClient)</div><div class=\"line\">                .build();</div><div class=\"line\">        <span class=\"keyword\">return</span> retrofit;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意这个方法名 (i.e. provideGson(), provideRetrofit(), etc)可以起任何名. 使用<code>@Provides</code>注解的返回值类型被用来将此实例与其他任何相同类型的moudle相关联, <code>@Singleton</code>注解被用来像Dagger描述在整个应用程序生命周期期间仅仅初始化一次</p>\n<p><code>Retrofit</code>的实例的同时依赖于<code>Gson</code>和<code>OkHttpClient</code>实例, 所以我们可以在同一个类中声明另外一个方法以获取这两个类型. 在这个方法中<code>@Provides</code>注解和这两个参数将会使得Dagger 意识到这里有<code>Gson</code>和<code>OkHttpClient</code>的依赖以创建<code>Retrofit</code>的实例</p>\n<h2 id=\"声明注入目标\"><a href=\"#声明注入目标\" class=\"headerlink\" title=\"声明注入目标\"></a>声明注入目标</h2><p>Dagger为你的activitys, services, 或fragments提供了一种简单的通过使用<code>@Inject</code>注解注入字段并且调用<code>inject()</code>方法来分配引用, 调用<code>inject()</code>方法将会使Dagger2 在依赖图谱中尝试寻找一个相匹配的返回类型来定位单例. 如果找到, 它将分配各自对应字段的引用. 比如, 在下面的例子中, 它会尝试寻找返回类型为<code>MyTwitterApiClient</code>和<code>SharedPreferences</code>的提供器(provider)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\">   <span class=\"meta\">@Inject</span> MyTwitterApiClient mTwitterApiClient;</div><div class=\"line\">   <span class=\"meta\">@Inject</span> SharedPreferences sharedPreferences;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstance)</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">// assign singleton instances to fields</span></div><div class=\"line\">       InjectorClass.inject(<span class=\"keyword\">this</span>);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>Dagger2 中使用的注入器类被称为 component组件, 它为我们的activitys, services, 或则fragments分配引用以连接我们之前声明的单例, 我们同样需要一个<code>@Component</code>注解声明的类, 可以添加的activitys, services, 或则fragments应该在这个类中单独的使用<code>inject()</code>方法声明:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules=&#123;AppModule.class, NetModule.class&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">NetComponent</span> </span>&#123;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">(MainActivity activity)</span></span>;</div><div class=\"line\">   <span class=\"comment\">// void inject(MyFragment fragment);</span></div><div class=\"line\">   <span class=\"comment\">// void inject(MyService service);</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意这些类并不足以作为注入的目标, Dagger2 依赖相匹配的类, 你必须明确指明那个类应该被声明在内, (这里有一些<a href=\"https://blog.gouline.net/dagger-2-even-sharper-less-square-b52101863542#.vgmua0fkm\" target=\"_blank\" rel=\"external\">建议</a>来解决这个问题, 但是这样做代码可能追踪更加困难相比简单的定义它们 )</p>\n<h2 id=\"代码生成\"><a href=\"#代码生成\" class=\"headerlink\" title=\"代码生成\"></a>代码生成</h2><p>一件重要Dagger2的方面是, 这个库为标注了<code>@Component</code>的接口类生成代码, 你可以使用前缀为<code>@Dagger</code>(i.e. DaggerTwitterApiComponent.java)的类, 它将负责实例化我们的依赖图谱中的一个实例, 并且用它执行<code>@Inject</code>注解字段的注入工作. 请看(setup guide)[<a href=\"https://github.com/codepath/android_guides/wiki/Dependency-Injection-with-Dagger-2#setup\" target=\"_blank\" rel=\"external\">https://github.com/codepath/android_guides/wiki/Dependency-Injection-with-Dagger-2#setup</a>].</p>\n<h2 id=\"实例化组件\"><a href=\"#实例化组件\" class=\"headerlink\" title=\"实例化组件\"></a>实例化组件</h2><p>我们应该在<code>Application</code>的类中做所有工作, 因为这些实例在整个应用程序的生命周期中仅仅被声明一次</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> NetComponent mNetComponent;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Dagger%COMPONENT_NAME%</span></div><div class=\"line\">        mNetComponent = DaggerNetComponent.builder()</div><div class=\"line\">                <span class=\"comment\">// list of modules that are part of this component need to be created here too</span></div><div class=\"line\">                .appModule(<span class=\"keyword\">new</span> AppModule(<span class=\"keyword\">this</span>)) <span class=\"comment\">// This also corresponds to the name of your module: %component_name%Module</span></div><div class=\"line\">                .netModule(<span class=\"keyword\">new</span> NetModule(<span class=\"string\">\"https://api.github.com\"</span>))</div><div class=\"line\">                .build();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// If a Dagger 2 component does not have any constructor arguments for any of its modules,</span></div><div class=\"line\">        <span class=\"comment\">// then we can use .create() as a shortcut instead:</span></div><div class=\"line\">        <span class=\"comment\">//  mNetComponent = com.codepath.dagger.components.DaggerNetComponent.create();</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> NetComponent <span class=\"title\">getNetComponent</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> mNetComponent;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果不能没有Dagger component组件的引用, 你要确保重构项目(在AndroidStudio中, select Build &gt; Rebuild Project)</p>\n<p>因为我们覆写了默认的<code>Application</code>类, 我们同样修改应用程序<code>name</code>为<code>MyApp</code>, 这样, 你的应用程序将使用这个Applicaiton 类来处理最初的实例. </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;application</div><div class=\"line\">      android:allowBackup=<span class=\"string\">\"true\"</span></div><div class=\"line\">      android:name=<span class=\"string\">\".MyApp\"</span>&gt;</div></pre></td></tr></table></figure>\n<p>在我们Activity的内部, 我们只需要调用<code>inject()</code>方法就可以简单的访问这些组件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@Inject</span> OkHttpClient mOkHttpClient;</div><div class=\"line\">  <span class=\"meta\">@Inject</span> SharedPreferences sharedPreferences;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstance)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// assign singleton instances to fields</span></div><div class=\"line\">        <span class=\"comment\">// We need to cast to `MyApp` in order to get the right method</span></div><div class=\"line\">        ((MyApp) getApplication()).getNetComponent().inject(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"限制类型\"><a href=\"#限制类型\" class=\"headerlink\" title=\"限制类型\"></a>限制类型</h2><p><img src=\"https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_qualifiers.png\" alt=\"Qualified types\"></p>\n<p>如果我们需要同一返回类型的两个不同对象, 我们可以使用<code>@Named</code>限定注解, 你需要在你提供单例的地方(<code>@Provides</code> annotation)和注入它们的地方(<code>@Inject</code> annotations)同时声明它们:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Provides</span> <span class=\"meta\">@Named</span>(<span class=\"string\">\"cached\"</span>)</div><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"function\">OkHttpClient <span class=\"title\">provideOkHttpClient</span><span class=\"params\">(Cache cache)</span> </span>&#123;</div><div class=\"line\">    OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient();</div><div class=\"line\">    client.setCache(cache);</div><div class=\"line\">    <span class=\"keyword\">return</span> client;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Provides</span> <span class=\"meta\">@Named</span>(<span class=\"string\">\"non_cached\"</span>) <span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"function\">OkHttpClient <span class=\"title\">provideOkHttpClient</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient();</div><div class=\"line\">    <span class=\"keyword\">return</span> client;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当你注入这些单例的时候, 你同样需要<code>@Named</code>注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Inject</span> <span class=\"meta\">@Named</span>(<span class=\"string\">\"cached\"</span>) OkHttpClient client;</div><div class=\"line\"><span class=\"meta\">@Inject</span> <span class=\"meta\">@Named</span>(<span class=\"string\">\"non_cached\"</span>) OkHttpClient client2;</div></pre></td></tr></table></figure>\n<p><code>@Named</code>是Dagger预先定义的限定注解, 你可以很好的创建你自己的限定注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Qualifier</span></div><div class=\"line\"><span class=\"meta\">@Documented</span></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RUNTIME)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> DefaultPreferences &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p><img src=\"https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_scopes.png\" alt=\"Scopes\"></p>\n<p>在Dagger2, 你可以声明Component组件通过声明自定义的范围如何封装. 举例来说, 你可以创建一个仅仅在activity或者fragment生命周期运行期间的作用域. 你可以创建只映射到用户身份验证会话的作用域. </p>\n<p>利用作用域允许我们要么创建依赖组件要么创建子组件, 上面的例子表明我们所使用的<code>@Singleton</code>注解是伴随应用程序的整个生命周期, 我们同样依赖于一个主要的Dagger component组件.</p>\n<p>如果我们希望拥有一个并不需要常驻内存中的多个Component组件(i.e. 依赖于activity或者fragment生命周期, 甚至依赖于用户的登录状态的Component组件), 我们可以创建相关的组件活着子组件, 在任何一种情况下, 都会为你封装代码提供一种方式. 我们将在下文中看到如何同时使用它们. </p>\n<p>这里有使用这些方法的几点考虑:</p>\n<ul>\n<li><strong>相关的组件要求父组件明确列出哪些依赖可以注入, 而子组件没有</strong> 对于父组件来说, 你需要通过指明类型和方法, 以想子组件暴露它们</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// parent component</span></div><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules=&#123;AppModule.class, NetModule.class&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">NetComponent</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// remove injection methods if downstream modules will perform injection</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// downstream components need these exposed</span></div><div class=\"line\">    <span class=\"comment\">// the method name does not matter, only the return type</span></div><div class=\"line\">    <span class=\"function\">Retrofit <span class=\"title\">retrofit</span><span class=\"params\">()</span></span>; </div><div class=\"line\">    <span class=\"function\">OkHttpClient <span class=\"title\">okHttpClient</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\">SharedPreferences <span class=\"title\">sharedPreferences</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果你忘记添加这行代码, 你将要看到一个关于注入目标丢失的错误. 类似于private/public变量如何去管理那样, 使用父component组件允许更明确的控制以及更好的封装, 但是使用子component组件使得依赖注入在花费的代价上更为简单</p>\n<ul>\n<li><strong>两个相互依赖的组件不能共享同一范围.</strong> 举例来说, 两个组件不能同时使用 <code>@Singleton</code>注解 标注作用域, 这个限制是有<a href=\"https://github.com/google/dagger/issues/107#issuecomment-71073298\" target=\"_blank\" rel=\"external\">这里</a>描述的原因导致的, 相关的组件需要定义它们自己的范围.</li>\n</ul>\n<h2 id=\"依赖组件\"><a href=\"#依赖组件\" class=\"headerlink\" title=\"依赖组件\"></a>依赖组件</h2><p><img src=\"https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_dependency.png\" alt=\"Dependent Components\"></p>\n<p>举例来说, 如果我们想要使用 用户会话的整个生命周期<br>我们可以声明我们自己的 <code>@UserScope</code>接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.inject.Scope;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Scope</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> UserScope &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后, 我们声明它的父组件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules=&#123;AppModule.class, NetModule.class&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">NetComponent</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// downstream components need these exposed with the return type</span></div><div class=\"line\">    <span class=\"comment\">// method name does not really matter</span></div><div class=\"line\">    <span class=\"function\">Retrofit <span class=\"title\">retrofit</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们可以接着声明它的子组件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@UserScope</span> <span class=\"comment\">// using the previously defined scope, note that @Singleton will not work</span></div><div class=\"line\"><span class=\"meta\">@Component</span>(dependencies = NetComponent.class, modules = GitHubModule.class)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">GitHubComponent</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">(MainActivity activity)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们假设下面的Github模块简单的返回一个Github Api的接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Module</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GitHubModule</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">GitHubApiInterface</span> </span>&#123;</div><div class=\"line\">      <span class=\"meta\">@GET</span>(<span class=\"string\">\"/org/&#123;orgName&#125;/repos\"</span>)</div><div class=\"line\">      Call&lt;ArrayList&lt;Repository&gt;&gt; getRepository(<span class=\"meta\">@Path</span>(<span class=\"string\">\"orgName\"</span>) String orgName);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@UserScope</span> <span class=\"comment\">// needs to be consistent with the component scope</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> GitHubApiInterface <span class=\"title\">providesGitHubInterface</span><span class=\"params\">(Retrofit retrofit)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> retrofit.create(GitHubApiInterface.class);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>为了<code>GitHubModule.java</code>获得<code>Retrofit</code>实例的引用, 我们需要在调用它之前的组件中明确定义它们, 如果说在它之后执行注入, 它们应该在之后的组件中移除它们:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules=&#123;AppModule.class, NetModule.class&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">NetComponent</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// remove injection methods if downstream modules will perform injection</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// downstream components need these exposed</span></div><div class=\"line\">    <span class=\"function\">Retrofit <span class=\"title\">retrofit</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\">OkHttpClient <span class=\"title\">okHttpClient</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\">SharedPreferences <span class=\"title\">sharedPreferences</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最后一步是使用<code>GitHubComponent</code> 执行实例化, 这个时候, 我们首先需要构建<code>NetComponent</code>, 并且在<code>DaggerGitHubComponent</code> builder的构造函数中传递它: </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">NetComponent mNetComponent = DaggerNetComponent.builder()</div><div class=\"line\">                .appModule(<span class=\"keyword\">new</span> AppModule(<span class=\"keyword\">this</span>))</div><div class=\"line\">                .netModule(<span class=\"keyword\">new</span> NetModule(<span class=\"string\">\"https://api.github.com\"</span>))</div><div class=\"line\">                .build();</div><div class=\"line\"></div><div class=\"line\">GitHubComponent gitHubComponent = DaggerGitHubComponent.builder()</div><div class=\"line\">                .netComponent(mNetComponent)</div><div class=\"line\">                .gitHubModule(<span class=\"keyword\">new</span> GitHubModule())</div><div class=\"line\">                .build();</div></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/codepath/dagger2-example\" target=\"_blank\" rel=\"external\">this example code </a></p>\n<p>子组件</p>\n<p><img src=\"https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_subcomponent.png\" alt=\"Subcomponents\"></p>\n<p>使用子组件是扩展组件的对象图的另外一种方式, 就像依赖的组件那样, 子组件有它们自己的生命周期并且当所有子组件的引用都消失的时候是可以被垃圾收集的, 并具有相同的范围限制。在使用这种方法的一个优点是，不需要定义所有下游组件. </p>\n<p>另一个主要的不同之处就是子组件只需要在父组件中声明. </p>\n<p>这里有一个为Activity使用子组件的例子. 我们使用自定义的范围和<code>@Subcomponent</code>注解标注一个类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@MyActivityScope</span></div><div class=\"line\"><span class=\"meta\">@Subcomponent</span>(modules=&#123; MyActivityModule.class &#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyActivitySubComponent</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Named</span>(<span class=\"string\">\"my_list\"</span>) <span class=\"function\">ArrayAdapter <span class=\"title\">myListAdapter</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>moudle模块使用下面声明</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Module</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyActivityModule</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> MyActivity activity;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// must be instantiated with an activity</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyActivityModule</span><span class=\"params\">(MyActivity activity)</span> </span>&#123; <span class=\"keyword\">this</span>.activity = activity; &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span> <span class=\"meta\">@MyActivityScope</span> <span class=\"meta\">@Named</span>(<span class=\"string\">\"my_list\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ArrayAdapter <span class=\"title\">providesMyListAdapter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayAdapter&lt;String&gt;(activity, android.R.layout.my_list);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最后, 在父组件中, 我们声明一个工厂方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules=&#123; ... &#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyApplicationComponent</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// injection targets here</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// factory method to instantiate the subcomponent defined here (passing in the module instance)</span></div><div class=\"line\">    <span class=\"function\">MyActivitySubComponent <span class=\"title\">newMyActivitySubcomponent</span><span class=\"params\">(MyActivityModule activityModule)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在上面的例子中, <code>newMyActivitySubcomponent()</code>每次被调用的时候, 一个新的子组件的实例都会被创建, 使用子模块moudle注入到一个activity</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules=&#123; ... &#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyApplicationComponent</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// injection targets here</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// factory method to instantiate the subcomponent defined here (passing in the module instance)</span></div><div class=\"line\">    <span class=\"function\">MyActivitySubComponent <span class=\"title\">newMyActivitySubcomponent</span><span class=\"params\">(MyActivityModule activityModule)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>子组件创建</p>\n<p><img src=\"https://raw.githubusercontent.com/codepath/android_guides/master/images/subcomponent_builders.png\" alt=\"Available starting in v2.7\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>很多Android Apps通常依赖于其他依赖库的实例化对象, 举例来说,  一个Twitter客户端可能使用类似<a href=\"https://github.com/square/retrofit\" target=\"_blank\" rel=\"external\">Retrofit</a>的网络依赖库来进行构建, 要使用这个库, 你需要添加解析的库，比如说<a href=\"https://github.com/google/gson\" target=\"_blank\" rel=\"external\">Gson</a>.  此外,  那些实现认证或者缓存的类可能需要访问shared preferences和其他公共的存储单元，需要首先实例化他们并且创建固有的依赖链.     </p>","more":"<p>Dagger2 为你分析这些依赖库, 并且生成代码以帮助把他们连接在一起, 虽然还有其他的Java 依赖注入库, 但是他们的大多数在依赖XML的时候有很多限制, 在运行期间需要验证依赖关系的问题, 或者在启动期间导致性能上的损耗,  Dagger 2纯粹依赖于使用Java注释处理器和编译时检查来分析和验证依赖性. 它被认为是迄今为止效率最高的依赖注入框架之一. </p>\n<h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><p>这里有使用Dagger2 的一些优点</p>\n<ul>\n<li><strong>简化对共享实例的访问.</strong> 举例来说, 正如<a href=\"https://github.com/JakeWharton/butterknife\" target=\"_blank\" rel=\"external\">ButterKnife</a>声明对View, 事件处理, 资源的引用更为简单那种, Dagger2为获取共享实例的饮用提供了一种简单的方式. 比如,一旦我们在Dagger中声明类似<code>MyTwitterApiClient</code>或者<code>SharedPreferences</code>的单例的引用, 我们可以简单的使用 <code>@Inject</code>注解来声明字段</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\">   <span class=\"meta\">@Inject</span> MyTwitterApiClient mTwitterApiClient;</div><div class=\"line\">   <span class=\"meta\">@Inject</span> SharedPreferences sharedPreferences;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstance)</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">// assign singleton instances to fields</span></div><div class=\"line\">       InjectorClass.inject(<span class=\"keyword\">this</span>);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>更容易配制复杂的依赖.</strong>  那些你经常创建的对象有一个隐式的过程. Dagger2 遍历依赖图表并且生成以便于理解且追踪代码, 同时把你从编写大量的模版代码的工作中解救出来, 你正常的需要手工编写代码以获取引用并将他们作为依赖传递给其他对象. 它也有助于简化重构, 因为以可以专注于构建哪些模块而不是关注于他们被创建的顺序. </p>\n</li>\n<li><p><strong>单元和集成变得更为轻松.</strong> 因为依赖图表是由我们自己创建的, 我们能够简单的切换模块，作出网络响应并且模拟这种行为 </p>\n</li>\n<li><p><strong>实例作用域.</strong> 你不仅更为简单的管理整个应用程序的生命周期, 你还可以利用Dagger2 声明更为简短的生命周期的实例(比如, 绑定用户的seesion, Activity 的生命周期, etc.). </p>\n</li>\n</ul>\n<h2 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h2><p>Android studio通常情况下不会允许你连接到生成Dagger2的代码作为合法的类,  因为他们通常情况下不会添加到资源路径, 但是通过添加<code>android-apt</code> 插件能够添加这些文件到IDE路径，并且使你对这些文件有更多的可见性</p>\n<p>由于Android Gradle plugin 2.2注释处理是内置的, android-apt并不被受待见. <code>android-apt</code>不支持新的 <code>jack</code> </p>\n<p>在你的<code>app/build.gradle</code> 文件中添加以下3行的申请说明</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">    <span class=\"comment\">// apt command comes from the android-apt plugin</span></div><div class=\"line\">    apt <span class=\"string\">'com.google.dagger:dagger-compiler:2.8'</span></div><div class=\"line\">    compile <span class=\"string\">'com.google.dagger:dagger:2.8'</span></div><div class=\"line\">    provided <span class=\"string\">'javax.annotation:jsr250-api:1.0'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果你正在使用android gradle 2.3 插件, 你可以使用<code>annotationProcessor</code> 来代替apt-plugin:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">    <span class=\"comment\">// apt command comes from the android-apt plugin</span></div><div class=\"line\">    compile <span class=\"string\">\"com.google.dagger:dagger:2.9\"</span></div><div class=\"line\">    annotationProcessor <span class=\"string\">\"com.google.dagger:dagger-compiler:2.9\"</span></div><div class=\"line\">    provided <span class=\"string\">'javax.annotation:jsr250-api:1.0'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>要注意的是<code>provided</code>关键字仅仅在编译期间被用来作为依赖关系, Dagger生成用于创建源代码中定义的类的依赖图的代码. 这些类在编译期间被添加到IDE类路径中. <code>annotationProcessor</code>关键字被Android gradle插件所识别并且不会把这些类他们添加到类路径中, 它们仅仅被用来注释处理, 以防止别人意外的引用他们. </p>\n<h2 id=\"创建单例\"><a href=\"#创建单例\" class=\"headerlink\" title=\"创建单例\"></a>创建单例</h2><p><img src=\"https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_general.png\" alt=\"Creatint singletons\"></p>\n<p>很简单的例子表明如何使用Dagger2 集中你所有创建的单例.<br>类似于下面这样, 假设在你的Twitter客户端中你从没有使用过任何类型的的依赖注入框架写代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Enable caching for OkHttp</span></div><div class=\"line\"><span class=\"keyword\">int</span> cacheSize = <span class=\"number\">10</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>; <span class=\"comment\">// 10 MiB</span></div><div class=\"line\">Cache cache = <span class=\"keyword\">new</span> Cache(getApplication().getCacheDir(), cacheSize);</div><div class=\"line\">client.setCache(cache);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Used for caching authentication tokens</span></div><div class=\"line\">SharedPreferences sharedPrefeences = PreferenceManager.getDefaultSharedPreferences(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Instantiate Gson</span></div><div class=\"line\">Gson gson = <span class=\"keyword\">new</span> GsonBuilder().create();</div><div class=\"line\">GsonConverterFactory converterFactory = GsonConverterFactory.create(gson);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Build Retrofit</span></div><div class=\"line\">Retrofit retrofit = <span class=\"keyword\">new</span> Retrofit.Builder()</div><div class=\"line\">                                .baseUrl(<span class=\"string\">\"https://api.github.com\"</span>)</div><div class=\"line\">                                .addConverterFactory(converterFactory)</div><div class=\"line\">                                .client(client)  <span class=\"comment\">// custom client</span></div><div class=\"line\">                                .build();</div></pre></td></tr></table></figure>\n<h2 id=\"声明你的单例\"><a href=\"#声明你的单例\" class=\"headerlink\" title=\"声明你的单例\"></a>声明你的单例</h2><p>你需要通过创建一个Dagger2 moudle来明确哪些对象应该被包含作为依赖链的一部分. 举例来说, 如果我们希望使一个单独的<code>Retrofit</code>单例绑定到整个应用程序的生命周期,  并且对我们所有的activity和fragment都是可用的, 我们首先要让Dagger 知道可以提供一个<code>Retrofit</code>单例</p>\n<p>因为我们希望设置caching, 我们需要一份Application Context上下文环境. 我们的第一个Dagger模块<code>AppModule.java</code>将被用来提供此引用, 我们还需要声明带有<code>@Provides</code>注解的方法来告诉Dagger这个方法是返回类型为<code>Application</code>的构造器: </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Module</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppModule</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    Application mApplication;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AppModule</span><span class=\"params\">(Application application)</span> </span>&#123;</div><div class=\"line\">        mApplication = application;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@Singleton</span></div><div class=\"line\">    <span class=\"function\">Application <span class=\"title\">providesApplication</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mApplication;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们创建一个名为<code>NetModule.java</code>并且使用<code>@Module</code>标注的类来告诉Dagger在可用方法的范围内寻找来作为实例的提供者</p>\n<p><code>@Singleton</code>注解同样告诉Dagger编译器这个实例在整个应用生命周期中应该仅仅被创建一次, 在以下的例子中, 我们指定<code>SharedPreferences</code> <code>Gson</code> <code>Cache</code> <code>OkHttpClient</code> <code>Retrofit</code> 作为可以用作依赖列表一部分的返回类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Module</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NetModule</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    String mBaseUrl;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Constructor needs one parameter to instantiate.  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NetModule</span><span class=\"params\">(String baseUrl)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.mBaseUrl = baseUrl;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Dagger will only look for methods annotated with @Provides</span></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@Singleton</span></div><div class=\"line\">    <span class=\"comment\">// Application reference must come from AppModule.class</span></div><div class=\"line\">    <span class=\"function\">SharedPreferences <span class=\"title\">providesSharedPreferences</span><span class=\"params\">(Application application)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> PreferenceManager.getDefaultSharedPreferences(application);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@Singleton</span></div><div class=\"line\">    <span class=\"function\">Cache <span class=\"title\">provideOkHttpCache</span><span class=\"params\">(Application application)</span> </span>&#123; </div><div class=\"line\">        <span class=\"keyword\">int</span> cacheSize = <span class=\"number\">10</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>; <span class=\"comment\">// 10 MiB</span></div><div class=\"line\">        Cache cache = <span class=\"keyword\">new</span> Cache(application.getCacheDir(), cacheSize);</div><div class=\"line\">        <span class=\"keyword\">return</span> cache;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Provides</span> </div><div class=\"line\">   <span class=\"meta\">@Singleton</span></div><div class=\"line\">   <span class=\"function\">Gson <span class=\"title\">provideGson</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">       GsonBuilder gsonBuilder = <span class=\"keyword\">new</span> GsonBuilder();</div><div class=\"line\">       gsonBuilder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES);</div><div class=\"line\">       <span class=\"keyword\">return</span> gsonBuilder.create();</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Provides</span></div><div class=\"line\">   <span class=\"meta\">@Singleton</span></div><div class=\"line\">   <span class=\"function\">OkHttpClient <span class=\"title\">provideOkHttpClient</span><span class=\"params\">(Cache cache)</span> </span>&#123;</div><div class=\"line\">      OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient();</div><div class=\"line\">      client.setCache(cache);</div><div class=\"line\">      <span class=\"keyword\">return</span> client;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Provides</span></div><div class=\"line\">   <span class=\"meta\">@Singleton</span></div><div class=\"line\">   <span class=\"function\">Retrofit <span class=\"title\">provideRetrofit</span><span class=\"params\">(Gson gson, OkHttpClient okHttpClient)</span> </span>&#123;</div><div class=\"line\">      Retrofit retrofit = <span class=\"keyword\">new</span> Retrofit.Builder()</div><div class=\"line\">                .addConverterFactory(GsonConverterFactory.create(gson))</div><div class=\"line\">                .baseUrl(mBaseUrl)</div><div class=\"line\">                .client(okHttpClient)</div><div class=\"line\">                .build();</div><div class=\"line\">        <span class=\"keyword\">return</span> retrofit;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意这个方法名 (i.e. provideGson(), provideRetrofit(), etc)可以起任何名. 使用<code>@Provides</code>注解的返回值类型被用来将此实例与其他任何相同类型的moudle相关联, <code>@Singleton</code>注解被用来像Dagger描述在整个应用程序生命周期期间仅仅初始化一次</p>\n<p><code>Retrofit</code>的实例的同时依赖于<code>Gson</code>和<code>OkHttpClient</code>实例, 所以我们可以在同一个类中声明另外一个方法以获取这两个类型. 在这个方法中<code>@Provides</code>注解和这两个参数将会使得Dagger 意识到这里有<code>Gson</code>和<code>OkHttpClient</code>的依赖以创建<code>Retrofit</code>的实例</p>\n<h2 id=\"声明注入目标\"><a href=\"#声明注入目标\" class=\"headerlink\" title=\"声明注入目标\"></a>声明注入目标</h2><p>Dagger为你的activitys, services, 或fragments提供了一种简单的通过使用<code>@Inject</code>注解注入字段并且调用<code>inject()</code>方法来分配引用, 调用<code>inject()</code>方法将会使Dagger2 在依赖图谱中尝试寻找一个相匹配的返回类型来定位单例. 如果找到, 它将分配各自对应字段的引用. 比如, 在下面的例子中, 它会尝试寻找返回类型为<code>MyTwitterApiClient</code>和<code>SharedPreferences</code>的提供器(provider)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\">   <span class=\"meta\">@Inject</span> MyTwitterApiClient mTwitterApiClient;</div><div class=\"line\">   <span class=\"meta\">@Inject</span> SharedPreferences sharedPreferences;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstance)</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">// assign singleton instances to fields</span></div><div class=\"line\">       InjectorClass.inject(<span class=\"keyword\">this</span>);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>Dagger2 中使用的注入器类被称为 component组件, 它为我们的activitys, services, 或则fragments分配引用以连接我们之前声明的单例, 我们同样需要一个<code>@Component</code>注解声明的类, 可以添加的activitys, services, 或则fragments应该在这个类中单独的使用<code>inject()</code>方法声明:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules=&#123;AppModule.class, NetModule.class&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">NetComponent</span> </span>&#123;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">(MainActivity activity)</span></span>;</div><div class=\"line\">   <span class=\"comment\">// void inject(MyFragment fragment);</span></div><div class=\"line\">   <span class=\"comment\">// void inject(MyService service);</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意这些类并不足以作为注入的目标, Dagger2 依赖相匹配的类, 你必须明确指明那个类应该被声明在内, (这里有一些<a href=\"https://blog.gouline.net/dagger-2-even-sharper-less-square-b52101863542#.vgmua0fkm\" target=\"_blank\" rel=\"external\">建议</a>来解决这个问题, 但是这样做代码可能追踪更加困难相比简单的定义它们 )</p>\n<h2 id=\"代码生成\"><a href=\"#代码生成\" class=\"headerlink\" title=\"代码生成\"></a>代码生成</h2><p>一件重要Dagger2的方面是, 这个库为标注了<code>@Component</code>的接口类生成代码, 你可以使用前缀为<code>@Dagger</code>(i.e. DaggerTwitterApiComponent.java)的类, 它将负责实例化我们的依赖图谱中的一个实例, 并且用它执行<code>@Inject</code>注解字段的注入工作. 请看(setup guide)[<a href=\"https://github.com/codepath/android_guides/wiki/Dependency-Injection-with-Dagger-2#setup\" target=\"_blank\" rel=\"external\">https://github.com/codepath/android_guides/wiki/Dependency-Injection-with-Dagger-2#setup</a>].</p>\n<h2 id=\"实例化组件\"><a href=\"#实例化组件\" class=\"headerlink\" title=\"实例化组件\"></a>实例化组件</h2><p>我们应该在<code>Application</code>的类中做所有工作, 因为这些实例在整个应用程序的生命周期中仅仅被声明一次</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> NetComponent mNetComponent;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Dagger%COMPONENT_NAME%</span></div><div class=\"line\">        mNetComponent = DaggerNetComponent.builder()</div><div class=\"line\">                <span class=\"comment\">// list of modules that are part of this component need to be created here too</span></div><div class=\"line\">                .appModule(<span class=\"keyword\">new</span> AppModule(<span class=\"keyword\">this</span>)) <span class=\"comment\">// This also corresponds to the name of your module: %component_name%Module</span></div><div class=\"line\">                .netModule(<span class=\"keyword\">new</span> NetModule(<span class=\"string\">\"https://api.github.com\"</span>))</div><div class=\"line\">                .build();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// If a Dagger 2 component does not have any constructor arguments for any of its modules,</span></div><div class=\"line\">        <span class=\"comment\">// then we can use .create() as a shortcut instead:</span></div><div class=\"line\">        <span class=\"comment\">//  mNetComponent = com.codepath.dagger.components.DaggerNetComponent.create();</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> NetComponent <span class=\"title\">getNetComponent</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> mNetComponent;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果不能没有Dagger component组件的引用, 你要确保重构项目(在AndroidStudio中, select Build &gt; Rebuild Project)</p>\n<p>因为我们覆写了默认的<code>Application</code>类, 我们同样修改应用程序<code>name</code>为<code>MyApp</code>, 这样, 你的应用程序将使用这个Applicaiton 类来处理最初的实例. </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;application</div><div class=\"line\">      android:allowBackup=<span class=\"string\">\"true\"</span></div><div class=\"line\">      android:name=<span class=\"string\">\".MyApp\"</span>&gt;</div></pre></td></tr></table></figure>\n<p>在我们Activity的内部, 我们只需要调用<code>inject()</code>方法就可以简单的访问这些组件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@Inject</span> OkHttpClient mOkHttpClient;</div><div class=\"line\">  <span class=\"meta\">@Inject</span> SharedPreferences sharedPreferences;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstance)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// assign singleton instances to fields</span></div><div class=\"line\">        <span class=\"comment\">// We need to cast to `MyApp` in order to get the right method</span></div><div class=\"line\">        ((MyApp) getApplication()).getNetComponent().inject(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"限制类型\"><a href=\"#限制类型\" class=\"headerlink\" title=\"限制类型\"></a>限制类型</h2><p><img src=\"https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_qualifiers.png\" alt=\"Qualified types\"></p>\n<p>如果我们需要同一返回类型的两个不同对象, 我们可以使用<code>@Named</code>限定注解, 你需要在你提供单例的地方(<code>@Provides</code> annotation)和注入它们的地方(<code>@Inject</code> annotations)同时声明它们:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Provides</span> <span class=\"meta\">@Named</span>(<span class=\"string\">\"cached\"</span>)</div><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"function\">OkHttpClient <span class=\"title\">provideOkHttpClient</span><span class=\"params\">(Cache cache)</span> </span>&#123;</div><div class=\"line\">    OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient();</div><div class=\"line\">    client.setCache(cache);</div><div class=\"line\">    <span class=\"keyword\">return</span> client;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Provides</span> <span class=\"meta\">@Named</span>(<span class=\"string\">\"non_cached\"</span>) <span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"function\">OkHttpClient <span class=\"title\">provideOkHttpClient</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient();</div><div class=\"line\">    <span class=\"keyword\">return</span> client;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当你注入这些单例的时候, 你同样需要<code>@Named</code>注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Inject</span> <span class=\"meta\">@Named</span>(<span class=\"string\">\"cached\"</span>) OkHttpClient client;</div><div class=\"line\"><span class=\"meta\">@Inject</span> <span class=\"meta\">@Named</span>(<span class=\"string\">\"non_cached\"</span>) OkHttpClient client2;</div></pre></td></tr></table></figure>\n<p><code>@Named</code>是Dagger预先定义的限定注解, 你可以很好的创建你自己的限定注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Qualifier</span></div><div class=\"line\"><span class=\"meta\">@Documented</span></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RUNTIME)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> DefaultPreferences &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p><img src=\"https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_scopes.png\" alt=\"Scopes\"></p>\n<p>在Dagger2, 你可以声明Component组件通过声明自定义的范围如何封装. 举例来说, 你可以创建一个仅仅在activity或者fragment生命周期运行期间的作用域. 你可以创建只映射到用户身份验证会话的作用域. </p>\n<p>利用作用域允许我们要么创建依赖组件要么创建子组件, 上面的例子表明我们所使用的<code>@Singleton</code>注解是伴随应用程序的整个生命周期, 我们同样依赖于一个主要的Dagger component组件.</p>\n<p>如果我们希望拥有一个并不需要常驻内存中的多个Component组件(i.e. 依赖于activity或者fragment生命周期, 甚至依赖于用户的登录状态的Component组件), 我们可以创建相关的组件活着子组件, 在任何一种情况下, 都会为你封装代码提供一种方式. 我们将在下文中看到如何同时使用它们. </p>\n<p>这里有使用这些方法的几点考虑:</p>\n<ul>\n<li><strong>相关的组件要求父组件明确列出哪些依赖可以注入, 而子组件没有</strong> 对于父组件来说, 你需要通过指明类型和方法, 以想子组件暴露它们</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// parent component</span></div><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules=&#123;AppModule.class, NetModule.class&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">NetComponent</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// remove injection methods if downstream modules will perform injection</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// downstream components need these exposed</span></div><div class=\"line\">    <span class=\"comment\">// the method name does not matter, only the return type</span></div><div class=\"line\">    <span class=\"function\">Retrofit <span class=\"title\">retrofit</span><span class=\"params\">()</span></span>; </div><div class=\"line\">    <span class=\"function\">OkHttpClient <span class=\"title\">okHttpClient</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\">SharedPreferences <span class=\"title\">sharedPreferences</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果你忘记添加这行代码, 你将要看到一个关于注入目标丢失的错误. 类似于private/public变量如何去管理那样, 使用父component组件允许更明确的控制以及更好的封装, 但是使用子component组件使得依赖注入在花费的代价上更为简单</p>\n<ul>\n<li><strong>两个相互依赖的组件不能共享同一范围.</strong> 举例来说, 两个组件不能同时使用 <code>@Singleton</code>注解 标注作用域, 这个限制是有<a href=\"https://github.com/google/dagger/issues/107#issuecomment-71073298\" target=\"_blank\" rel=\"external\">这里</a>描述的原因导致的, 相关的组件需要定义它们自己的范围.</li>\n</ul>\n<h2 id=\"依赖组件\"><a href=\"#依赖组件\" class=\"headerlink\" title=\"依赖组件\"></a>依赖组件</h2><p><img src=\"https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_dependency.png\" alt=\"Dependent Components\"></p>\n<p>举例来说, 如果我们想要使用 用户会话的整个生命周期<br>我们可以声明我们自己的 <code>@UserScope</code>接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.inject.Scope;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Scope</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> UserScope &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后, 我们声明它的父组件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules=&#123;AppModule.class, NetModule.class&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">NetComponent</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// downstream components need these exposed with the return type</span></div><div class=\"line\">    <span class=\"comment\">// method name does not really matter</span></div><div class=\"line\">    <span class=\"function\">Retrofit <span class=\"title\">retrofit</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们可以接着声明它的子组件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@UserScope</span> <span class=\"comment\">// using the previously defined scope, note that @Singleton will not work</span></div><div class=\"line\"><span class=\"meta\">@Component</span>(dependencies = NetComponent.class, modules = GitHubModule.class)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">GitHubComponent</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">(MainActivity activity)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们假设下面的Github模块简单的返回一个Github Api的接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Module</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GitHubModule</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">GitHubApiInterface</span> </span>&#123;</div><div class=\"line\">      <span class=\"meta\">@GET</span>(<span class=\"string\">\"/org/&#123;orgName&#125;/repos\"</span>)</div><div class=\"line\">      Call&lt;ArrayList&lt;Repository&gt;&gt; getRepository(<span class=\"meta\">@Path</span>(<span class=\"string\">\"orgName\"</span>) String orgName);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@UserScope</span> <span class=\"comment\">// needs to be consistent with the component scope</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> GitHubApiInterface <span class=\"title\">providesGitHubInterface</span><span class=\"params\">(Retrofit retrofit)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> retrofit.create(GitHubApiInterface.class);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>为了<code>GitHubModule.java</code>获得<code>Retrofit</code>实例的引用, 我们需要在调用它之前的组件中明确定义它们, 如果说在它之后执行注入, 它们应该在之后的组件中移除它们:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules=&#123;AppModule.class, NetModule.class&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">NetComponent</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// remove injection methods if downstream modules will perform injection</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// downstream components need these exposed</span></div><div class=\"line\">    <span class=\"function\">Retrofit <span class=\"title\">retrofit</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\">OkHttpClient <span class=\"title\">okHttpClient</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\">SharedPreferences <span class=\"title\">sharedPreferences</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最后一步是使用<code>GitHubComponent</code> 执行实例化, 这个时候, 我们首先需要构建<code>NetComponent</code>, 并且在<code>DaggerGitHubComponent</code> builder的构造函数中传递它: </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">NetComponent mNetComponent = DaggerNetComponent.builder()</div><div class=\"line\">                .appModule(<span class=\"keyword\">new</span> AppModule(<span class=\"keyword\">this</span>))</div><div class=\"line\">                .netModule(<span class=\"keyword\">new</span> NetModule(<span class=\"string\">\"https://api.github.com\"</span>))</div><div class=\"line\">                .build();</div><div class=\"line\"></div><div class=\"line\">GitHubComponent gitHubComponent = DaggerGitHubComponent.builder()</div><div class=\"line\">                .netComponent(mNetComponent)</div><div class=\"line\">                .gitHubModule(<span class=\"keyword\">new</span> GitHubModule())</div><div class=\"line\">                .build();</div></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/codepath/dagger2-example\" target=\"_blank\" rel=\"external\">this example code </a></p>\n<p>子组件</p>\n<p><img src=\"https://raw.githubusercontent.com/codepath/android_guides/master/images/dagger_subcomponent.png\" alt=\"Subcomponents\"></p>\n<p>使用子组件是扩展组件的对象图的另外一种方式, 就像依赖的组件那样, 子组件有它们自己的生命周期并且当所有子组件的引用都消失的时候是可以被垃圾收集的, 并具有相同的范围限制。在使用这种方法的一个优点是，不需要定义所有下游组件. </p>\n<p>另一个主要的不同之处就是子组件只需要在父组件中声明. </p>\n<p>这里有一个为Activity使用子组件的例子. 我们使用自定义的范围和<code>@Subcomponent</code>注解标注一个类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@MyActivityScope</span></div><div class=\"line\"><span class=\"meta\">@Subcomponent</span>(modules=&#123; MyActivityModule.class &#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyActivitySubComponent</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Named</span>(<span class=\"string\">\"my_list\"</span>) <span class=\"function\">ArrayAdapter <span class=\"title\">myListAdapter</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>moudle模块使用下面声明</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Module</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyActivityModule</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> MyActivity activity;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// must be instantiated with an activity</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyActivityModule</span><span class=\"params\">(MyActivity activity)</span> </span>&#123; <span class=\"keyword\">this</span>.activity = activity; &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span> <span class=\"meta\">@MyActivityScope</span> <span class=\"meta\">@Named</span>(<span class=\"string\">\"my_list\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ArrayAdapter <span class=\"title\">providesMyListAdapter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayAdapter&lt;String&gt;(activity, android.R.layout.my_list);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最后, 在父组件中, 我们声明一个工厂方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules=&#123; ... &#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyApplicationComponent</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// injection targets here</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// factory method to instantiate the subcomponent defined here (passing in the module instance)</span></div><div class=\"line\">    <span class=\"function\">MyActivitySubComponent <span class=\"title\">newMyActivitySubcomponent</span><span class=\"params\">(MyActivityModule activityModule)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在上面的例子中, <code>newMyActivitySubcomponent()</code>每次被调用的时候, 一个新的子组件的实例都会被创建, 使用子模块moudle注入到一个activity</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules=&#123; ... &#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyApplicationComponent</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// injection targets here</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// factory method to instantiate the subcomponent defined here (passing in the module instance)</span></div><div class=\"line\">    <span class=\"function\">MyActivitySubComponent <span class=\"title\">newMyActivitySubcomponent</span><span class=\"params\">(MyActivityModule activityModule)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>子组件创建</p>\n<p><img src=\"https://raw.githubusercontent.com/codepath/android_guides/master/images/subcomponent_builders.png\" alt=\"Available starting in v2.7\"></p>"},{"title":"detection the largest retangle , OpenCv 检测最大矩形","date":"2017-05-08T10:42:01.000Z","_content":"\n\n``` c++\n#include <jni.h>\n#include <opencv2/opencv.hpp>\n#include <bits/stdc++.h>\n#include <android/log.h>\n#define  LOG_TAG    \"JNI_PART\"\n#define LOGI(...)  __android_log_print(ANDROID_LOG_INFO,LOG_TAG, __VA_ARGS__)\n#define LOGD(...)  __android_log_print(ANDROID_LOG_DEBUG,LOG_TAG, __VA_ARGS__)\n#define LOGW(...)  __android_log_print(ANDROID_LOG_WARN,LOG_TAG, __VA_ARGS__)\n#define LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG_TAG, __VA_ARGS__)\n#define LOGF(...)  __android_log_print(ANDROID_LOG_FATAL,LOG_TAG, __VA_ARGS__)\nusing namespace cv;\nusing namespace std;\n\n```\n<!-- more -->\n\n``` c++ \n/*\n * auth:huanjulu\n */\n#include <jni.h>\n#include <opencv2/opencv.hpp>\n#include <bits/stdc++.h>\n#include <android/log.h>\n#define  LOG_TAG    \"JNI_PART\"\n#define LOGI(...)  __android_log_print(ANDROID_LOG_INFO,LOG_TAG, __VA_ARGS__)\n#define LOGD(...)  __android_log_print(ANDROID_LOG_DEBUG,LOG_TAG, __VA_ARGS__)\n#define LOGW(...)  __android_log_print(ANDROID_LOG_WARN,LOG_TAG, __VA_ARGS__)\n#define LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG_TAG, __VA_ARGS__)\n#define LOGF(...)  __android_log_print(ANDROID_LOG_FATAL,LOG_TAG, __VA_ARGS__)\nusing namespace cv;\nusing namespace std;\nextern \"C\" {\n\njstring Java_com_martin_huanjulu_testopencv_MainActivity_stringFromJNI(\n        JNIEnv *env,\n        jobject /* this */) {\n    std::string hello = \"Hello from C++\";\n    return env->NewStringUTF(hello.c_str());\n}\n\nint thresh = 120;\ndouble max_size_ratio = 0.6;\ndouble min_size_ratio = 0.1;\nstatic double angle(Point pt1, Point pt2, Point pt0) {\n    double dx1 = pt1.x - pt0.x;\n    double dy1 = pt1.y - pt0.y;\n    double dx2 = pt2.x - pt0.x;\n    double dy2 = pt2.y - pt0.y;\n    return (dx1 * dx2 + dy1 * dy2) /\n           sqrt((dx1 * dx1 + dy1 * dy1) * (dx2 * dx2 + dy2 * dy2) + 1e-10);\n}\n\n\nvoid\nselectFeatureBounds(Mat &frame, CvPoint topLeftPoint, CvPoint oppssiteTotopLeft,\n                    MatSize imageSize) {\n    cv::Mat overlay;\n    double alpha = 0.3;\n    frame.copyTo(overlay);\n    cv::rectangle(overlay, topLeftPoint, oppssiteTotopLeft, cvScalar(0, 0, 255, 0), CV_FILLED, 4);\n//    cv::rectangle(frame, topLeftPoint, oppssiteTotopLeft, cvScalar(0, 0, 255 * 0.7), CV_FILLED, 4);\n    cv::addWeighted(overlay, alpha, frame, 1 - alpha, 0, frame);\n}\n\n\nstatic void findSquares(const Mat &image, vector<vector<Point> > &squares, double resize_scale) {\n    squares.clear();\n    Mat pyr, timg, gray0(image.size(), CV_8U), gray;\n    image.copyTo(timg);\n    int max_size = image.cols * image.rows;\n    vector<vector<Point> > contours;\n    int N = 4;\n    for (int c = 0; c < 3; c++) {\n        int ch[] = {c, 0};\n        mixChannels(&timg, 1, &gray0, 1, ch, 1);\n        for (int l = 0; l < N; l++) {\n            if (l == 0) {\n                Canny(gray0, gray, 0, thresh, 3);\n                dilate(gray, gray, Mat(), Point(-1, -1));\n            } else {\n                gray = (gray0 >= (l + 1) * 255 / N);\n            }\n            findContours(gray, contours, RETR_LIST, CHAIN_APPROX_SIMPLE);\n            vector<Point> approx;\n            for (size_t i = 0; i < contours.size(); i++) {\n                double area0 = contourArea(contours[i]);\n                if ((area0 > max_size_ratio * max_size) || (area0 < min_size_ratio * max_size))\n                    continue;\n                approxPolyDP(Mat(contours[i]), approx, arcLength(Mat(contours[i]), true) * 0.015,\n                             true);\n                if (approx.size() == 4 && isContourConvex(Mat(approx))) {\n                    double maxCosine = 0;\n                    for (int j = 2; j < 5; j++) {\n                        double cosine = fabs(angle(approx[j % 4], approx[j - 2], approx[j - 1]));\n                        maxCosine = MAX(maxCosine, cosine);\n                    }\n                    //if( maxCosine < 0.5 ) //angle must be larger than 60\n                    if (maxCosine < 0.25) //angle must be larger than 75\n                        squares.push_back(approx);\n                }\n            }\n        }\n    }\n    //pick the center one\n    if (squares.size()) {\n        double min_dis = 100000;\n        vector<Point> pts;\n        for (size_t i = 0; i < squares.size(); i++) {\n            double new_dis =\n                    fabs(squares[i][0].x + squares[i][1].x + squares[i][2].x + squares[i][3].x) /\n                    4.0 +\n                    (squares[i][0].y + squares[i][1].y + squares[i][2].y + squares[i][3].y) / 4.0 -\n                    image.cols / 2.0 - image.rows / 2.0;\n            if (new_dis < min_dis) {\n                min_dis = new_dis;\n                pts = squares[i];\n            }\n        }\n        squares.clear();\n        for (size_t i = 0; i < pts.size(); i++) {\n            pts[i].x = int(pts[i].x * (1.0 / resize_scale));\n            pts[i].y = int(pts[i].y * (1.0 / resize_scale));\n        }\n        double max_x = -1, min_x = 10000, max_y = -1, min_y = 100000;\n        for (size_t i = 0; i < pts.size(); i++) {\n            max_x = max_x > pts[i].x ? max_x : pts[i].x;\n            min_x = min_x < pts[i].x ? min_x : pts[i].x;\n            max_y = max_y > pts[i].y ? max_y : pts[i].y;\n            min_y = min_y < pts[i].y ? min_y : pts[i].y;\n        }\n        pts.clear();\n        pts.push_back(Point(min_x, min_y));\n        pts.push_back(Point(max_x, min_y));\n        pts.push_back(Point(max_x, max_y));\n        pts.push_back(Point(min_x, max_y));\n        squares.push_back(pts);\n    }\n}\n\n\nstatic void\ndrawSquares(Mat &image, const vector<vector<Point> > &squares\n) {\n    Size boxSize = image.size();\n    int height = boxSize.height;\n    int width = boxSize.width;\n    int horizontallineLength = boxSize.width / 4;\n    int verticallineLength = height / 5;\n    int lineLength = 30;\n    for (size_t i = 0; i < squares.size(); i++) {\n        const Point *p = &squares[i][0];\n        int n = (int) squares[i].size();\n\n\n        cv::line(image,\n                 cvPoint(squares[i][0].x, squares[i][0].y),\n                 cvPoint(squares[i][0].x + lineLength,\n                         squares[i][0].y), cvScalar(0, 0, 255, 0),\n                 8, 4);\n        cv::line(image,\n                 cvPoint(squares[i][0].x, squares[i][0].y),\n                 cvPoint(squares[i][0].x,\n                         squares[i][0].y + lineLength),\n                 cvScalar(0, 0, 255, 0), 8, 4);\n        /**\n       *    right bottom\n       */\n        cv::line(image, cvPoint(squares[i][1].x,\n                                squares[i][1].y),\n                 cvPoint(squares[i][1].x - lineLength,\n                         squares[i][1].y), cvScalar(0, 0, 255, 0),\n                 8, 4);\n        cv::line(image, cvPoint(squares[i][1].x,\n                                squares[i][1].y),\n                 cvPoint(squares[i][1].x,\n                         squares[i][1].y + lineLength),\n                 cvScalar(0, 0, 255, 0), 8, 4);\n        /**\n       *    left bottom\n       */\n        cv::line(image, cvPoint(squares[i][2].x,\n                                squares[i][2].y),\n                 cvPoint(squares[i][2].x,\n                         squares[i][2].y - lineLength),\n                 cvScalar(255, 255, 255, 0), 8, 4);\n        cv::line(image, cvPoint(squares[i][2].x,\n                                squares[i][2].y),\n                 cvPoint(squares[i][2].x - lineLength,\n                         squares[i][2].y),\n                 cvScalar(255, 255, 255, 0), 8, 4);\n        /**\n     *    left top\n     */\n        cv::line(image, cvPoint(squares[i][3].x,\n                                squares[i][3].y),\n                 cvPoint(squares[i][3].x + lineLength,\n                         squares[i][3].y),\n                 cvScalar(255, 255, 255, 0), 8, 4);\n        cv::line(image, cvPoint(squares[i][3].x,\n                                squares[i][3].y),\n                 cvPoint(squares[i][3].x,\n                         squares[i][3].y - lineLength),\n                 cvScalar(255, 255, 255, 0), 8, 4);\n\n\n//        selectFeatureBounds(image, cvPoint(squares[i][3].x,\n//                                           squares[i][3].y),\n//                            cvPoint(squares[i][1].x,\n//                                    squares[i][1].y), image.size);\n\n\n    }\n}\nvoid\nmain(JNIEnv *, jobject, jlong addrGray, jlong addrRgba) {\n\n    Mat &image = *(Mat *) addrRgba;\n    vector<vector<Point> > squares;\n    Mat newImage = image.clone();\n\n    float scale = 0.25;\n    resize(image, newImage, Size(), scale, scale);\n    findSquares(newImage, squares, scale);\n    drawSquares(image, squares);\n    newImage.release();\n\n}\n\n}\n\n\n```\n","source":"_posts/detection-the-largest-retangle.md","raw":"---\ntitle: detection the largest retangle , OpenCv 检测最大矩形\ndate: 2017-05-08 18:42:01\ntags:  [Opencv, Android,  C++, NDK]\n---\n\n\n``` c++\n#include <jni.h>\n#include <opencv2/opencv.hpp>\n#include <bits/stdc++.h>\n#include <android/log.h>\n#define  LOG_TAG    \"JNI_PART\"\n#define LOGI(...)  __android_log_print(ANDROID_LOG_INFO,LOG_TAG, __VA_ARGS__)\n#define LOGD(...)  __android_log_print(ANDROID_LOG_DEBUG,LOG_TAG, __VA_ARGS__)\n#define LOGW(...)  __android_log_print(ANDROID_LOG_WARN,LOG_TAG, __VA_ARGS__)\n#define LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG_TAG, __VA_ARGS__)\n#define LOGF(...)  __android_log_print(ANDROID_LOG_FATAL,LOG_TAG, __VA_ARGS__)\nusing namespace cv;\nusing namespace std;\n\n```\n<!-- more -->\n\n``` c++ \n/*\n * auth:huanjulu\n */\n#include <jni.h>\n#include <opencv2/opencv.hpp>\n#include <bits/stdc++.h>\n#include <android/log.h>\n#define  LOG_TAG    \"JNI_PART\"\n#define LOGI(...)  __android_log_print(ANDROID_LOG_INFO,LOG_TAG, __VA_ARGS__)\n#define LOGD(...)  __android_log_print(ANDROID_LOG_DEBUG,LOG_TAG, __VA_ARGS__)\n#define LOGW(...)  __android_log_print(ANDROID_LOG_WARN,LOG_TAG, __VA_ARGS__)\n#define LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG_TAG, __VA_ARGS__)\n#define LOGF(...)  __android_log_print(ANDROID_LOG_FATAL,LOG_TAG, __VA_ARGS__)\nusing namespace cv;\nusing namespace std;\nextern \"C\" {\n\njstring Java_com_martin_huanjulu_testopencv_MainActivity_stringFromJNI(\n        JNIEnv *env,\n        jobject /* this */) {\n    std::string hello = \"Hello from C++\";\n    return env->NewStringUTF(hello.c_str());\n}\n\nint thresh = 120;\ndouble max_size_ratio = 0.6;\ndouble min_size_ratio = 0.1;\nstatic double angle(Point pt1, Point pt2, Point pt0) {\n    double dx1 = pt1.x - pt0.x;\n    double dy1 = pt1.y - pt0.y;\n    double dx2 = pt2.x - pt0.x;\n    double dy2 = pt2.y - pt0.y;\n    return (dx1 * dx2 + dy1 * dy2) /\n           sqrt((dx1 * dx1 + dy1 * dy1) * (dx2 * dx2 + dy2 * dy2) + 1e-10);\n}\n\n\nvoid\nselectFeatureBounds(Mat &frame, CvPoint topLeftPoint, CvPoint oppssiteTotopLeft,\n                    MatSize imageSize) {\n    cv::Mat overlay;\n    double alpha = 0.3;\n    frame.copyTo(overlay);\n    cv::rectangle(overlay, topLeftPoint, oppssiteTotopLeft, cvScalar(0, 0, 255, 0), CV_FILLED, 4);\n//    cv::rectangle(frame, topLeftPoint, oppssiteTotopLeft, cvScalar(0, 0, 255 * 0.7), CV_FILLED, 4);\n    cv::addWeighted(overlay, alpha, frame, 1 - alpha, 0, frame);\n}\n\n\nstatic void findSquares(const Mat &image, vector<vector<Point> > &squares, double resize_scale) {\n    squares.clear();\n    Mat pyr, timg, gray0(image.size(), CV_8U), gray;\n    image.copyTo(timg);\n    int max_size = image.cols * image.rows;\n    vector<vector<Point> > contours;\n    int N = 4;\n    for (int c = 0; c < 3; c++) {\n        int ch[] = {c, 0};\n        mixChannels(&timg, 1, &gray0, 1, ch, 1);\n        for (int l = 0; l < N; l++) {\n            if (l == 0) {\n                Canny(gray0, gray, 0, thresh, 3);\n                dilate(gray, gray, Mat(), Point(-1, -1));\n            } else {\n                gray = (gray0 >= (l + 1) * 255 / N);\n            }\n            findContours(gray, contours, RETR_LIST, CHAIN_APPROX_SIMPLE);\n            vector<Point> approx;\n            for (size_t i = 0; i < contours.size(); i++) {\n                double area0 = contourArea(contours[i]);\n                if ((area0 > max_size_ratio * max_size) || (area0 < min_size_ratio * max_size))\n                    continue;\n                approxPolyDP(Mat(contours[i]), approx, arcLength(Mat(contours[i]), true) * 0.015,\n                             true);\n                if (approx.size() == 4 && isContourConvex(Mat(approx))) {\n                    double maxCosine = 0;\n                    for (int j = 2; j < 5; j++) {\n                        double cosine = fabs(angle(approx[j % 4], approx[j - 2], approx[j - 1]));\n                        maxCosine = MAX(maxCosine, cosine);\n                    }\n                    //if( maxCosine < 0.5 ) //angle must be larger than 60\n                    if (maxCosine < 0.25) //angle must be larger than 75\n                        squares.push_back(approx);\n                }\n            }\n        }\n    }\n    //pick the center one\n    if (squares.size()) {\n        double min_dis = 100000;\n        vector<Point> pts;\n        for (size_t i = 0; i < squares.size(); i++) {\n            double new_dis =\n                    fabs(squares[i][0].x + squares[i][1].x + squares[i][2].x + squares[i][3].x) /\n                    4.0 +\n                    (squares[i][0].y + squares[i][1].y + squares[i][2].y + squares[i][3].y) / 4.0 -\n                    image.cols / 2.0 - image.rows / 2.0;\n            if (new_dis < min_dis) {\n                min_dis = new_dis;\n                pts = squares[i];\n            }\n        }\n        squares.clear();\n        for (size_t i = 0; i < pts.size(); i++) {\n            pts[i].x = int(pts[i].x * (1.0 / resize_scale));\n            pts[i].y = int(pts[i].y * (1.0 / resize_scale));\n        }\n        double max_x = -1, min_x = 10000, max_y = -1, min_y = 100000;\n        for (size_t i = 0; i < pts.size(); i++) {\n            max_x = max_x > pts[i].x ? max_x : pts[i].x;\n            min_x = min_x < pts[i].x ? min_x : pts[i].x;\n            max_y = max_y > pts[i].y ? max_y : pts[i].y;\n            min_y = min_y < pts[i].y ? min_y : pts[i].y;\n        }\n        pts.clear();\n        pts.push_back(Point(min_x, min_y));\n        pts.push_back(Point(max_x, min_y));\n        pts.push_back(Point(max_x, max_y));\n        pts.push_back(Point(min_x, max_y));\n        squares.push_back(pts);\n    }\n}\n\n\nstatic void\ndrawSquares(Mat &image, const vector<vector<Point> > &squares\n) {\n    Size boxSize = image.size();\n    int height = boxSize.height;\n    int width = boxSize.width;\n    int horizontallineLength = boxSize.width / 4;\n    int verticallineLength = height / 5;\n    int lineLength = 30;\n    for (size_t i = 0; i < squares.size(); i++) {\n        const Point *p = &squares[i][0];\n        int n = (int) squares[i].size();\n\n\n        cv::line(image,\n                 cvPoint(squares[i][0].x, squares[i][0].y),\n                 cvPoint(squares[i][0].x + lineLength,\n                         squares[i][0].y), cvScalar(0, 0, 255, 0),\n                 8, 4);\n        cv::line(image,\n                 cvPoint(squares[i][0].x, squares[i][0].y),\n                 cvPoint(squares[i][0].x,\n                         squares[i][0].y + lineLength),\n                 cvScalar(0, 0, 255, 0), 8, 4);\n        /**\n       *    right bottom\n       */\n        cv::line(image, cvPoint(squares[i][1].x,\n                                squares[i][1].y),\n                 cvPoint(squares[i][1].x - lineLength,\n                         squares[i][1].y), cvScalar(0, 0, 255, 0),\n                 8, 4);\n        cv::line(image, cvPoint(squares[i][1].x,\n                                squares[i][1].y),\n                 cvPoint(squares[i][1].x,\n                         squares[i][1].y + lineLength),\n                 cvScalar(0, 0, 255, 0), 8, 4);\n        /**\n       *    left bottom\n       */\n        cv::line(image, cvPoint(squares[i][2].x,\n                                squares[i][2].y),\n                 cvPoint(squares[i][2].x,\n                         squares[i][2].y - lineLength),\n                 cvScalar(255, 255, 255, 0), 8, 4);\n        cv::line(image, cvPoint(squares[i][2].x,\n                                squares[i][2].y),\n                 cvPoint(squares[i][2].x - lineLength,\n                         squares[i][2].y),\n                 cvScalar(255, 255, 255, 0), 8, 4);\n        /**\n     *    left top\n     */\n        cv::line(image, cvPoint(squares[i][3].x,\n                                squares[i][3].y),\n                 cvPoint(squares[i][3].x + lineLength,\n                         squares[i][3].y),\n                 cvScalar(255, 255, 255, 0), 8, 4);\n        cv::line(image, cvPoint(squares[i][3].x,\n                                squares[i][3].y),\n                 cvPoint(squares[i][3].x,\n                         squares[i][3].y - lineLength),\n                 cvScalar(255, 255, 255, 0), 8, 4);\n\n\n//        selectFeatureBounds(image, cvPoint(squares[i][3].x,\n//                                           squares[i][3].y),\n//                            cvPoint(squares[i][1].x,\n//                                    squares[i][1].y), image.size);\n\n\n    }\n}\nvoid\nmain(JNIEnv *, jobject, jlong addrGray, jlong addrRgba) {\n\n    Mat &image = *(Mat *) addrRgba;\n    vector<vector<Point> > squares;\n    Mat newImage = image.clone();\n\n    float scale = 0.25;\n    resize(image, newImage, Size(), scale, scale);\n    findSquares(newImage, squares, scale);\n    drawSquares(image, squares);\n    newImage.release();\n\n}\n\n}\n\n\n```\n","slug":"detection-the-largest-retangle","published":1,"updated":"2017-07-05T02:46:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7fuy45a0006ji5jxsdl1n8z","content":"<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;jni.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;opencv2/opencv.hpp&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;android/log.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span>  LOG_TAG    <span class=\"meta-string\">\"JNI_PART\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOGI(...)  __android_log_print(ANDROID_LOG_INFO,LOG_TAG, __VA_ARGS__)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOGD(...)  __android_log_print(ANDROID_LOG_DEBUG,LOG_TAG, __VA_ARGS__)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOGW(...)  __android_log_print(ANDROID_LOG_WARN,LOG_TAG, __VA_ARGS__)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG_TAG, __VA_ARGS__)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOGF(...)  __android_log_print(ANDROID_LOG_FATAL,LOG_TAG, __VA_ARGS__)</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> cv;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * auth:huanjulu</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;jni.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;opencv2/opencv.hpp&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;android/log.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span>  LOG_TAG    <span class=\"meta-string\">\"JNI_PART\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOGI(...)  __android_log_print(ANDROID_LOG_INFO,LOG_TAG, __VA_ARGS__)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOGD(...)  __android_log_print(ANDROID_LOG_DEBUG,LOG_TAG, __VA_ARGS__)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOGW(...)  __android_log_print(ANDROID_LOG_WARN,LOG_TAG, __VA_ARGS__)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG_TAG, __VA_ARGS__)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOGF(...)  __android_log_print(ANDROID_LOG_FATAL,LOG_TAG, __VA_ARGS__)</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> cv;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> &#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">jstring <span class=\"title\">Java_com_martin_huanjulu_testopencv_MainActivity_stringFromJNI</span><span class=\"params\">(</span></span></div><div class=\"line\">        JNIEnv *env,</div><div class=\"line\">        jobject <span class=\"comment\">/* this */</span>) &#123;</div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> hello = <span class=\"string\">\"Hello from C++\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> env-&gt;NewStringUTF(hello.c_str());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> thresh = <span class=\"number\">120</span>;</div><div class=\"line\"><span class=\"keyword\">double</span> max_size_ratio = <span class=\"number\">0.6</span>;</div><div class=\"line\"><span class=\"keyword\">double</span> min_size_ratio = <span class=\"number\">0.1</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">angle</span><span class=\"params\">(Point pt1, Point pt2, Point pt0)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">double</span> dx1 = pt1.x - pt0.x;</div><div class=\"line\">    <span class=\"keyword\">double</span> dy1 = pt1.y - pt0.y;</div><div class=\"line\">    <span class=\"keyword\">double</span> dx2 = pt2.x - pt0.x;</div><div class=\"line\">    <span class=\"keyword\">double</span> dy2 = pt2.y - pt0.y;</div><div class=\"line\">    <span class=\"keyword\">return</span> (dx1 * dx2 + dy1 * dy2) /</div><div class=\"line\">           <span class=\"built_in\">sqrt</span>((dx1 * dx1 + dy1 * dy1) * (dx2 * dx2 + dy2 * dy2) + <span class=\"number\">1e-10</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span></span></div><div class=\"line\"><span class=\"title\">selectFeatureBounds</span><span class=\"params\">(Mat &amp;frame, CvPoint topLeftPoint, CvPoint oppssiteTotopLeft,</span></div><div class=\"line\">                    MatSize imageSize) &#123;</div><div class=\"line\">    cv::Mat overlay;</div><div class=\"line\">    <span class=\"keyword\">double</span> alpha = <span class=\"number\">0.3</span>;</div><div class=\"line\">    frame.copyTo(overlay);</div><div class=\"line\">    cv::rectangle(overlay, topLeftPoint, oppssiteTotopLeft, cvScalar(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>), CV_FILLED, <span class=\"number\">4</span>);</div><div class=\"line\"><span class=\"comment\">//    cv::rectangle(frame, topLeftPoint, oppssiteTotopLeft, cvScalar(0, 0, 255 * 0.7), CV_FILLED, 4);</span></div><div class=\"line\">    cv::addWeighted(overlay, alpha, frame, <span class=\"number\">1</span> - alpha, <span class=\"number\">0</span>, frame);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">findSquares</span><span class=\"params\">(<span class=\"keyword\">const</span> Mat &amp;image, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;Point&gt; &gt; &amp;squares, <span class=\"keyword\">double</span> resize_scale)</span> </span>&#123;</div><div class=\"line\">    squares.clear();</div><div class=\"line\">    Mat pyr, timg, gray0(image.size(), CV_8U), gray;</div><div class=\"line\">    image.copyTo(timg);</div><div class=\"line\">    <span class=\"keyword\">int</span> max_size = image.cols * image.rows;</div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;Point&gt; &gt; contours;</div><div class=\"line\">    <span class=\"keyword\">int</span> N = <span class=\"number\">4</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> c = <span class=\"number\">0</span>; c &lt; <span class=\"number\">3</span>; c++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> ch[] = &#123;c, <span class=\"number\">0</span>&#125;;</div><div class=\"line\">        mixChannels(&amp;timg, <span class=\"number\">1</span>, &amp;gray0, <span class=\"number\">1</span>, ch, <span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> l = <span class=\"number\">0</span>; l &lt; N; l++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (l == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                Canny(gray0, gray, <span class=\"number\">0</span>, thresh, <span class=\"number\">3</span>);</div><div class=\"line\">                dilate(gray, gray, Mat(), Point(<span class=\"number\">-1</span>, <span class=\"number\">-1</span>));</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                gray = (gray0 &gt;= (l + <span class=\"number\">1</span>) * <span class=\"number\">255</span> / N);</div><div class=\"line\">            &#125;</div><div class=\"line\">            findContours(gray, contours, RETR_LIST, CHAIN_APPROX_SIMPLE);</div><div class=\"line\">            <span class=\"built_in\">vector</span>&lt;Point&gt; approx;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; contours.size(); i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">double</span> area0 = contourArea(contours[i]);</div><div class=\"line\">                <span class=\"keyword\">if</span> ((area0 &gt; max_size_ratio * max_size) || (area0 &lt; min_size_ratio * max_size))</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                approxPolyDP(Mat(contours[i]), approx, arcLength(Mat(contours[i]), <span class=\"literal\">true</span>) * <span class=\"number\">0.015</span>,</div><div class=\"line\">                             <span class=\"literal\">true</span>);</div><div class=\"line\">                <span class=\"keyword\">if</span> (approx.size() == <span class=\"number\">4</span> &amp;&amp; isContourConvex(Mat(approx))) &#123;</div><div class=\"line\">                    <span class=\"keyword\">double</span> maxCosine = <span class=\"number\">0</span>;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">2</span>; j &lt; <span class=\"number\">5</span>; j++) &#123;</div><div class=\"line\">                        <span class=\"keyword\">double</span> cosine = <span class=\"built_in\">fabs</span>(angle(approx[j % <span class=\"number\">4</span>], approx[j - <span class=\"number\">2</span>], approx[j - <span class=\"number\">1</span>]));</div><div class=\"line\">                        maxCosine = MAX(maxCosine, cosine);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"comment\">//if( maxCosine &lt; 0.5 ) //angle must be larger than 60</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (maxCosine &lt; <span class=\"number\">0.25</span>) <span class=\"comment\">//angle must be larger than 75</span></div><div class=\"line\">                        squares.push_back(approx);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//pick the center one</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (squares.size()) &#123;</div><div class=\"line\">        <span class=\"keyword\">double</span> min_dis = <span class=\"number\">100000</span>;</div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;Point&gt; pts;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; squares.size(); i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">double</span> new_dis =</div><div class=\"line\">                    <span class=\"built_in\">fabs</span>(squares[i][<span class=\"number\">0</span>].x + squares[i][<span class=\"number\">1</span>].x + squares[i][<span class=\"number\">2</span>].x + squares[i][<span class=\"number\">3</span>].x) /</div><div class=\"line\">                    <span class=\"number\">4.0</span> +</div><div class=\"line\">                    (squares[i][<span class=\"number\">0</span>].y + squares[i][<span class=\"number\">1</span>].y + squares[i][<span class=\"number\">2</span>].y + squares[i][<span class=\"number\">3</span>].y) / <span class=\"number\">4.0</span> -</div><div class=\"line\">                    image.cols / <span class=\"number\">2.0</span> - image.rows / <span class=\"number\">2.0</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (new_dis &lt; min_dis) &#123;</div><div class=\"line\">                min_dis = new_dis;</div><div class=\"line\">                pts = squares[i];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        squares.clear();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; pts.size(); i++) &#123;</div><div class=\"line\">            pts[i].x = <span class=\"keyword\">int</span>(pts[i].x * (<span class=\"number\">1.0</span> / resize_scale));</div><div class=\"line\">            pts[i].y = <span class=\"keyword\">int</span>(pts[i].y * (<span class=\"number\">1.0</span> / resize_scale));</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">double</span> max_x = <span class=\"number\">-1</span>, min_x = <span class=\"number\">10000</span>, max_y = <span class=\"number\">-1</span>, min_y = <span class=\"number\">100000</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; pts.size(); i++) &#123;</div><div class=\"line\">            max_x = max_x &gt; pts[i].x ? max_x : pts[i].x;</div><div class=\"line\">            min_x = min_x &lt; pts[i].x ? min_x : pts[i].x;</div><div class=\"line\">            max_y = max_y &gt; pts[i].y ? max_y : pts[i].y;</div><div class=\"line\">            min_y = min_y &lt; pts[i].y ? min_y : pts[i].y;</div><div class=\"line\">        &#125;</div><div class=\"line\">        pts.clear();</div><div class=\"line\">        pts.push_back(Point(min_x, min_y));</div><div class=\"line\">        pts.push_back(Point(max_x, min_y));</div><div class=\"line\">        pts.push_back(Point(max_x, max_y));</div><div class=\"line\">        pts.push_back(Point(min_x, max_y));</div><div class=\"line\">        squares.push_back(pts);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span></span></div><div class=\"line\"><span class=\"title\">drawSquares</span><span class=\"params\">(Mat &amp;image, <span class=\"keyword\">const</span> <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;Point&gt; &gt; &amp;squares</span></div><div class=\"line\">) &#123;</div><div class=\"line\">    Size boxSize = image.size();</div><div class=\"line\">    <span class=\"keyword\">int</span> height = boxSize.height;</div><div class=\"line\">    <span class=\"keyword\">int</span> width = boxSize.width;</div><div class=\"line\">    <span class=\"keyword\">int</span> horizontallineLength = boxSize.width / <span class=\"number\">4</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> verticallineLength = height / <span class=\"number\">5</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> lineLength = <span class=\"number\">30</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; squares.size(); i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> Point *p = &amp;squares[i][<span class=\"number\">0</span>];</div><div class=\"line\">        <span class=\"keyword\">int</span> n = (<span class=\"keyword\">int</span>) squares[i].size();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        cv::line(image,</div><div class=\"line\">                 cvPoint(squares[i][<span class=\"number\">0</span>].x, squares[i][<span class=\"number\">0</span>].y),</div><div class=\"line\">                 cvPoint(squares[i][<span class=\"number\">0</span>].x + lineLength,</div><div class=\"line\">                         squares[i][<span class=\"number\">0</span>].y), cvScalar(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>),</div><div class=\"line\">                 <span class=\"number\">8</span>, <span class=\"number\">4</span>);</div><div class=\"line\">        cv::line(image,</div><div class=\"line\">                 cvPoint(squares[i][<span class=\"number\">0</span>].x, squares[i][<span class=\"number\">0</span>].y),</div><div class=\"line\">                 cvPoint(squares[i][<span class=\"number\">0</span>].x,</div><div class=\"line\">                         squares[i][<span class=\"number\">0</span>].y + lineLength),</div><div class=\"line\">                 cvScalar(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>), <span class=\"number\">8</span>, <span class=\"number\">4</span>);</div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">       *    right bottom</div><div class=\"line\">       */</div><div class=\"line\">        cv::line(image, cvPoint(squares[i][<span class=\"number\">1</span>].x,</div><div class=\"line\">                                squares[i][<span class=\"number\">1</span>].y),</div><div class=\"line\">                 cvPoint(squares[i][<span class=\"number\">1</span>].x - lineLength,</div><div class=\"line\">                         squares[i][<span class=\"number\">1</span>].y), cvScalar(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>),</div><div class=\"line\">                 <span class=\"number\">8</span>, <span class=\"number\">4</span>);</div><div class=\"line\">        cv::line(image, cvPoint(squares[i][<span class=\"number\">1</span>].x,</div><div class=\"line\">                                squares[i][<span class=\"number\">1</span>].y),</div><div class=\"line\">                 cvPoint(squares[i][<span class=\"number\">1</span>].x,</div><div class=\"line\">                         squares[i][<span class=\"number\">1</span>].y + lineLength),</div><div class=\"line\">                 cvScalar(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>), <span class=\"number\">8</span>, <span class=\"number\">4</span>);</div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">       *    left bottom</div><div class=\"line\">       */</div><div class=\"line\">        cv::line(image, cvPoint(squares[i][<span class=\"number\">2</span>].x,</div><div class=\"line\">                                squares[i][<span class=\"number\">2</span>].y),</div><div class=\"line\">                 cvPoint(squares[i][<span class=\"number\">2</span>].x,</div><div class=\"line\">                         squares[i][<span class=\"number\">2</span>].y - lineLength),</div><div class=\"line\">                 cvScalar(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>), <span class=\"number\">8</span>, <span class=\"number\">4</span>);</div><div class=\"line\">        cv::line(image, cvPoint(squares[i][<span class=\"number\">2</span>].x,</div><div class=\"line\">                                squares[i][<span class=\"number\">2</span>].y),</div><div class=\"line\">                 cvPoint(squares[i][<span class=\"number\">2</span>].x - lineLength,</div><div class=\"line\">                         squares[i][<span class=\"number\">2</span>].y),</div><div class=\"line\">                 cvScalar(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>), <span class=\"number\">8</span>, <span class=\"number\">4</span>);</div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">     *    left top</div><div class=\"line\">     */</div><div class=\"line\">        cv::line(image, cvPoint(squares[i][<span class=\"number\">3</span>].x,</div><div class=\"line\">                                squares[i][<span class=\"number\">3</span>].y),</div><div class=\"line\">                 cvPoint(squares[i][<span class=\"number\">3</span>].x + lineLength,</div><div class=\"line\">                         squares[i][<span class=\"number\">3</span>].y),</div><div class=\"line\">                 cvScalar(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>), <span class=\"number\">8</span>, <span class=\"number\">4</span>);</div><div class=\"line\">        cv::line(image, cvPoint(squares[i][<span class=\"number\">3</span>].x,</div><div class=\"line\">                                squares[i][<span class=\"number\">3</span>].y),</div><div class=\"line\">                 cvPoint(squares[i][<span class=\"number\">3</span>].x,</div><div class=\"line\">                         squares[i][<span class=\"number\">3</span>].y - lineLength),</div><div class=\"line\">                 cvScalar(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>), <span class=\"number\">8</span>, <span class=\"number\">4</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//        selectFeatureBounds(image, cvPoint(squares[i][3].x,</span></div><div class=\"line\"><span class=\"comment\">//                                           squares[i][3].y),</span></div><div class=\"line\"><span class=\"comment\">//                            cvPoint(squares[i][1].x,</span></div><div class=\"line\"><span class=\"comment\">//                                    squares[i][1].y), image.size);</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span></span></div><div class=\"line\"><span class=\"title\">main</span><span class=\"params\">(JNIEnv *, jobject, jlong addrGray, jlong addrRgba)</span> &#123;</div><div class=\"line\"></div><div class=\"line\">    Mat &amp;image = *(Mat *) addrRgba;</div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;Point&gt; &gt; squares;</div><div class=\"line\">    Mat newImage = image.clone();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">float</span> scale = <span class=\"number\">0.25</span>;</div><div class=\"line\">    resize(image, newImage, Size(), scale, scale);</div><div class=\"line\">    findSquares(newImage, squares, scale);</div><div class=\"line\">    drawSquares(image, squares);</div><div class=\"line\">    newImage.release();</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;jni.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;opencv2/opencv.hpp&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;android/log.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span>  LOG_TAG    <span class=\"meta-string\">\"JNI_PART\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOGI(...)  __android_log_print(ANDROID_LOG_INFO,LOG_TAG, __VA_ARGS__)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOGD(...)  __android_log_print(ANDROID_LOG_DEBUG,LOG_TAG, __VA_ARGS__)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOGW(...)  __android_log_print(ANDROID_LOG_WARN,LOG_TAG, __VA_ARGS__)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG_TAG, __VA_ARGS__)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOGF(...)  __android_log_print(ANDROID_LOG_FATAL,LOG_TAG, __VA_ARGS__)</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> cv;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div></pre></td></tr></table></figure>","more":"<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * auth:huanjulu</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;jni.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;opencv2/opencv.hpp&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;android/log.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span>  LOG_TAG    <span class=\"meta-string\">\"JNI_PART\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOGI(...)  __android_log_print(ANDROID_LOG_INFO,LOG_TAG, __VA_ARGS__)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOGD(...)  __android_log_print(ANDROID_LOG_DEBUG,LOG_TAG, __VA_ARGS__)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOGW(...)  __android_log_print(ANDROID_LOG_WARN,LOG_TAG, __VA_ARGS__)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG_TAG, __VA_ARGS__)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOGF(...)  __android_log_print(ANDROID_LOG_FATAL,LOG_TAG, __VA_ARGS__)</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> cv;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> &#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">jstring <span class=\"title\">Java_com_martin_huanjulu_testopencv_MainActivity_stringFromJNI</span><span class=\"params\">(</span></span></div><div class=\"line\">        JNIEnv *env,</div><div class=\"line\">        jobject <span class=\"comment\">/* this */</span>) &#123;</div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> hello = <span class=\"string\">\"Hello from C++\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> env-&gt;NewStringUTF(hello.c_str());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> thresh = <span class=\"number\">120</span>;</div><div class=\"line\"><span class=\"keyword\">double</span> max_size_ratio = <span class=\"number\">0.6</span>;</div><div class=\"line\"><span class=\"keyword\">double</span> min_size_ratio = <span class=\"number\">0.1</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">angle</span><span class=\"params\">(Point pt1, Point pt2, Point pt0)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">double</span> dx1 = pt1.x - pt0.x;</div><div class=\"line\">    <span class=\"keyword\">double</span> dy1 = pt1.y - pt0.y;</div><div class=\"line\">    <span class=\"keyword\">double</span> dx2 = pt2.x - pt0.x;</div><div class=\"line\">    <span class=\"keyword\">double</span> dy2 = pt2.y - pt0.y;</div><div class=\"line\">    <span class=\"keyword\">return</span> (dx1 * dx2 + dy1 * dy2) /</div><div class=\"line\">           <span class=\"built_in\">sqrt</span>((dx1 * dx1 + dy1 * dy1) * (dx2 * dx2 + dy2 * dy2) + <span class=\"number\">1e-10</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span></span></div><div class=\"line\"><span class=\"title\">selectFeatureBounds</span><span class=\"params\">(Mat &amp;frame, CvPoint topLeftPoint, CvPoint oppssiteTotopLeft,</span></div><div class=\"line\">                    MatSize imageSize) &#123;</div><div class=\"line\">    cv::Mat overlay;</div><div class=\"line\">    <span class=\"keyword\">double</span> alpha = <span class=\"number\">0.3</span>;</div><div class=\"line\">    frame.copyTo(overlay);</div><div class=\"line\">    cv::rectangle(overlay, topLeftPoint, oppssiteTotopLeft, cvScalar(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>), CV_FILLED, <span class=\"number\">4</span>);</div><div class=\"line\"><span class=\"comment\">//    cv::rectangle(frame, topLeftPoint, oppssiteTotopLeft, cvScalar(0, 0, 255 * 0.7), CV_FILLED, 4);</span></div><div class=\"line\">    cv::addWeighted(overlay, alpha, frame, <span class=\"number\">1</span> - alpha, <span class=\"number\">0</span>, frame);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">findSquares</span><span class=\"params\">(<span class=\"keyword\">const</span> Mat &amp;image, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;Point&gt; &gt; &amp;squares, <span class=\"keyword\">double</span> resize_scale)</span> </span>&#123;</div><div class=\"line\">    squares.clear();</div><div class=\"line\">    Mat pyr, timg, gray0(image.size(), CV_8U), gray;</div><div class=\"line\">    image.copyTo(timg);</div><div class=\"line\">    <span class=\"keyword\">int</span> max_size = image.cols * image.rows;</div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;Point&gt; &gt; contours;</div><div class=\"line\">    <span class=\"keyword\">int</span> N = <span class=\"number\">4</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> c = <span class=\"number\">0</span>; c &lt; <span class=\"number\">3</span>; c++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> ch[] = &#123;c, <span class=\"number\">0</span>&#125;;</div><div class=\"line\">        mixChannels(&amp;timg, <span class=\"number\">1</span>, &amp;gray0, <span class=\"number\">1</span>, ch, <span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> l = <span class=\"number\">0</span>; l &lt; N; l++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (l == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                Canny(gray0, gray, <span class=\"number\">0</span>, thresh, <span class=\"number\">3</span>);</div><div class=\"line\">                dilate(gray, gray, Mat(), Point(<span class=\"number\">-1</span>, <span class=\"number\">-1</span>));</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                gray = (gray0 &gt;= (l + <span class=\"number\">1</span>) * <span class=\"number\">255</span> / N);</div><div class=\"line\">            &#125;</div><div class=\"line\">            findContours(gray, contours, RETR_LIST, CHAIN_APPROX_SIMPLE);</div><div class=\"line\">            <span class=\"built_in\">vector</span>&lt;Point&gt; approx;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; contours.size(); i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">double</span> area0 = contourArea(contours[i]);</div><div class=\"line\">                <span class=\"keyword\">if</span> ((area0 &gt; max_size_ratio * max_size) || (area0 &lt; min_size_ratio * max_size))</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                approxPolyDP(Mat(contours[i]), approx, arcLength(Mat(contours[i]), <span class=\"literal\">true</span>) * <span class=\"number\">0.015</span>,</div><div class=\"line\">                             <span class=\"literal\">true</span>);</div><div class=\"line\">                <span class=\"keyword\">if</span> (approx.size() == <span class=\"number\">4</span> &amp;&amp; isContourConvex(Mat(approx))) &#123;</div><div class=\"line\">                    <span class=\"keyword\">double</span> maxCosine = <span class=\"number\">0</span>;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">2</span>; j &lt; <span class=\"number\">5</span>; j++) &#123;</div><div class=\"line\">                        <span class=\"keyword\">double</span> cosine = <span class=\"built_in\">fabs</span>(angle(approx[j % <span class=\"number\">4</span>], approx[j - <span class=\"number\">2</span>], approx[j - <span class=\"number\">1</span>]));</div><div class=\"line\">                        maxCosine = MAX(maxCosine, cosine);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"comment\">//if( maxCosine &lt; 0.5 ) //angle must be larger than 60</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (maxCosine &lt; <span class=\"number\">0.25</span>) <span class=\"comment\">//angle must be larger than 75</span></div><div class=\"line\">                        squares.push_back(approx);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//pick the center one</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (squares.size()) &#123;</div><div class=\"line\">        <span class=\"keyword\">double</span> min_dis = <span class=\"number\">100000</span>;</div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;Point&gt; pts;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; squares.size(); i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">double</span> new_dis =</div><div class=\"line\">                    <span class=\"built_in\">fabs</span>(squares[i][<span class=\"number\">0</span>].x + squares[i][<span class=\"number\">1</span>].x + squares[i][<span class=\"number\">2</span>].x + squares[i][<span class=\"number\">3</span>].x) /</div><div class=\"line\">                    <span class=\"number\">4.0</span> +</div><div class=\"line\">                    (squares[i][<span class=\"number\">0</span>].y + squares[i][<span class=\"number\">1</span>].y + squares[i][<span class=\"number\">2</span>].y + squares[i][<span class=\"number\">3</span>].y) / <span class=\"number\">4.0</span> -</div><div class=\"line\">                    image.cols / <span class=\"number\">2.0</span> - image.rows / <span class=\"number\">2.0</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (new_dis &lt; min_dis) &#123;</div><div class=\"line\">                min_dis = new_dis;</div><div class=\"line\">                pts = squares[i];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        squares.clear();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; pts.size(); i++) &#123;</div><div class=\"line\">            pts[i].x = <span class=\"keyword\">int</span>(pts[i].x * (<span class=\"number\">1.0</span> / resize_scale));</div><div class=\"line\">            pts[i].y = <span class=\"keyword\">int</span>(pts[i].y * (<span class=\"number\">1.0</span> / resize_scale));</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">double</span> max_x = <span class=\"number\">-1</span>, min_x = <span class=\"number\">10000</span>, max_y = <span class=\"number\">-1</span>, min_y = <span class=\"number\">100000</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; pts.size(); i++) &#123;</div><div class=\"line\">            max_x = max_x &gt; pts[i].x ? max_x : pts[i].x;</div><div class=\"line\">            min_x = min_x &lt; pts[i].x ? min_x : pts[i].x;</div><div class=\"line\">            max_y = max_y &gt; pts[i].y ? max_y : pts[i].y;</div><div class=\"line\">            min_y = min_y &lt; pts[i].y ? min_y : pts[i].y;</div><div class=\"line\">        &#125;</div><div class=\"line\">        pts.clear();</div><div class=\"line\">        pts.push_back(Point(min_x, min_y));</div><div class=\"line\">        pts.push_back(Point(max_x, min_y));</div><div class=\"line\">        pts.push_back(Point(max_x, max_y));</div><div class=\"line\">        pts.push_back(Point(min_x, max_y));</div><div class=\"line\">        squares.push_back(pts);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span></span></div><div class=\"line\"><span class=\"title\">drawSquares</span><span class=\"params\">(Mat &amp;image, <span class=\"keyword\">const</span> <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;Point&gt; &gt; &amp;squares</span></div><div class=\"line\">) &#123;</div><div class=\"line\">    Size boxSize = image.size();</div><div class=\"line\">    <span class=\"keyword\">int</span> height = boxSize.height;</div><div class=\"line\">    <span class=\"keyword\">int</span> width = boxSize.width;</div><div class=\"line\">    <span class=\"keyword\">int</span> horizontallineLength = boxSize.width / <span class=\"number\">4</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> verticallineLength = height / <span class=\"number\">5</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> lineLength = <span class=\"number\">30</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; squares.size(); i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> Point *p = &amp;squares[i][<span class=\"number\">0</span>];</div><div class=\"line\">        <span class=\"keyword\">int</span> n = (<span class=\"keyword\">int</span>) squares[i].size();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        cv::line(image,</div><div class=\"line\">                 cvPoint(squares[i][<span class=\"number\">0</span>].x, squares[i][<span class=\"number\">0</span>].y),</div><div class=\"line\">                 cvPoint(squares[i][<span class=\"number\">0</span>].x + lineLength,</div><div class=\"line\">                         squares[i][<span class=\"number\">0</span>].y), cvScalar(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>),</div><div class=\"line\">                 <span class=\"number\">8</span>, <span class=\"number\">4</span>);</div><div class=\"line\">        cv::line(image,</div><div class=\"line\">                 cvPoint(squares[i][<span class=\"number\">0</span>].x, squares[i][<span class=\"number\">0</span>].y),</div><div class=\"line\">                 cvPoint(squares[i][<span class=\"number\">0</span>].x,</div><div class=\"line\">                         squares[i][<span class=\"number\">0</span>].y + lineLength),</div><div class=\"line\">                 cvScalar(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>), <span class=\"number\">8</span>, <span class=\"number\">4</span>);</div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">       *    right bottom</div><div class=\"line\">       */</div><div class=\"line\">        cv::line(image, cvPoint(squares[i][<span class=\"number\">1</span>].x,</div><div class=\"line\">                                squares[i][<span class=\"number\">1</span>].y),</div><div class=\"line\">                 cvPoint(squares[i][<span class=\"number\">1</span>].x - lineLength,</div><div class=\"line\">                         squares[i][<span class=\"number\">1</span>].y), cvScalar(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>),</div><div class=\"line\">                 <span class=\"number\">8</span>, <span class=\"number\">4</span>);</div><div class=\"line\">        cv::line(image, cvPoint(squares[i][<span class=\"number\">1</span>].x,</div><div class=\"line\">                                squares[i][<span class=\"number\">1</span>].y),</div><div class=\"line\">                 cvPoint(squares[i][<span class=\"number\">1</span>].x,</div><div class=\"line\">                         squares[i][<span class=\"number\">1</span>].y + lineLength),</div><div class=\"line\">                 cvScalar(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>), <span class=\"number\">8</span>, <span class=\"number\">4</span>);</div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">       *    left bottom</div><div class=\"line\">       */</div><div class=\"line\">        cv::line(image, cvPoint(squares[i][<span class=\"number\">2</span>].x,</div><div class=\"line\">                                squares[i][<span class=\"number\">2</span>].y),</div><div class=\"line\">                 cvPoint(squares[i][<span class=\"number\">2</span>].x,</div><div class=\"line\">                         squares[i][<span class=\"number\">2</span>].y - lineLength),</div><div class=\"line\">                 cvScalar(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>), <span class=\"number\">8</span>, <span class=\"number\">4</span>);</div><div class=\"line\">        cv::line(image, cvPoint(squares[i][<span class=\"number\">2</span>].x,</div><div class=\"line\">                                squares[i][<span class=\"number\">2</span>].y),</div><div class=\"line\">                 cvPoint(squares[i][<span class=\"number\">2</span>].x - lineLength,</div><div class=\"line\">                         squares[i][<span class=\"number\">2</span>].y),</div><div class=\"line\">                 cvScalar(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>), <span class=\"number\">8</span>, <span class=\"number\">4</span>);</div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">     *    left top</div><div class=\"line\">     */</div><div class=\"line\">        cv::line(image, cvPoint(squares[i][<span class=\"number\">3</span>].x,</div><div class=\"line\">                                squares[i][<span class=\"number\">3</span>].y),</div><div class=\"line\">                 cvPoint(squares[i][<span class=\"number\">3</span>].x + lineLength,</div><div class=\"line\">                         squares[i][<span class=\"number\">3</span>].y),</div><div class=\"line\">                 cvScalar(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>), <span class=\"number\">8</span>, <span class=\"number\">4</span>);</div><div class=\"line\">        cv::line(image, cvPoint(squares[i][<span class=\"number\">3</span>].x,</div><div class=\"line\">                                squares[i][<span class=\"number\">3</span>].y),</div><div class=\"line\">                 cvPoint(squares[i][<span class=\"number\">3</span>].x,</div><div class=\"line\">                         squares[i][<span class=\"number\">3</span>].y - lineLength),</div><div class=\"line\">                 cvScalar(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>), <span class=\"number\">8</span>, <span class=\"number\">4</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//        selectFeatureBounds(image, cvPoint(squares[i][3].x,</span></div><div class=\"line\"><span class=\"comment\">//                                           squares[i][3].y),</span></div><div class=\"line\"><span class=\"comment\">//                            cvPoint(squares[i][1].x,</span></div><div class=\"line\"><span class=\"comment\">//                                    squares[i][1].y), image.size);</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span></span></div><div class=\"line\"><span class=\"title\">main</span><span class=\"params\">(JNIEnv *, jobject, jlong addrGray, jlong addrRgba)</span> &#123;</div><div class=\"line\"></div><div class=\"line\">    Mat &amp;image = *(Mat *) addrRgba;</div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;Point&gt; &gt; squares;</div><div class=\"line\">    Mat newImage = image.clone();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">float</span> scale = <span class=\"number\">0.25</span>;</div><div class=\"line\">    resize(image, newImage, Size(), scale, scale);</div><div class=\"line\">    findSquares(newImage, squares, scale);</div><div class=\"line\">    drawSquares(image, squares);</div><div class=\"line\">    newImage.release();</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-05-02T07:12:29.000Z","updated":"2017-05-02T08:22:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7fuy45r000sji5jftuf0xwe","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<a id=\"more\"></a>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>"},{"title":"NDK in Android","date":"2017-05-02T08:36:41.000Z","thumbnail":"https://www.pinterest.com/pin/419890365235460556/","_content":"\nAndroid NDK  简单来说就是可以让你的应用使用natice-code语言, （比如C ,C++)的工具集\n\n一：what is the ndk \n\n Ndk 是允许你在你的工程中可以使用native-code (比如C or c++)的工具, 你可以利用ndk来构建你的natice-app\n 正如我们知道的那样, Java 是构建android app 的默认语言, 然而, java 代码很容易被反编译, 但是这对C++ code 来说这并不简单, 并且c++ 代码更加高效\n\n<!-- more -->\n\n二：why is ndk\n\nC++ 代码反编译困难 \n\n对于计算复杂量大的代码, C or C++ code can increase the performance of your app\n\n三：buliding native app\n\n如果你使用android studio 开发, 你需要下载安装ndk包, More info: [NDK](https://developer.android.com/ndk/downloads/index.html?hl=zh-cn)\n\n1, 首先在代码中声明要在C++ code中要实现的native方法\n\n``` java\n/**\n * auth:huanjulu\n */\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n        ((TextView) findViewById(R.id.text)).setText(nativeMethod());\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.menu_main, menu);\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        // Handle action bar item clicks here. The action bar will\n        // automatically handle clicks on the Home/Up button, so long\n        // as you specify a parent activity in AndroidManifest.xml.\n        int id = item.getItemId();\n\n        //noinspection SimplifiableIfStatement\n        if (id == R.id.action_settings) {\n            return true;\n        }\n\n        return super.onOptionsItemSelected(item);\n    }\n    /**\n     * native code\n     *\n     * @return\n     */\n    public native String nativeMethod();\n\n}\n\n\n```\n\n2, 对包含`native` 关键字方法的类, 生成`.h` 头文件\n\n进入到本地Java文件夹下 ,在Terminal input the follow commond\n\n``` java\n javah -d ../jni jniproject.ndkproject.MainActivity\n```\n\nfirst , `jniproject.ndkproject` is your package name  and `MainActivity` is the class name that contains native code\n\nand after that , you can see the `.h` file of  `MainActivity` class , it looks like :\n\n![Qualified types](http://opd7g7we7.bkt.clouddn.com/WX20170503-174729.png)\n\nand we can looks what contents it contains\n\n``` bash\n\n/* DO NOT EDIT THIS FILE - it is machine generated */\n#include <jni.h>\n/* Header for class jniproject_ndkproject_MainActivity */\n\n#ifndef _Included_jniproject_ndkproject_MainActivity\n#define _Included_jniproject_ndkproject_MainActivity\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n/*\n * Class:     jniproject_ndkproject_MainActivity\n * Method:    nativeMethod\n * Signature: ()Ljava/lang/String;\n */\nJNIEXPORT jstring JNICALL Java_jniproject_ndkproject_MainActivity_nativeMethod\n  (JNIEnv *, jobject);\n\n#ifdef __cplusplus\n}\n#endif\n#endif\n\n```\n\n3, `android.mk``application.mk` file\n\n在你的jni directory, 新建`android.mk`, \n\n``` bash\n\nLOCAL_PATH := $(call my-dir)\ninclude $(CLEAR_VARS)\n\nLOCAL_MODULE := hellojni\nLOCAL_SRC_FILES := hellojni.cpp\ninclude $(BUILD_SHARED_LIBRARY)\n```\n\n`application.mk` \n\n``` bash\nAPP_MODULES := hellojni  //生成的.so name\n\nAPP_ABI := all  //生成的.so 目标cpu平台\n```\nif you want to know more information of syntax about them, here is the dox\n[http://android.mk/#intro](http://android.mk/#intro)\n\n4, 编写你的natie-code 实现文件, (ig  .cpp or .c)\n\n\n``` c++\n#include \"jniproject_ndkproject_MainActivity.h\"\n\nJNIEXPORT jstring JNICALL Java_jniproject_ndkproject_MainActivity_nativeMethod\n       (JNIEnv *env, jclass type) {\n\n    return env->NewStringUTF(\"this code from jni cpp\");\n}\n\n```\nas wo can see that in above c++ code \n\nfirst , you need to include you `.h`file\n\n``` java\n#include \"jniproject_ndkproject_MainActivity.h\"\n```\n接下来你需要按照c++ 代码的规范编写实现方法, 请注意方法实现的命名规范 (JNIEXPORT  返回值类型 JNICALL 包名_类名_方法名)\n\n5, ndk-build \n\nunder the `jni` dictionary, generate `.so` file \n\n``` java\nluhuanju:jni huanjulu$ ndk-build\n\n```\n接下来你需要把生成的`app/src/main/libs` 下的平台的.so 文件复制到 `app/libs` 下\n\n![Qualified types](http://opd7g7we7.bkt.clouddn.com/WX20170503-181618@2x.png)\n\n6, `app/build.gradle` config seeting \n\n``` java\napply plugin: 'com.android.application'\n\nandroid {\n    compileSdkVersion 25\n    buildToolsVersion \"25.0.2\"\n    defaultConfig {\n        applicationId \"jniproject.ndkproject\"\n        minSdkVersion 15\n        targetSdkVersion 25\n        versionCode 1\n        versionName \"1.0\"\n        testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\"\n\n\n        ndk {//指定生成的lib，比如此时生成native.so\n            moduleName   \"hellojni\"\n        }\n    }\n\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n    }\n}\n\ndependencies {\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {\n        exclude group: 'com.android.support', module: 'support-annotations'\n    })\n    compile 'com.android.support:appcompat-v7:25.2.0'\n    compile 'com.android.support.constraint:constraint-layout:1.0.0-beta4'\n    compile 'com.android.support:design:25.2.0'\n    testCompile 'junit:junit:4.12'\n}\n\n```\n\nthe the last step is that you just need call you natice-code library \n\n\n\n``` java\npackage jniproject.ndkproject;\n\nimport android.os.Bundle;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.widget.TextView;\n\n\n/**\n * auth:huanjulu\n */\n\npublic class MainActivity extends AppCompatActivity {\n\n\n    static {\n        System.loadLibrary(\"hellojni\");\n    }\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n        ((TextView) findViewById(R.id.text)).setText(nativeMethod());\n    }\n    /**\n     * native code\n     *\n     * @return\n     */\n    public native String nativeMethod();\n\n}\n\n```\n\nhere is source code \n\n[https://github.com/isicout/JNIProgjectExample](https://github.com/isicout/JNIProgjectExample)\n\n\n\n\n","source":"_posts/Ndk.md","raw":"---\ntitle: NDK in Android\ndate: 2017-05-02 16:36:41\ntags: [NDK, JNI, Android]\nthumbnail: https://www.pinterest.com/pin/419890365235460556/\n---\n\nAndroid NDK  简单来说就是可以让你的应用使用natice-code语言, （比如C ,C++)的工具集\n\n一：what is the ndk \n\n Ndk 是允许你在你的工程中可以使用native-code (比如C or c++)的工具, 你可以利用ndk来构建你的natice-app\n 正如我们知道的那样, Java 是构建android app 的默认语言, 然而, java 代码很容易被反编译, 但是这对C++ code 来说这并不简单, 并且c++ 代码更加高效\n\n<!-- more -->\n\n二：why is ndk\n\nC++ 代码反编译困难 \n\n对于计算复杂量大的代码, C or C++ code can increase the performance of your app\n\n三：buliding native app\n\n如果你使用android studio 开发, 你需要下载安装ndk包, More info: [NDK](https://developer.android.com/ndk/downloads/index.html?hl=zh-cn)\n\n1, 首先在代码中声明要在C++ code中要实现的native方法\n\n``` java\n/**\n * auth:huanjulu\n */\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n        ((TextView) findViewById(R.id.text)).setText(nativeMethod());\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.menu_main, menu);\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        // Handle action bar item clicks here. The action bar will\n        // automatically handle clicks on the Home/Up button, so long\n        // as you specify a parent activity in AndroidManifest.xml.\n        int id = item.getItemId();\n\n        //noinspection SimplifiableIfStatement\n        if (id == R.id.action_settings) {\n            return true;\n        }\n\n        return super.onOptionsItemSelected(item);\n    }\n    /**\n     * native code\n     *\n     * @return\n     */\n    public native String nativeMethod();\n\n}\n\n\n```\n\n2, 对包含`native` 关键字方法的类, 生成`.h` 头文件\n\n进入到本地Java文件夹下 ,在Terminal input the follow commond\n\n``` java\n javah -d ../jni jniproject.ndkproject.MainActivity\n```\n\nfirst , `jniproject.ndkproject` is your package name  and `MainActivity` is the class name that contains native code\n\nand after that , you can see the `.h` file of  `MainActivity` class , it looks like :\n\n![Qualified types](http://opd7g7we7.bkt.clouddn.com/WX20170503-174729.png)\n\nand we can looks what contents it contains\n\n``` bash\n\n/* DO NOT EDIT THIS FILE - it is machine generated */\n#include <jni.h>\n/* Header for class jniproject_ndkproject_MainActivity */\n\n#ifndef _Included_jniproject_ndkproject_MainActivity\n#define _Included_jniproject_ndkproject_MainActivity\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n/*\n * Class:     jniproject_ndkproject_MainActivity\n * Method:    nativeMethod\n * Signature: ()Ljava/lang/String;\n */\nJNIEXPORT jstring JNICALL Java_jniproject_ndkproject_MainActivity_nativeMethod\n  (JNIEnv *, jobject);\n\n#ifdef __cplusplus\n}\n#endif\n#endif\n\n```\n\n3, `android.mk``application.mk` file\n\n在你的jni directory, 新建`android.mk`, \n\n``` bash\n\nLOCAL_PATH := $(call my-dir)\ninclude $(CLEAR_VARS)\n\nLOCAL_MODULE := hellojni\nLOCAL_SRC_FILES := hellojni.cpp\ninclude $(BUILD_SHARED_LIBRARY)\n```\n\n`application.mk` \n\n``` bash\nAPP_MODULES := hellojni  //生成的.so name\n\nAPP_ABI := all  //生成的.so 目标cpu平台\n```\nif you want to know more information of syntax about them, here is the dox\n[http://android.mk/#intro](http://android.mk/#intro)\n\n4, 编写你的natie-code 实现文件, (ig  .cpp or .c)\n\n\n``` c++\n#include \"jniproject_ndkproject_MainActivity.h\"\n\nJNIEXPORT jstring JNICALL Java_jniproject_ndkproject_MainActivity_nativeMethod\n       (JNIEnv *env, jclass type) {\n\n    return env->NewStringUTF(\"this code from jni cpp\");\n}\n\n```\nas wo can see that in above c++ code \n\nfirst , you need to include you `.h`file\n\n``` java\n#include \"jniproject_ndkproject_MainActivity.h\"\n```\n接下来你需要按照c++ 代码的规范编写实现方法, 请注意方法实现的命名规范 (JNIEXPORT  返回值类型 JNICALL 包名_类名_方法名)\n\n5, ndk-build \n\nunder the `jni` dictionary, generate `.so` file \n\n``` java\nluhuanju:jni huanjulu$ ndk-build\n\n```\n接下来你需要把生成的`app/src/main/libs` 下的平台的.so 文件复制到 `app/libs` 下\n\n![Qualified types](http://opd7g7we7.bkt.clouddn.com/WX20170503-181618@2x.png)\n\n6, `app/build.gradle` config seeting \n\n``` java\napply plugin: 'com.android.application'\n\nandroid {\n    compileSdkVersion 25\n    buildToolsVersion \"25.0.2\"\n    defaultConfig {\n        applicationId \"jniproject.ndkproject\"\n        minSdkVersion 15\n        targetSdkVersion 25\n        versionCode 1\n        versionName \"1.0\"\n        testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\"\n\n\n        ndk {//指定生成的lib，比如此时生成native.so\n            moduleName   \"hellojni\"\n        }\n    }\n\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n    }\n}\n\ndependencies {\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {\n        exclude group: 'com.android.support', module: 'support-annotations'\n    })\n    compile 'com.android.support:appcompat-v7:25.2.0'\n    compile 'com.android.support.constraint:constraint-layout:1.0.0-beta4'\n    compile 'com.android.support:design:25.2.0'\n    testCompile 'junit:junit:4.12'\n}\n\n```\n\nthe the last step is that you just need call you natice-code library \n\n\n\n``` java\npackage jniproject.ndkproject;\n\nimport android.os.Bundle;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.widget.TextView;\n\n\n/**\n * auth:huanjulu\n */\n\npublic class MainActivity extends AppCompatActivity {\n\n\n    static {\n        System.loadLibrary(\"hellojni\");\n    }\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n        ((TextView) findViewById(R.id.text)).setText(nativeMethod());\n    }\n    /**\n     * native code\n     *\n     * @return\n     */\n    public native String nativeMethod();\n\n}\n\n```\n\nhere is source code \n\n[https://github.com/isicout/JNIProgjectExample](https://github.com/isicout/JNIProgjectExample)\n\n\n\n\n","slug":"Ndk","published":1,"updated":"2017-05-03T10:41:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7fuy45s000tji5jxwzvg24v","content":"<p>Android NDK  简单来说就是可以让你的应用使用natice-code语言, （比如C ,C++)的工具集</p>\n<p>一：what is the ndk </p>\n<p> Ndk 是允许你在你的工程中可以使用native-code (比如C or c++)的工具, 你可以利用ndk来构建你的natice-app<br> 正如我们知道的那样, Java 是构建android app 的默认语言, 然而, java 代码很容易被反编译, 但是这对C++ code 来说这并不简单, 并且c++ 代码更加高效</p>\n<a id=\"more\"></a>\n<p>二：why is ndk</p>\n<p>C++ 代码反编译困难 </p>\n<p>对于计算复杂量大的代码, C or C++ code can increase the performance of your app</p>\n<p>三：buliding native app</p>\n<p>如果你使用android studio 开发, 你需要下载安装ndk包, More info: <a href=\"https://developer.android.com/ndk/downloads/index.html?hl=zh-cn\" target=\"_blank\" rel=\"external\">NDK</a></p>\n<p>1, 首先在代码中声明要在C++ code中要实现的native方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * auth:huanjulu</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class=\"line\">        setSupportActionBar(toolbar);</div><div class=\"line\">        ((TextView) findViewById(R.id.text)).setText(nativeMethod());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onCreateOptionsMenu</span><span class=\"params\">(Menu menu)</span> </span>&#123;</div><div class=\"line\">        getMenuInflater().inflate(R.menu.menu_main, menu);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onOptionsItemSelected</span><span class=\"params\">(MenuItem item)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Handle action bar item clicks here. The action bar will</span></div><div class=\"line\">        <span class=\"comment\">// automatically handle clicks on the Home/Up button, so long</span></div><div class=\"line\">        <span class=\"comment\">// as you specify a parent activity in AndroidManifest.xml.</span></div><div class=\"line\">        <span class=\"keyword\">int</span> id = item.getItemId();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//noinspection SimplifiableIfStatement</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (id == R.id.action_settings) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onOptionsItemSelected(item);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * native code</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> String <span class=\"title\">nativeMethod</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2, 对包含<code>native</code> 关键字方法的类, 生成<code>.h</code> 头文件</p>\n<p>进入到本地Java文件夹下 ,在Terminal input the follow commond</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">javah -d ../jni jniproject.ndkproject.MainActivity</div></pre></td></tr></table></figure>\n<p>first , <code>jniproject.ndkproject</code> is your package name  and <code>MainActivity</code> is the class name that contains native code</p>\n<p>and after that , you can see the <code>.h</code> file of  <code>MainActivity</code> class , it looks like :</p>\n<p><img src=\"http://opd7g7we7.bkt.clouddn.com/WX20170503-174729.png\" alt=\"Qualified types\"></p>\n<p>and we can looks what contents it contains</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">/* DO NOT EDIT THIS FILE - it is machine generated */</div><div class=\"line\"><span class=\"comment\">#include &lt;jni.h&gt;</span></div><div class=\"line\">/* Header <span class=\"keyword\">for</span> class jniproject_ndkproject_MainActivity */</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#ifndef _Included_jniproject_ndkproject_MainActivity</span></div><div class=\"line\"><span class=\"comment\">#define _Included_jniproject_ndkproject_MainActivity</span></div><div class=\"line\"><span class=\"comment\">#ifdef __cplusplus</span></div><div class=\"line\">extern <span class=\"string\">\"C\"</span> &#123;</div><div class=\"line\"><span class=\"comment\">#endif</span></div><div class=\"line\">/*</div><div class=\"line\"> * Class:     jniproject_ndkproject_MainActivity</div><div class=\"line\"> * Method:    nativeMethod</div><div class=\"line\"> * Signature: ()Ljava/lang/String;</div><div class=\"line\"> */</div><div class=\"line\">JNIEXPORT jstring JNICALL Java_jniproject_ndkproject_MainActivity_nativeMethod</div><div class=\"line\">  (JNIEnv *, jobject);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#ifdef __cplusplus</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">#endif</span></div><div class=\"line\"><span class=\"comment\">#endif</span></div></pre></td></tr></table></figure>\n<p>3, <code>android.mk``application.mk</code> file</p>\n<p>在你的jni directory, 新建<code>android.mk</code>, </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">LOCAL_PATH := $(call my-dir)</div><div class=\"line\">include $(CLEAR_VARS)</div><div class=\"line\"></div><div class=\"line\">LOCAL_MODULE := hellojni</div><div class=\"line\">LOCAL_SRC_FILES := hellojni.cpp</div><div class=\"line\">include $(BUILD_SHARED_LIBRARY)</div></pre></td></tr></table></figure>\n<p><code>application.mk</code> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">APP_MODULES := hellojni  //生成的.so name</div><div class=\"line\"></div><div class=\"line\">APP_ABI := all  //生成的.so 目标cpu平台</div></pre></td></tr></table></figure>\n<p>if you want to know more information of syntax about them, here is the dox<br><a href=\"http://android.mk/#intro\" target=\"_blank\" rel=\"external\">http://android.mk/#intro</a></p>\n<p>4, 编写你的natie-code 实现文件, (ig  .cpp or .c)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"jniproject_ndkproject_MainActivity.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">JNIEXPORT jstring JNICALL <span class=\"title\">Java_jniproject_ndkproject_MainActivity_nativeMethod</span></span></div><div class=\"line\">       <span class=\"params\">(JNIEnv *env, jclass type)</span> &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> env-&gt;NewStringUTF(<span class=\"string\">\"this code from jni cpp\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>as wo can see that in above c++ code </p>\n<p>first , you need to include you <code>.h</code>file</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include \"jniproject_ndkproject_MainActivity.h\"</div></pre></td></tr></table></figure>\n<p>接下来你需要按照c++ 代码的规范编写实现方法, 请注意方法实现的命名规范 (JNIEXPORT  返回值类型 JNICALL 包名<em>类名</em>方法名)</p>\n<p>5, ndk-build </p>\n<p>under the <code>jni</code> dictionary, generate <code>.so</code> file </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">luhuanju:jni huanjulu$ ndk-build</div></pre></td></tr></table></figure>\n<p>接下来你需要把生成的<code>app/src/main/libs</code> 下的平台的.so 文件复制到 <code>app/libs</code> 下</p>\n<p><img src=\"http://opd7g7we7.bkt.clouddn.com/WX20170503-181618@2x.png\" alt=\"Qualified types\"></p>\n<p>6, <code>app/build.gradle</code> config seeting </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">apply plugin: <span class=\"string\">'com.android.application'</span></div><div class=\"line\"></div><div class=\"line\">android &#123;</div><div class=\"line\">    compileSdkVersion <span class=\"number\">25</span></div><div class=\"line\">    buildToolsVersion <span class=\"string\">\"25.0.2\"</span></div><div class=\"line\">    defaultConfig &#123;</div><div class=\"line\">        applicationId <span class=\"string\">\"jniproject.ndkproject\"</span></div><div class=\"line\">        minSdkVersion <span class=\"number\">15</span></div><div class=\"line\">        targetSdkVersion <span class=\"number\">25</span></div><div class=\"line\">        versionCode <span class=\"number\">1</span></div><div class=\"line\">        versionName <span class=\"string\">\"1.0\"</span></div><div class=\"line\">        testInstrumentationRunner <span class=\"string\">\"android.support.test.runner.AndroidJUnitRunner\"</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        ndk &#123;<span class=\"comment\">//指定生成的lib，比如此时生成native.so</span></div><div class=\"line\">            moduleName   <span class=\"string\">\"hellojni\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    buildTypes &#123;</div><div class=\"line\">        release &#123;</div><div class=\"line\">            <span class=\"function\">minifyEnabled <span class=\"keyword\">false</span></span></div><div class=\"line\">            proguardFiles <span class=\"title\">getDefaultProguardFile</span><span class=\"params\">(<span class=\"string\">'proguard-android.txt'</span>)</span>, 'proguard-rules.pro'</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">dependencies &#123;</div><div class=\"line\">    <span class=\"function\">compile <span class=\"title\">fileTree</span><span class=\"params\">(dir: <span class=\"string\">'libs'</span>, include: [<span class=\"string\">'*.jar'</span>])</span></span></div><div class=\"line\">    <span class=\"title\">androidTestCompile</span><span class=\"params\">(<span class=\"string\">'com.android.support.test.espresso:espresso-core:2.2.2'</span>, &#123;</span></div><div class=\"line\">        exclude group: <span class=\"string\">'com.android.support'</span>, <span class=\"keyword\">module</span>: <span class=\"string\">'support-annotations'</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">    compile 'com.android.support:appcompat-v7:25.2.0'</div><div class=\"line\">    compile 'com.android.support.constraint:constraint-layout:1.0.0-beta4'</div><div class=\"line\">    compile 'com.android.support:design:25.2.0'</div><div class=\"line\">    testCompile 'junit:junit:4.12'</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>the the last step is that you just need call you natice-code library </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> jniproject.ndkproject;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.Toolbar;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * auth:huanjulu</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">        System.loadLibrary(<span class=\"string\">\"hellojni\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class=\"line\">        setSupportActionBar(toolbar);</div><div class=\"line\">        ((TextView) findViewById(R.id.text)).setText(nativeMethod());</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * native code</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> String <span class=\"title\">nativeMethod</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>here is source code </p>\n<p><a href=\"https://github.com/isicout/JNIProgjectExample\" target=\"_blank\" rel=\"external\">https://github.com/isicout/JNIProgjectExample</a></p>\n","site":{"data":{}},"excerpt":"<p>Android NDK  简单来说就是可以让你的应用使用natice-code语言, （比如C ,C++)的工具集</p>\n<p>一：what is the ndk </p>\n<p> Ndk 是允许你在你的工程中可以使用native-code (比如C or c++)的工具, 你可以利用ndk来构建你的natice-app<br> 正如我们知道的那样, Java 是构建android app 的默认语言, 然而, java 代码很容易被反编译, 但是这对C++ code 来说这并不简单, 并且c++ 代码更加高效</p>","more":"<p>二：why is ndk</p>\n<p>C++ 代码反编译困难 </p>\n<p>对于计算复杂量大的代码, C or C++ code can increase the performance of your app</p>\n<p>三：buliding native app</p>\n<p>如果你使用android studio 开发, 你需要下载安装ndk包, More info: <a href=\"https://developer.android.com/ndk/downloads/index.html?hl=zh-cn\" target=\"_blank\" rel=\"external\">NDK</a></p>\n<p>1, 首先在代码中声明要在C++ code中要实现的native方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * auth:huanjulu</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class=\"line\">        setSupportActionBar(toolbar);</div><div class=\"line\">        ((TextView) findViewById(R.id.text)).setText(nativeMethod());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onCreateOptionsMenu</span><span class=\"params\">(Menu menu)</span> </span>&#123;</div><div class=\"line\">        getMenuInflater().inflate(R.menu.menu_main, menu);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onOptionsItemSelected</span><span class=\"params\">(MenuItem item)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Handle action bar item clicks here. The action bar will</span></div><div class=\"line\">        <span class=\"comment\">// automatically handle clicks on the Home/Up button, so long</span></div><div class=\"line\">        <span class=\"comment\">// as you specify a parent activity in AndroidManifest.xml.</span></div><div class=\"line\">        <span class=\"keyword\">int</span> id = item.getItemId();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//noinspection SimplifiableIfStatement</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (id == R.id.action_settings) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onOptionsItemSelected(item);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * native code</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> String <span class=\"title\">nativeMethod</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2, 对包含<code>native</code> 关键字方法的类, 生成<code>.h</code> 头文件</p>\n<p>进入到本地Java文件夹下 ,在Terminal input the follow commond</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">javah -d ../jni jniproject.ndkproject.MainActivity</div></pre></td></tr></table></figure>\n<p>first , <code>jniproject.ndkproject</code> is your package name  and <code>MainActivity</code> is the class name that contains native code</p>\n<p>and after that , you can see the <code>.h</code> file of  <code>MainActivity</code> class , it looks like :</p>\n<p><img src=\"http://opd7g7we7.bkt.clouddn.com/WX20170503-174729.png\" alt=\"Qualified types\"></p>\n<p>and we can looks what contents it contains</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">/* DO NOT EDIT THIS FILE - it is machine generated */</div><div class=\"line\"><span class=\"comment\">#include &lt;jni.h&gt;</span></div><div class=\"line\">/* Header <span class=\"keyword\">for</span> class jniproject_ndkproject_MainActivity */</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#ifndef _Included_jniproject_ndkproject_MainActivity</span></div><div class=\"line\"><span class=\"comment\">#define _Included_jniproject_ndkproject_MainActivity</span></div><div class=\"line\"><span class=\"comment\">#ifdef __cplusplus</span></div><div class=\"line\">extern <span class=\"string\">\"C\"</span> &#123;</div><div class=\"line\"><span class=\"comment\">#endif</span></div><div class=\"line\">/*</div><div class=\"line\"> * Class:     jniproject_ndkproject_MainActivity</div><div class=\"line\"> * Method:    nativeMethod</div><div class=\"line\"> * Signature: ()Ljava/lang/String;</div><div class=\"line\"> */</div><div class=\"line\">JNIEXPORT jstring JNICALL Java_jniproject_ndkproject_MainActivity_nativeMethod</div><div class=\"line\">  (JNIEnv *, jobject);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#ifdef __cplusplus</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">#endif</span></div><div class=\"line\"><span class=\"comment\">#endif</span></div></pre></td></tr></table></figure>\n<p>3, <code>android.mk``application.mk</code> file</p>\n<p>在你的jni directory, 新建<code>android.mk</code>, </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">LOCAL_PATH := $(call my-dir)</div><div class=\"line\">include $(CLEAR_VARS)</div><div class=\"line\"></div><div class=\"line\">LOCAL_MODULE := hellojni</div><div class=\"line\">LOCAL_SRC_FILES := hellojni.cpp</div><div class=\"line\">include $(BUILD_SHARED_LIBRARY)</div></pre></td></tr></table></figure>\n<p><code>application.mk</code> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">APP_MODULES := hellojni  //生成的.so name</div><div class=\"line\"></div><div class=\"line\">APP_ABI := all  //生成的.so 目标cpu平台</div></pre></td></tr></table></figure>\n<p>if you want to know more information of syntax about them, here is the dox<br><a href=\"http://android.mk/#intro\" target=\"_blank\" rel=\"external\">http://android.mk/#intro</a></p>\n<p>4, 编写你的natie-code 实现文件, (ig  .cpp or .c)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"jniproject_ndkproject_MainActivity.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">JNIEXPORT jstring JNICALL <span class=\"title\">Java_jniproject_ndkproject_MainActivity_nativeMethod</span></span></div><div class=\"line\">       <span class=\"params\">(JNIEnv *env, jclass type)</span> &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> env-&gt;NewStringUTF(<span class=\"string\">\"this code from jni cpp\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>as wo can see that in above c++ code </p>\n<p>first , you need to include you <code>.h</code>file</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include \"jniproject_ndkproject_MainActivity.h\"</div></pre></td></tr></table></figure>\n<p>接下来你需要按照c++ 代码的规范编写实现方法, 请注意方法实现的命名规范 (JNIEXPORT  返回值类型 JNICALL 包名<em>类名</em>方法名)</p>\n<p>5, ndk-build </p>\n<p>under the <code>jni</code> dictionary, generate <code>.so</code> file </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">luhuanju:jni huanjulu$ ndk-build</div></pre></td></tr></table></figure>\n<p>接下来你需要把生成的<code>app/src/main/libs</code> 下的平台的.so 文件复制到 <code>app/libs</code> 下</p>\n<p><img src=\"http://opd7g7we7.bkt.clouddn.com/WX20170503-181618@2x.png\" alt=\"Qualified types\"></p>\n<p>6, <code>app/build.gradle</code> config seeting </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">apply plugin: <span class=\"string\">'com.android.application'</span></div><div class=\"line\"></div><div class=\"line\">android &#123;</div><div class=\"line\">    compileSdkVersion <span class=\"number\">25</span></div><div class=\"line\">    buildToolsVersion <span class=\"string\">\"25.0.2\"</span></div><div class=\"line\">    defaultConfig &#123;</div><div class=\"line\">        applicationId <span class=\"string\">\"jniproject.ndkproject\"</span></div><div class=\"line\">        minSdkVersion <span class=\"number\">15</span></div><div class=\"line\">        targetSdkVersion <span class=\"number\">25</span></div><div class=\"line\">        versionCode <span class=\"number\">1</span></div><div class=\"line\">        versionName <span class=\"string\">\"1.0\"</span></div><div class=\"line\">        testInstrumentationRunner <span class=\"string\">\"android.support.test.runner.AndroidJUnitRunner\"</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        ndk &#123;<span class=\"comment\">//指定生成的lib，比如此时生成native.so</span></div><div class=\"line\">            moduleName   <span class=\"string\">\"hellojni\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    buildTypes &#123;</div><div class=\"line\">        release &#123;</div><div class=\"line\">            <span class=\"function\">minifyEnabled <span class=\"keyword\">false</span></span></div><div class=\"line\">            proguardFiles <span class=\"title\">getDefaultProguardFile</span><span class=\"params\">(<span class=\"string\">'proguard-android.txt'</span>)</span>, 'proguard-rules.pro'</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">dependencies &#123;</div><div class=\"line\">    <span class=\"function\">compile <span class=\"title\">fileTree</span><span class=\"params\">(dir: <span class=\"string\">'libs'</span>, include: [<span class=\"string\">'*.jar'</span>])</span></span></div><div class=\"line\">    <span class=\"title\">androidTestCompile</span><span class=\"params\">(<span class=\"string\">'com.android.support.test.espresso:espresso-core:2.2.2'</span>, &#123;</span></div><div class=\"line\">        exclude group: <span class=\"string\">'com.android.support'</span>, <span class=\"keyword\">module</span>: <span class=\"string\">'support-annotations'</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">    compile 'com.android.support:appcompat-v7:25.2.0'</div><div class=\"line\">    compile 'com.android.support.constraint:constraint-layout:1.0.0-beta4'</div><div class=\"line\">    compile 'com.android.support:design:25.2.0'</div><div class=\"line\">    testCompile 'junit:junit:4.12'</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>the the last step is that you just need call you natice-code library </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> jniproject.ndkproject;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.Toolbar;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * auth:huanjulu</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">        System.loadLibrary(<span class=\"string\">\"hellojni\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class=\"line\">        setSupportActionBar(toolbar);</div><div class=\"line\">        ((TextView) findViewById(R.id.text)).setText(nativeMethod());</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * native code</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> String <span class=\"title\">nativeMethod</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>here is source code </p>\n<p><a href=\"https://github.com/isicout/JNIProgjectExample\" target=\"_blank\" rel=\"external\">https://github.com/isicout/JNIProgjectExample</a></p>"},{"title":"Opencv In Android","date":"2017-05-06T07:17:39.000Z","thumbnail":"https://cdn-images-1.medium.com/max/2000/1*LgaStRUic1JjYfhdYplClg.jpeg","banner":"https://cdn-images-1.medium.com/max/2000/1*LgaStRUic1JjYfhdYplClg.jpeg","_content":"\nthis article is ready for a people  who has some knowledge on android develop and a newer about how use opencv SDK in android .\n\n一: what is opencv \n\n简单的来说,  opencv 是跨平台的计算机视觉开源库, 它包含了很多图像识别算法\n\nIn simple terms , opencv is a open source library about Cross-platform computer vision \n\n[here is opencv ](https://developer.android.com/ndk/downloads/index.html?hl=zh-cn)\n[here is opencv source code](https://github.com/opencv/opencv)\n\n\n<!-- more -->\n\n二: Setting up OpenCv Library inside Android \n\n1, first our develop environment\n\nAndroid Studio \nOpencv SDK 3.2\n\n2, you need download and import Opencv library SDK into android studio peoject \n\n[SDK](http://opencv.org/opencv-3-2.html)\n\n然后你需要使用sdk的java 部分的代码作为你项目的moudle\n\n `From File -> New -> Import Module`, choose folder `OpenCV-android-sdk -> sdk -> java ` \n\nthen add module dependency to your project\n\nin android studio, `Application -> Module Settings` , select the Dependencies tab , click  `+` icon at bottom ,choose `Module Dependency` and select the have imported Opencv moudle \n\nit will looks like that :\n\n![Opencv moudle](http://opd7g7we7.bkt.clouddn.com/WX20170508-162944.png)\n\ncopy libs folder under `sdk/native` to Android Studio under  `app/src/main` , and rename  `libs` to `jniLibs` , \n\n![Opencv libs](http://opd7g7we7.bkt.clouddn.com/opecv2.png)\n\n3, use opencv library \n\nto use opencv, first you need to modify your Activity xml file . example  `activity_main.xml`\n\n``` java\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    xmlns:opencv=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" >\n\n    <org.opencv.android.JavaCameraView\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        android:visibility=\"gone\"\n        android:id=\"@+id/tutorial1_activity_java_surface_view\"\n        opencv:show_fps=\"true\"\n        opencv:camera_id=\"any\" />\n\n</FrameLayout>\n```\n\nthen modify your activity , load the `libopencv_java3.so` , in here , Note: for OpenCV version 3 at this step you should instead load the library `opencv_java3`.  OpenCV version 2, you should load the `opencv_java`\n\n\n\n``` java\npackage com.example.huanjulu.opencvinandroidexample;\n\nimport org.opencv.android.BaseLoaderCallback;\nimport org.opencv.android.CameraBridgeViewBase.CvCameraViewFrame;\nimport org.opencv.android.LoaderCallbackInterface;\nimport org.opencv.android.OpenCVLoader;\nimport org.opencv.core.Mat;\nimport org.opencv.android.CameraBridgeViewBase;\nimport org.opencv.android.CameraBridgeViewBase.CvCameraViewListener2;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.MenuItem;\nimport android.view.SurfaceView;\nimport android.view.WindowManager;\n\npublic class MainActivity extends Activity implements CvCameraViewListener2 {\n    private static final String TAG = \"OCVSample::Activity\";\n\n    private CameraBridgeViewBase mOpenCvCameraView;\n    private boolean mIsJavaCamera = true;\n    private MenuItem mItemSwitchCamera = null;\n\n    private BaseLoaderCallback mLoaderCallback = new BaseLoaderCallback(this) {\n        @Override\n        public void onManagerConnected(int status) {\n            switch (status) {\n                case LoaderCallbackInterface.SUCCESS: {\n                    Log.i(TAG, \"OpenCV loaded successfully\");\n                    mOpenCvCameraView.enableView();\n                }\n                break;\n                default: {\n                    super.onManagerConnected(status);\n                }\n                break;\n            }\n        }\n    };\n\n\n    static {\n        System.loadLibrary(\"opencv_java3\");\n    }\n    /**\n     * Called when the activity is first created.\n     */\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        Log.i(TAG, \"called onCreate\");\n        super.onCreate(savedInstanceState);\n        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n\n        setContentView(R.layout.activity_main);\n\n        mOpenCvCameraView = (CameraBridgeViewBase) findViewById(R.id.tutorial1_activity_java_surface_view);\n\n        mOpenCvCameraView.setVisibility(SurfaceView.VISIBLE);\n\n        mOpenCvCameraView.setCvCameraViewListener(this);\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n        if (mOpenCvCameraView != null)\n            mOpenCvCameraView.disableView();\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n        if (!OpenCVLoader.initDebug()) {\n            Log.d(TAG, \"Internal OpenCV library not found. Using OpenCV Manager for initialization\");\n            OpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION_3_0_0, this, mLoaderCallback);\n        } else {\n            Log.d(TAG, \"OpenCV library found inside package. Using it!\");\n            mLoaderCallback.onManagerConnected(LoaderCallbackInterface.SUCCESS);\n        }\n    }\n\n    public void onDestroy() {\n        super.onDestroy();\n        if (mOpenCvCameraView != null)\n            mOpenCvCameraView.disableView();\n    }\n\n    public void onCameraViewStarted(int width, int height) {\n    }\n\n    public void onCameraViewStopped() {\n    }\n\n    public Mat onCameraFrame(CvCameraViewFrame inputFrame) {\n        return inputFrame.rgba();\n    }\n\n}\n\n```\n\nYou can create the Main Activity copying the above code. \n\nFirst you would like notice is that `MainActivity` implements  `CvCameraViewListener2` interface , this interface woulf enfore us to implement few methods which are related to  the camera \n\nthen \n\n``` java\npublic Mat onCameraFrame(CvCameraViewFrame inputFrame) {\n        return inputFrame.rgba();\n    }\n\n```\n\n这个是你使用opencv Java code 很重要的一个方法, 它接受相机的每帧原始数据, 并且你可以在这个方法内做所有的图片片处理工作, 它返回 `Mat `  作为相机要接受的帧数据.\n\nit is the best importment method for you use opencv , this will receiver the vedio as frames and you can do all the image processing inside this method and return a Mat thie this image  :)\n\n\ndont forget the permission of camera in your `AndroidMainfest.xml` \n\n``` java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.example.huanjulu.opencvinandroidexample\">\n    <supports-screens android:resizeable=\"true\"\n        android:smallScreens=\"true\"\n        android:normalScreens=\"true\"\n        android:largeScreens=\"true\"\n        android:anyDensity=\"true\" />\n\n    <uses-sdk android:minSdkVersion=\"8\" />\n\n    <uses-permission android:name=\"android.permission.CAMERA\"/>\n\n    <uses-feature android:name=\"android.hardware.camera\" android:required=\"false\"/>\n    <uses-feature android:name=\"android.hardware.camera.autofocus\" android:required=\"false\"/>\n    <uses-feature android:name=\"android.hardware.camera.front\" android:required=\"false\"/>\n    <uses-feature android:name=\"android.hardware.camera.front.autofocus\" android:required=\"false\"/>\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\">\n        <activity android:name=\".MainActivity\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n    </application>\n\n</manifest>\n```\n\nwhen open this application , if you get the follow prompt :\n\nIt seems that you device does not support camera (or it is locked ). Application will be closed.\n\nat this moment , you need manually turn on the camera Permission in device settting \n\nokay ,then yon can enjoy it \n\n\n\n\n\n\n\n","source":"_posts/Opencv-In-Android.md","raw":"\n---\ntitle: Opencv In Android\ndate: 2017-05-06 15:17:39\ntags: [Opencv, NDK, JNI, Android, C++]\nthumbnail: https://cdn-images-1.medium.com/max/2000/1*LgaStRUic1JjYfhdYplClg.jpeg\nbanner: https://cdn-images-1.medium.com/max/2000/1*LgaStRUic1JjYfhdYplClg.jpeg\n---\n\nthis article is ready for a people  who has some knowledge on android develop and a newer about how use opencv SDK in android .\n\n一: what is opencv \n\n简单的来说,  opencv 是跨平台的计算机视觉开源库, 它包含了很多图像识别算法\n\nIn simple terms , opencv is a open source library about Cross-platform computer vision \n\n[here is opencv ](https://developer.android.com/ndk/downloads/index.html?hl=zh-cn)\n[here is opencv source code](https://github.com/opencv/opencv)\n\n\n<!-- more -->\n\n二: Setting up OpenCv Library inside Android \n\n1, first our develop environment\n\nAndroid Studio \nOpencv SDK 3.2\n\n2, you need download and import Opencv library SDK into android studio peoject \n\n[SDK](http://opencv.org/opencv-3-2.html)\n\n然后你需要使用sdk的java 部分的代码作为你项目的moudle\n\n `From File -> New -> Import Module`, choose folder `OpenCV-android-sdk -> sdk -> java ` \n\nthen add module dependency to your project\n\nin android studio, `Application -> Module Settings` , select the Dependencies tab , click  `+` icon at bottom ,choose `Module Dependency` and select the have imported Opencv moudle \n\nit will looks like that :\n\n![Opencv moudle](http://opd7g7we7.bkt.clouddn.com/WX20170508-162944.png)\n\ncopy libs folder under `sdk/native` to Android Studio under  `app/src/main` , and rename  `libs` to `jniLibs` , \n\n![Opencv libs](http://opd7g7we7.bkt.clouddn.com/opecv2.png)\n\n3, use opencv library \n\nto use opencv, first you need to modify your Activity xml file . example  `activity_main.xml`\n\n``` java\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    xmlns:opencv=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" >\n\n    <org.opencv.android.JavaCameraView\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        android:visibility=\"gone\"\n        android:id=\"@+id/tutorial1_activity_java_surface_view\"\n        opencv:show_fps=\"true\"\n        opencv:camera_id=\"any\" />\n\n</FrameLayout>\n```\n\nthen modify your activity , load the `libopencv_java3.so` , in here , Note: for OpenCV version 3 at this step you should instead load the library `opencv_java3`.  OpenCV version 2, you should load the `opencv_java`\n\n\n\n``` java\npackage com.example.huanjulu.opencvinandroidexample;\n\nimport org.opencv.android.BaseLoaderCallback;\nimport org.opencv.android.CameraBridgeViewBase.CvCameraViewFrame;\nimport org.opencv.android.LoaderCallbackInterface;\nimport org.opencv.android.OpenCVLoader;\nimport org.opencv.core.Mat;\nimport org.opencv.android.CameraBridgeViewBase;\nimport org.opencv.android.CameraBridgeViewBase.CvCameraViewListener2;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.MenuItem;\nimport android.view.SurfaceView;\nimport android.view.WindowManager;\n\npublic class MainActivity extends Activity implements CvCameraViewListener2 {\n    private static final String TAG = \"OCVSample::Activity\";\n\n    private CameraBridgeViewBase mOpenCvCameraView;\n    private boolean mIsJavaCamera = true;\n    private MenuItem mItemSwitchCamera = null;\n\n    private BaseLoaderCallback mLoaderCallback = new BaseLoaderCallback(this) {\n        @Override\n        public void onManagerConnected(int status) {\n            switch (status) {\n                case LoaderCallbackInterface.SUCCESS: {\n                    Log.i(TAG, \"OpenCV loaded successfully\");\n                    mOpenCvCameraView.enableView();\n                }\n                break;\n                default: {\n                    super.onManagerConnected(status);\n                }\n                break;\n            }\n        }\n    };\n\n\n    static {\n        System.loadLibrary(\"opencv_java3\");\n    }\n    /**\n     * Called when the activity is first created.\n     */\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        Log.i(TAG, \"called onCreate\");\n        super.onCreate(savedInstanceState);\n        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n\n        setContentView(R.layout.activity_main);\n\n        mOpenCvCameraView = (CameraBridgeViewBase) findViewById(R.id.tutorial1_activity_java_surface_view);\n\n        mOpenCvCameraView.setVisibility(SurfaceView.VISIBLE);\n\n        mOpenCvCameraView.setCvCameraViewListener(this);\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n        if (mOpenCvCameraView != null)\n            mOpenCvCameraView.disableView();\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n        if (!OpenCVLoader.initDebug()) {\n            Log.d(TAG, \"Internal OpenCV library not found. Using OpenCV Manager for initialization\");\n            OpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION_3_0_0, this, mLoaderCallback);\n        } else {\n            Log.d(TAG, \"OpenCV library found inside package. Using it!\");\n            mLoaderCallback.onManagerConnected(LoaderCallbackInterface.SUCCESS);\n        }\n    }\n\n    public void onDestroy() {\n        super.onDestroy();\n        if (mOpenCvCameraView != null)\n            mOpenCvCameraView.disableView();\n    }\n\n    public void onCameraViewStarted(int width, int height) {\n    }\n\n    public void onCameraViewStopped() {\n    }\n\n    public Mat onCameraFrame(CvCameraViewFrame inputFrame) {\n        return inputFrame.rgba();\n    }\n\n}\n\n```\n\nYou can create the Main Activity copying the above code. \n\nFirst you would like notice is that `MainActivity` implements  `CvCameraViewListener2` interface , this interface woulf enfore us to implement few methods which are related to  the camera \n\nthen \n\n``` java\npublic Mat onCameraFrame(CvCameraViewFrame inputFrame) {\n        return inputFrame.rgba();\n    }\n\n```\n\n这个是你使用opencv Java code 很重要的一个方法, 它接受相机的每帧原始数据, 并且你可以在这个方法内做所有的图片片处理工作, 它返回 `Mat `  作为相机要接受的帧数据.\n\nit is the best importment method for you use opencv , this will receiver the vedio as frames and you can do all the image processing inside this method and return a Mat thie this image  :)\n\n\ndont forget the permission of camera in your `AndroidMainfest.xml` \n\n``` java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.example.huanjulu.opencvinandroidexample\">\n    <supports-screens android:resizeable=\"true\"\n        android:smallScreens=\"true\"\n        android:normalScreens=\"true\"\n        android:largeScreens=\"true\"\n        android:anyDensity=\"true\" />\n\n    <uses-sdk android:minSdkVersion=\"8\" />\n\n    <uses-permission android:name=\"android.permission.CAMERA\"/>\n\n    <uses-feature android:name=\"android.hardware.camera\" android:required=\"false\"/>\n    <uses-feature android:name=\"android.hardware.camera.autofocus\" android:required=\"false\"/>\n    <uses-feature android:name=\"android.hardware.camera.front\" android:required=\"false\"/>\n    <uses-feature android:name=\"android.hardware.camera.front.autofocus\" android:required=\"false\"/>\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\">\n        <activity android:name=\".MainActivity\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n    </application>\n\n</manifest>\n```\n\nwhen open this application , if you get the follow prompt :\n\nIt seems that you device does not support camera (or it is locked ). Application will be closed.\n\nat this moment , you need manually turn on the camera Permission in device settting \n\nokay ,then yon can enjoy it \n\n\n\n\n\n\n\n","slug":"Opencv-In-Android","published":1,"updated":"2017-05-08T10:37:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7fuy45w000uji5jz65kxfag","content":"<p>this article is ready for a people  who has some knowledge on android develop and a newer about how use opencv SDK in android .</p>\n<p>一: what is opencv </p>\n<p>简单的来说,  opencv 是跨平台的计算机视觉开源库, 它包含了很多图像识别算法</p>\n<p>In simple terms , opencv is a open source library about Cross-platform computer vision </p>\n<p><a href=\"https://developer.android.com/ndk/downloads/index.html?hl=zh-cn\" target=\"_blank\" rel=\"external\">here is opencv </a><br><a href=\"https://github.com/opencv/opencv\" target=\"_blank\" rel=\"external\">here is opencv source code</a></p>\n<a id=\"more\"></a>\n<p>二: Setting up OpenCv Library inside Android </p>\n<p>1, first our develop environment</p>\n<p>Android Studio<br>Opencv SDK 3.2</p>\n<p>2, you need download and import Opencv library SDK into android studio peoject </p>\n<p><a href=\"http://opencv.org/opencv-3-2.html\" target=\"_blank\" rel=\"external\">SDK</a></p>\n<p>然后你需要使用sdk的java 部分的代码作为你项目的moudle</p>\n<p> <code>From File -&gt; New -&gt; Import Module</code>, choose folder <code>OpenCV-android-sdk -&gt; sdk -&gt; java</code> </p>\n<p>then add module dependency to your project</p>\n<p>in android studio, <code>Application -&gt; Module Settings</code> , select the Dependencies tab , click  <code>+</code> icon at bottom ,choose <code>Module Dependency</code> and select the have imported Opencv moudle </p>\n<p>it will looks like that :</p>\n<p><img src=\"http://opd7g7we7.bkt.clouddn.com/WX20170508-162944.png\" alt=\"Opencv moudle\"></p>\n<p>copy libs folder under <code>sdk/native</code> to Android Studio under  <code>app/src/main</code> , and rename  <code>libs</code> to <code>jniLibs</code> , </p>\n<p><img src=\"http://opd7g7we7.bkt.clouddn.com/opecv2.png\" alt=\"Opencv libs\"></p>\n<p>3, use opencv library </p>\n<p>to use opencv, first you need to modify your Activity xml file . example  <code>activity_main.xml</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"</div><div class=\"line\">    xmlns:tools=\"http://schemas.android.com/tools\"</div><div class=\"line\">    xmlns:opencv=\"http://schemas.android.com/apk/res-auto\"</div><div class=\"line\">    android:layout_width=\"match_parent\"</div><div class=\"line\">    android:layout_height=\"match_parent\" &gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;org.opencv.android.JavaCameraView</div><div class=\"line\">        android:layout_width=\"fill_parent\"</div><div class=\"line\">        android:layout_height=\"fill_parent\"</div><div class=\"line\">        android:visibility=\"gone\"</div><div class=\"line\">        android:id=\"@+id/tutorial1_activity_java_surface_view\"</div><div class=\"line\">        opencv:show_fps=\"true\"</div><div class=\"line\">        opencv:camera_id=\"any\" /&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/FrameLayout&gt;</div></pre></td></tr></table></figure>\n<p>then modify your activity , load the <code>libopencv_java3.so</code> , in here , Note: for OpenCV version 3 at this step you should instead load the library <code>opencv_java3</code>.  OpenCV version 2, you should load the <code>opencv_java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example.huanjulu.opencvinandroidexample;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.opencv.android.BaseLoaderCallback;</div><div class=\"line\"><span class=\"keyword\">import</span> org.opencv.android.CameraBridgeViewBase.CvCameraViewFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> org.opencv.android.LoaderCallbackInterface;</div><div class=\"line\"><span class=\"keyword\">import</span> org.opencv.android.OpenCVLoader;</div><div class=\"line\"><span class=\"keyword\">import</span> org.opencv.core.Mat;</div><div class=\"line\"><span class=\"keyword\">import</span> org.opencv.android.CameraBridgeViewBase;</div><div class=\"line\"><span class=\"keyword\">import</span> org.opencv.android.CameraBridgeViewBase.CvCameraViewListener2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.MenuItem;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.SurfaceView;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.WindowManager;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> <span class=\"keyword\">implements</span> <span class=\"title\">CvCameraViewListener2</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"OCVSample::Activity\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> CameraBridgeViewBase mOpenCvCameraView;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mIsJavaCamera = <span class=\"keyword\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> MenuItem mItemSwitchCamera = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> BaseLoaderCallback mLoaderCallback = <span class=\"keyword\">new</span> BaseLoaderCallback(<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onManagerConnected</span><span class=\"params\">(<span class=\"keyword\">int</span> status)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (status) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> LoaderCallbackInterface.SUCCESS: &#123;</div><div class=\"line\">                    Log.i(TAG, <span class=\"string\">\"OpenCV loaded successfully\"</span>);</div><div class=\"line\">                    mOpenCvCameraView.enableView();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">default</span>: &#123;</div><div class=\"line\">                    <span class=\"keyword\">super</span>.onManagerConnected(status);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">        System.loadLibrary(<span class=\"string\">\"opencv_java3\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Called when the activity is first created.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        Log.i(TAG, <span class=\"string\">\"called onCreate\"</span>);</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);</div><div class=\"line\"></div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\"></div><div class=\"line\">        mOpenCvCameraView = (CameraBridgeViewBase) findViewById(R.id.tutorial1_activity_java_surface_view);</div><div class=\"line\"></div><div class=\"line\">        mOpenCvCameraView.setVisibility(SurfaceView.VISIBLE);</div><div class=\"line\"></div><div class=\"line\">        mOpenCvCameraView.setCvCameraViewListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPause</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onPause();</div><div class=\"line\">        <span class=\"keyword\">if</span> (mOpenCvCameraView != <span class=\"keyword\">null</span>)</div><div class=\"line\">            mOpenCvCameraView.disableView();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onResume();</div><div class=\"line\">        <span class=\"keyword\">if</span> (!OpenCVLoader.initDebug()) &#123;</div><div class=\"line\">            Log.d(TAG, <span class=\"string\">\"Internal OpenCV library not found. Using OpenCV Manager for initialization\"</span>);</div><div class=\"line\">            OpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION_3_0_0, <span class=\"keyword\">this</span>, mLoaderCallback);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            Log.d(TAG, <span class=\"string\">\"OpenCV library found inside package. Using it!\"</span>);</div><div class=\"line\">            mLoaderCallback.onManagerConnected(LoaderCallbackInterface.SUCCESS);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">        <span class=\"keyword\">if</span> (mOpenCvCameraView != <span class=\"keyword\">null</span>)</div><div class=\"line\">            mOpenCvCameraView.disableView();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCameraViewStarted</span><span class=\"params\">(<span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCameraViewStopped</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Mat <span class=\"title\">onCameraFrame</span><span class=\"params\">(CvCameraViewFrame inputFrame)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> inputFrame.rgba();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>You can create the Main Activity copying the above code. </p>\n<p>First you would like notice is that <code>MainActivity</code> implements  <code>CvCameraViewListener2</code> interface , this interface woulf enfore us to implement few methods which are related to  the camera </p>\n<p>then </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Mat <span class=\"title\">onCameraFrame</span><span class=\"params\">(CvCameraViewFrame inputFrame)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> inputFrame.rgba();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>这个是你使用opencv Java code 很重要的一个方法, 它接受相机的每帧原始数据, 并且你可以在这个方法内做所有的图片片处理工作, 它返回 <code>Mat</code>  作为相机要接受的帧数据.</p>\n<p>it is the best importment method for you use opencv , this will receiver the vedio as frames and you can do all the image processing inside this method and return a Mat thie this image  :)</p>\n<p>dont forget the permission of camera in your <code>AndroidMainfest.xml</code> </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\">&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"</div><div class=\"line\">    package=\"com.example.huanjulu.opencvinandroidexample\"&gt;</div><div class=\"line\">    &lt;supports-screens android:resizeable=\"true\"</div><div class=\"line\">        android:smallScreens=\"true\"</div><div class=\"line\">        android:normalScreens=\"true\"</div><div class=\"line\">        android:largeScreens=\"true\"</div><div class=\"line\">        android:anyDensity=\"true\" /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;uses-sdk android:minSdkVersion=\"8\" /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;uses-permission android:name=\"android.permission.CAMERA\"/&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;uses-feature android:name=\"android.hardware.camera\" android:required=\"false\"/&gt;</div><div class=\"line\">    &lt;uses-feature android:name=\"android.hardware.camera.autofocus\" android:required=\"false\"/&gt;</div><div class=\"line\">    &lt;uses-feature android:name=\"android.hardware.camera.front\" android:required=\"false\"/&gt;</div><div class=\"line\">    &lt;uses-feature android:name=\"android.hardware.camera.front.autofocus\" android:required=\"false\"/&gt;</div><div class=\"line\">    &lt;application</div><div class=\"line\">        android:allowBackup=\"true\"</div><div class=\"line\">        android:icon=\"@mipmap/ic_launcher\"</div><div class=\"line\">        android:label=\"@string/app_name\"</div><div class=\"line\">        android:roundIcon=\"@mipmap/ic_launcher_round\"</div><div class=\"line\">        android:supportsRtl=\"true\"</div><div class=\"line\">        android:theme=\"@style/AppTheme\"&gt;</div><div class=\"line\">        &lt;activity android:name=\".MainActivity\"&gt;</div><div class=\"line\">            &lt;intent-filter&gt;</div><div class=\"line\">                &lt;action android:name=\"android.intent.action.MAIN\" /&gt;</div><div class=\"line\"></div><div class=\"line\">                &lt;category android:name=\"android.intent.category.LAUNCHER\" /&gt;</div><div class=\"line\">            &lt;/intent-filter&gt;</div><div class=\"line\">        &lt;/activity&gt;</div><div class=\"line\">    &lt;/application&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/manifest&gt;</div></pre></td></tr></table></figure>\n<p>when open this application , if you get the follow prompt :</p>\n<p>It seems that you device does not support camera (or it is locked ). Application will be closed.</p>\n<p>at this moment , you need manually turn on the camera Permission in device settting </p>\n<p>okay ,then yon can enjoy it </p>\n","site":{"data":{}},"excerpt":"<p>this article is ready for a people  who has some knowledge on android develop and a newer about how use opencv SDK in android .</p>\n<p>一: what is opencv </p>\n<p>简单的来说,  opencv 是跨平台的计算机视觉开源库, 它包含了很多图像识别算法</p>\n<p>In simple terms , opencv is a open source library about Cross-platform computer vision </p>\n<p><a href=\"https://developer.android.com/ndk/downloads/index.html?hl=zh-cn\" target=\"_blank\" rel=\"external\">here is opencv </a><br><a href=\"https://github.com/opencv/opencv\" target=\"_blank\" rel=\"external\">here is opencv source code</a></p>","more":"<p>二: Setting up OpenCv Library inside Android </p>\n<p>1, first our develop environment</p>\n<p>Android Studio<br>Opencv SDK 3.2</p>\n<p>2, you need download and import Opencv library SDK into android studio peoject </p>\n<p><a href=\"http://opencv.org/opencv-3-2.html\" target=\"_blank\" rel=\"external\">SDK</a></p>\n<p>然后你需要使用sdk的java 部分的代码作为你项目的moudle</p>\n<p> <code>From File -&gt; New -&gt; Import Module</code>, choose folder <code>OpenCV-android-sdk -&gt; sdk -&gt; java</code> </p>\n<p>then add module dependency to your project</p>\n<p>in android studio, <code>Application -&gt; Module Settings</code> , select the Dependencies tab , click  <code>+</code> icon at bottom ,choose <code>Module Dependency</code> and select the have imported Opencv moudle </p>\n<p>it will looks like that :</p>\n<p><img src=\"http://opd7g7we7.bkt.clouddn.com/WX20170508-162944.png\" alt=\"Opencv moudle\"></p>\n<p>copy libs folder under <code>sdk/native</code> to Android Studio under  <code>app/src/main</code> , and rename  <code>libs</code> to <code>jniLibs</code> , </p>\n<p><img src=\"http://opd7g7we7.bkt.clouddn.com/opecv2.png\" alt=\"Opencv libs\"></p>\n<p>3, use opencv library </p>\n<p>to use opencv, first you need to modify your Activity xml file . example  <code>activity_main.xml</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"</div><div class=\"line\">    xmlns:tools=\"http://schemas.android.com/tools\"</div><div class=\"line\">    xmlns:opencv=\"http://schemas.android.com/apk/res-auto\"</div><div class=\"line\">    android:layout_width=\"match_parent\"</div><div class=\"line\">    android:layout_height=\"match_parent\" &gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;org.opencv.android.JavaCameraView</div><div class=\"line\">        android:layout_width=\"fill_parent\"</div><div class=\"line\">        android:layout_height=\"fill_parent\"</div><div class=\"line\">        android:visibility=\"gone\"</div><div class=\"line\">        android:id=\"@+id/tutorial1_activity_java_surface_view\"</div><div class=\"line\">        opencv:show_fps=\"true\"</div><div class=\"line\">        opencv:camera_id=\"any\" /&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/FrameLayout&gt;</div></pre></td></tr></table></figure>\n<p>then modify your activity , load the <code>libopencv_java3.so</code> , in here , Note: for OpenCV version 3 at this step you should instead load the library <code>opencv_java3</code>.  OpenCV version 2, you should load the <code>opencv_java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example.huanjulu.opencvinandroidexample;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.opencv.android.BaseLoaderCallback;</div><div class=\"line\"><span class=\"keyword\">import</span> org.opencv.android.CameraBridgeViewBase.CvCameraViewFrame;</div><div class=\"line\"><span class=\"keyword\">import</span> org.opencv.android.LoaderCallbackInterface;</div><div class=\"line\"><span class=\"keyword\">import</span> org.opencv.android.OpenCVLoader;</div><div class=\"line\"><span class=\"keyword\">import</span> org.opencv.core.Mat;</div><div class=\"line\"><span class=\"keyword\">import</span> org.opencv.android.CameraBridgeViewBase;</div><div class=\"line\"><span class=\"keyword\">import</span> org.opencv.android.CameraBridgeViewBase.CvCameraViewListener2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.MenuItem;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.SurfaceView;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.WindowManager;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> <span class=\"keyword\">implements</span> <span class=\"title\">CvCameraViewListener2</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"OCVSample::Activity\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> CameraBridgeViewBase mOpenCvCameraView;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mIsJavaCamera = <span class=\"keyword\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> MenuItem mItemSwitchCamera = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> BaseLoaderCallback mLoaderCallback = <span class=\"keyword\">new</span> BaseLoaderCallback(<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onManagerConnected</span><span class=\"params\">(<span class=\"keyword\">int</span> status)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (status) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> LoaderCallbackInterface.SUCCESS: &#123;</div><div class=\"line\">                    Log.i(TAG, <span class=\"string\">\"OpenCV loaded successfully\"</span>);</div><div class=\"line\">                    mOpenCvCameraView.enableView();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">default</span>: &#123;</div><div class=\"line\">                    <span class=\"keyword\">super</span>.onManagerConnected(status);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">        System.loadLibrary(<span class=\"string\">\"opencv_java3\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Called when the activity is first created.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        Log.i(TAG, <span class=\"string\">\"called onCreate\"</span>);</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);</div><div class=\"line\"></div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\"></div><div class=\"line\">        mOpenCvCameraView = (CameraBridgeViewBase) findViewById(R.id.tutorial1_activity_java_surface_view);</div><div class=\"line\"></div><div class=\"line\">        mOpenCvCameraView.setVisibility(SurfaceView.VISIBLE);</div><div class=\"line\"></div><div class=\"line\">        mOpenCvCameraView.setCvCameraViewListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPause</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onPause();</div><div class=\"line\">        <span class=\"keyword\">if</span> (mOpenCvCameraView != <span class=\"keyword\">null</span>)</div><div class=\"line\">            mOpenCvCameraView.disableView();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onResume();</div><div class=\"line\">        <span class=\"keyword\">if</span> (!OpenCVLoader.initDebug()) &#123;</div><div class=\"line\">            Log.d(TAG, <span class=\"string\">\"Internal OpenCV library not found. Using OpenCV Manager for initialization\"</span>);</div><div class=\"line\">            OpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION_3_0_0, <span class=\"keyword\">this</span>, mLoaderCallback);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            Log.d(TAG, <span class=\"string\">\"OpenCV library found inside package. Using it!\"</span>);</div><div class=\"line\">            mLoaderCallback.onManagerConnected(LoaderCallbackInterface.SUCCESS);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">        <span class=\"keyword\">if</span> (mOpenCvCameraView != <span class=\"keyword\">null</span>)</div><div class=\"line\">            mOpenCvCameraView.disableView();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCameraViewStarted</span><span class=\"params\">(<span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCameraViewStopped</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Mat <span class=\"title\">onCameraFrame</span><span class=\"params\">(CvCameraViewFrame inputFrame)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> inputFrame.rgba();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>You can create the Main Activity copying the above code. </p>\n<p>First you would like notice is that <code>MainActivity</code> implements  <code>CvCameraViewListener2</code> interface , this interface woulf enfore us to implement few methods which are related to  the camera </p>\n<p>then </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Mat <span class=\"title\">onCameraFrame</span><span class=\"params\">(CvCameraViewFrame inputFrame)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> inputFrame.rgba();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>这个是你使用opencv Java code 很重要的一个方法, 它接受相机的每帧原始数据, 并且你可以在这个方法内做所有的图片片处理工作, 它返回 <code>Mat</code>  作为相机要接受的帧数据.</p>\n<p>it is the best importment method for you use opencv , this will receiver the vedio as frames and you can do all the image processing inside this method and return a Mat thie this image  :)</p>\n<p>dont forget the permission of camera in your <code>AndroidMainfest.xml</code> </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\">&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"</div><div class=\"line\">    package=\"com.example.huanjulu.opencvinandroidexample\"&gt;</div><div class=\"line\">    &lt;supports-screens android:resizeable=\"true\"</div><div class=\"line\">        android:smallScreens=\"true\"</div><div class=\"line\">        android:normalScreens=\"true\"</div><div class=\"line\">        android:largeScreens=\"true\"</div><div class=\"line\">        android:anyDensity=\"true\" /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;uses-sdk android:minSdkVersion=\"8\" /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;uses-permission android:name=\"android.permission.CAMERA\"/&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;uses-feature android:name=\"android.hardware.camera\" android:required=\"false\"/&gt;</div><div class=\"line\">    &lt;uses-feature android:name=\"android.hardware.camera.autofocus\" android:required=\"false\"/&gt;</div><div class=\"line\">    &lt;uses-feature android:name=\"android.hardware.camera.front\" android:required=\"false\"/&gt;</div><div class=\"line\">    &lt;uses-feature android:name=\"android.hardware.camera.front.autofocus\" android:required=\"false\"/&gt;</div><div class=\"line\">    &lt;application</div><div class=\"line\">        android:allowBackup=\"true\"</div><div class=\"line\">        android:icon=\"@mipmap/ic_launcher\"</div><div class=\"line\">        android:label=\"@string/app_name\"</div><div class=\"line\">        android:roundIcon=\"@mipmap/ic_launcher_round\"</div><div class=\"line\">        android:supportsRtl=\"true\"</div><div class=\"line\">        android:theme=\"@style/AppTheme\"&gt;</div><div class=\"line\">        &lt;activity android:name=\".MainActivity\"&gt;</div><div class=\"line\">            &lt;intent-filter&gt;</div><div class=\"line\">                &lt;action android:name=\"android.intent.action.MAIN\" /&gt;</div><div class=\"line\"></div><div class=\"line\">                &lt;category android:name=\"android.intent.category.LAUNCHER\" /&gt;</div><div class=\"line\">            &lt;/intent-filter&gt;</div><div class=\"line\">        &lt;/activity&gt;</div><div class=\"line\">    &lt;/application&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/manifest&gt;</div></pre></td></tr></table></figure>\n<p>when open this application , if you get the follow prompt :</p>\n<p>It seems that you device does not support camera (or it is locked ). Application will be closed.</p>\n<p>at this moment , you need manually turn on the camera Permission in device settting </p>\n<p>okay ,then yon can enjoy it </p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj7fuy4520001ji5j6s8f0edz","tag_id":"cj7fuy4550003ji5j9pwk9bfj","_id":"cj7fuy45i000aji5jefjyi6er"},{"post_id":"cj7fuy4520001ji5j6s8f0edz","tag_id":"cj7fuy45d0007ji5jh711luf2","_id":"cj7fuy45i000bji5j4qaxb9ex"},{"post_id":"cj7fuy4520001ji5j6s8f0edz","tag_id":"cj7fuy45f0008ji5jci6liqfl","_id":"cj7fuy45j000dji5jpshows6f"},{"post_id":"cj7fuy4530002ji5jlgjas8qc","tag_id":"cj7fuy45f0008ji5jci6liqfl","_id":"cj7fuy45j000eji5j56rl73r1"},{"post_id":"cj7fuy4580004ji5jh82xxlu6","tag_id":"cj7fuy45i000cji5juiohm91x","_id":"cj7fuy45j000hji5jyke4wdvo"},{"post_id":"cj7fuy4580004ji5jh82xxlu6","tag_id":"cj7fuy45j000fji5j5mimdt9d","_id":"cj7fuy45j000iji5jby3dx2al"},{"post_id":"cj7fuy4590005ji5jghjaxjrm","tag_id":"cj7fuy45f0008ji5jci6liqfl","_id":"cj7fuy45j000kji5jqk4d4iix"},{"post_id":"cj7fuy45a0006ji5jxsdl1n8z","tag_id":"cj7fuy45j000jji5ji80fgfvn","_id":"cj7fuy45l000oji5j8h1q8o3s"},{"post_id":"cj7fuy45a0006ji5jxsdl1n8z","tag_id":"cj7fuy45f0008ji5jci6liqfl","_id":"cj7fuy45l000pji5jzktjy2ek"},{"post_id":"cj7fuy45a0006ji5jxsdl1n8z","tag_id":"cj7fuy45k000mji5jk1xca6ct","_id":"cj7fuy45m000qji5jmlw5byh0"},{"post_id":"cj7fuy45a0006ji5jxsdl1n8z","tag_id":"cj7fuy45l000nji5japmszy25","_id":"cj7fuy45m000rji5jbos7kss6"},{"post_id":"cj7fuy45s000tji5jxwzvg24v","tag_id":"cj7fuy45l000nji5japmszy25","_id":"cj7fuy461000xji5jolzzim49"},{"post_id":"cj7fuy45s000tji5jxwzvg24v","tag_id":"cj7fuy45z000vji5jtw7rr4tt","_id":"cj7fuy461000yji5jy58rsqfu"},{"post_id":"cj7fuy45s000tji5jxwzvg24v","tag_id":"cj7fuy45f0008ji5jci6liqfl","_id":"cj7fuy461000zji5jq174kn2y"},{"post_id":"cj7fuy45w000uji5jz65kxfag","tag_id":"cj7fuy45j000jji5ji80fgfvn","_id":"cj7fuy4620010ji5j02my396f"},{"post_id":"cj7fuy45w000uji5jz65kxfag","tag_id":"cj7fuy45l000nji5japmszy25","_id":"cj7fuy4620011ji5j45c0rw2t"},{"post_id":"cj7fuy45w000uji5jz65kxfag","tag_id":"cj7fuy45z000vji5jtw7rr4tt","_id":"cj7fuy4630012ji5jahueyshe"},{"post_id":"cj7fuy45w000uji5jz65kxfag","tag_id":"cj7fuy45f0008ji5jci6liqfl","_id":"cj7fuy4630013ji5jxljf5okf"},{"post_id":"cj7fuy45w000uji5jz65kxfag","tag_id":"cj7fuy45k000mji5jk1xca6ct","_id":"cj7fuy4630014ji5jhxovb9m3"}],"Tag":[{"name":"Jenkins","_id":"cj7fuy4550003ji5j9pwk9bfj"},{"name":"Ci","_id":"cj7fuy45d0007ji5jh711luf2"},{"name":"Android","_id":"cj7fuy45f0008ji5jci6liqfl"},{"name":"Java","_id":"cj7fuy45i000cji5juiohm91x"},{"name":"Data structure","_id":"cj7fuy45j000fji5j5mimdt9d"},{"name":"Opencv","_id":"cj7fuy45j000jji5ji80fgfvn"},{"name":"C++","_id":"cj7fuy45k000mji5jk1xca6ct"},{"name":"NDK","_id":"cj7fuy45l000nji5japmszy25"},{"name":"JNI","_id":"cj7fuy45z000vji5jtw7rr4tt"}]}}